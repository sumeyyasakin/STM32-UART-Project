
spv1_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000504c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e8  080057e8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057f0  080057f0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080057f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000094  0800588c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800588c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a022  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6b  00000000  00000000  0002a0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002bc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014863  00000000  00000000  0002cc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afcf  00000000  00000000  0004147b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000794c2  00000000  00000000  0004c44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c590c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002458  00000000  00000000  000c595c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080050f4 	.word	0x080050f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	080050f4 	.word	0x080050f4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	6039      	str	r1, [r7, #0]
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b7f      	cmp	r3, #127	; 0x7f
 80004d0:	d828      	bhi.n	8000524 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d2:	4a2f      	ldr	r2, [pc, #188]	; (8000590 <__NVIC_SetPriority+0xd4>)
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b25b      	sxtb	r3, r3
 80004da:	089b      	lsrs	r3, r3, #2
 80004dc:	33c0      	adds	r3, #192	; 0xc0
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	589b      	ldr	r3, [r3, r2]
 80004e2:	1dfa      	adds	r2, r7, #7
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	0011      	movs	r1, r2
 80004e8:	2203      	movs	r2, #3
 80004ea:	400a      	ands	r2, r1
 80004ec:	00d2      	lsls	r2, r2, #3
 80004ee:	21ff      	movs	r1, #255	; 0xff
 80004f0:	4091      	lsls	r1, r2
 80004f2:	000a      	movs	r2, r1
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	401a      	ands	r2, r3
 80004f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	019b      	lsls	r3, r3, #6
 80004fe:	22ff      	movs	r2, #255	; 0xff
 8000500:	401a      	ands	r2, r3
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	0018      	movs	r0, r3
 8000508:	2303      	movs	r3, #3
 800050a:	4003      	ands	r3, r0
 800050c:	00db      	lsls	r3, r3, #3
 800050e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000510:	481f      	ldr	r0, [pc, #124]	; (8000590 <__NVIC_SetPriority+0xd4>)
 8000512:	1dfb      	adds	r3, r7, #7
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b25b      	sxtb	r3, r3
 8000518:	089b      	lsrs	r3, r3, #2
 800051a:	430a      	orrs	r2, r1
 800051c:	33c0      	adds	r3, #192	; 0xc0
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000522:	e031      	b.n	8000588 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000524:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <__NVIC_SetPriority+0xd8>)
 8000526:	1dfb      	adds	r3, r7, #7
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	0019      	movs	r1, r3
 800052c:	230f      	movs	r3, #15
 800052e:	400b      	ands	r3, r1
 8000530:	3b08      	subs	r3, #8
 8000532:	089b      	lsrs	r3, r3, #2
 8000534:	3306      	adds	r3, #6
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	18d3      	adds	r3, r2, r3
 800053a:	3304      	adds	r3, #4
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1dfa      	adds	r2, r7, #7
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	0011      	movs	r1, r2
 8000544:	2203      	movs	r2, #3
 8000546:	400a      	ands	r2, r1
 8000548:	00d2      	lsls	r2, r2, #3
 800054a:	21ff      	movs	r1, #255	; 0xff
 800054c:	4091      	lsls	r1, r2
 800054e:	000a      	movs	r2, r1
 8000550:	43d2      	mvns	r2, r2
 8000552:	401a      	ands	r2, r3
 8000554:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	019b      	lsls	r3, r3, #6
 800055a:	22ff      	movs	r2, #255	; 0xff
 800055c:	401a      	ands	r2, r3
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	0018      	movs	r0, r3
 8000564:	2303      	movs	r3, #3
 8000566:	4003      	ands	r3, r0
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <__NVIC_SetPriority+0xd8>)
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	001c      	movs	r4, r3
 8000574:	230f      	movs	r3, #15
 8000576:	4023      	ands	r3, r4
 8000578:	3b08      	subs	r3, #8
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	430a      	orrs	r2, r1
 800057e:	3306      	adds	r3, #6
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	18c3      	adds	r3, r0, r3
 8000584:	3304      	adds	r3, #4
 8000586:	601a      	str	r2, [r3, #0]
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b003      	add	sp, #12
 800058e:	bd90      	pop	{r4, r7, pc}
 8000590:	e000e100 	.word	0xe000e100
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1e5a      	subs	r2, r3, #1
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	045b      	lsls	r3, r3, #17
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d301      	bcc.n	80005b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ac:	2301      	movs	r3, #1
 80005ae:	e010      	b.n	80005d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <SysTick_Config+0x44>)
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	3a01      	subs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005b8:	2301      	movs	r3, #1
 80005ba:	425b      	negs	r3, r3
 80005bc:	2103      	movs	r1, #3
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ff7c 	bl	80004bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <SysTick_Config+0x44>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <SysTick_Config+0x44>)
 80005cc:	2207      	movs	r2, #7
 80005ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	0018      	movs	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	e000e010 	.word	0xe000e010

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 fd9a 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f80e 	bl	8000608 <SystemClock_Config>
//  MX_GPIO_Init();
//  MX_USART2_UART_Init();
//  MX_USART1_UART_Init();

  /* USER CODE BEGIN 2 */
   UART_Init();
 80005ec:	f001 fc94 	bl	8001f18 <UART_Init>
   systick_init();
 80005f0:	f000 f88e 	bl	8000710 <systick_init>

   comp_spv1_serial_init();
 80005f4:	f000 f8a6 	bl	8000744 <comp_spv1_serial_init>
   Tx_Frame(SerialCommand);
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <main+0x24>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 f981 	bl	8000904 <Tx_Frame>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x22>
 8000604:	20000000 	.word	0x20000000

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b09d      	sub	sp, #116	; 0x74
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	2438      	movs	r4, #56	; 0x38
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	2338      	movs	r3, #56	; 0x38
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f003 fd0e 	bl	800403a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061e:	2324      	movs	r3, #36	; 0x24
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	0018      	movs	r0, r3
 8000624:	2314      	movs	r3, #20
 8000626:	001a      	movs	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	f003 fd06 	bl	800403a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062e:	003b      	movs	r3, r7
 8000630:	0018      	movs	r0, r3
 8000632:	2324      	movs	r3, #36	; 0x24
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f003 fcff 	bl	800403a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <SystemClock_Config+0xd0>)
 8000642:	401a      	ands	r2, r3
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <SystemClock_Config+0xcc>)
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	0109      	lsls	r1, r1, #4
 800064a:	430a      	orrs	r2, r1
 800064c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064e:	0021      	movs	r1, r4
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2202      	movs	r2, #2
 8000654:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2210      	movs	r2, #16
 8000660:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	187b      	adds	r3, r7, r1
 800066a:	0018      	movs	r0, r3
 800066c:	f002 f826 	bl	80026bc <HAL_RCC_OscConfig>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000674:	f000 f860 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	2124      	movs	r1, #36	; 0x24
 800067a:	187b      	adds	r3, r7, r1
 800067c:	220f      	movs	r2, #15
 800067e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2201      	movs	r2, #1
 8000684:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f002 fbd1 	bl	8002e44 <HAL_RCC_ClockConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006a6:	f000 f847 	bl	8000738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2203      	movs	r2, #3
 80006ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006bc:	003b      	movs	r3, r7
 80006be:	0018      	movs	r0, r3
 80006c0:	f002 fde4 	bl	800328c <HAL_RCCEx_PeriphCLKConfig>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c8:	f000 f836 	bl	8000738 <Error_Handler>
  }
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b01d      	add	sp, #116	; 0x74
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	40007000 	.word	0x40007000
 80006d8:	ffffe7ff 	.word	0xffffe7ff

080006dc <SysTick_Handler>:
//
//}

/* USER CODE BEGIN 4 */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Serial.RxSerialTimeOut--;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <SysTick_Handler+0x30>)
 80006e2:	88db      	ldrh	r3, [r3, #6]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <SysTick_Handler+0x30>)
 80006ec:	80da      	strh	r2, [r3, #6]

	if(Serial.RxSerialTimeOut == 0)
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <SysTick_Handler+0x30>)
 80006f0:	88db      	ldrh	r3, [r3, #6]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d105      	bne.n	8000704 <SysTick_Handler+0x28>
	{
		Serial.rxFlag = SERIAL_FLAG_RX_IN_PROGRESS;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <SysTick_Handler+0x30>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	711a      	strb	r2, [r3, #4]
		Serial.RxState = RXSTATE_SOF;
 80006fe:	4b03      	ldr	r3, [pc, #12]	; (800070c <SysTick_Handler+0x30>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
 // HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	200000b0 	.word	0x200000b0

08000710 <systick_init>:

void systick_init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	// Update SystemCoreClock value
	  SystemCoreClockUpdate();
 8000714:	f001 fb36 	bl	8001d84 <SystemCoreClockUpdate>
	  SysTick_Config(SystemCoreClock / 1000); // Generate interrupt each 1 ms
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <systick_init+0x24>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	22fa      	movs	r2, #250	; 0xfa
 800071e:	0091      	lsls	r1, r2, #2
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff fcfb 	bl	800011c <__udivsi3>
 8000726:	0003      	movs	r3, r0
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff ff35 	bl	8000598 <SysTick_Config>

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000024 	.word	0x20000024

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <comp_spv1_serial_init>:
uint8_t  Decrement_Value_Block[4] = {0x02, 0x00, 0x00, 0x00};
uint8_t  decrement_value_block_no = 0x04;


 void comp_spv1_serial_init()
 {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    RxFrame.NodeAddress = 0x00;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <comp_spv1_serial_init+0x28>)
 800074a:	2200      	movs	r2, #0
 800074c:	709a      	strb	r2, [r3, #2]
 	Serial.RxState = RXSTATE_SOF;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <comp_spv1_serial_init+0x2c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
 	RxFrame.Checksum = 0;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <comp_spv1_serial_init+0x28>)
 8000756:	2200      	movs	r2, #0
 8000758:	711a      	strb	r2, [r3, #4]
 	Serial.ReceivedDataCount = 0;
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <comp_spv1_serial_init+0x2c>)
 800075c:	2200      	movs	r2, #0
 800075e:	805a      	strh	r2, [r3, #2]
 	Serial.rxFlag = 0 ;
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <comp_spv1_serial_init+0x2c>)
 8000762:	2200      	movs	r2, #0
 8000764:	711a      	strb	r2, [r3, #4]
 }
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000bc 	.word	0x200000bc
 8000770:	200000b0 	.word	0x200000b0

08000774 <spv1_uart_rx_event>:

void spv1_uart_rx_event (uint8_t rx_data[MAX_DATA_COUNT])
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
    Serial.RxSerialTimeOut = MAX_TIMEOUT;
 800077c:	4b5e      	ldr	r3, [pc, #376]	; (80008f8 <spv1_uart_rx_event+0x184>)
 800077e:	2205      	movs	r2, #5
 8000780:	80da      	strh	r2, [r3, #6]
    Serial.rxFlag = SERIAL_FLAG_RX_IN_PROGRESS;
 8000782:	4b5d      	ldr	r3, [pc, #372]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000784:	2201      	movs	r2, #1
 8000786:	711a      	strb	r2, [r3, #4]

     switch (Serial.RxState)
 8000788:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <spv1_uart_rx_event+0x184>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b06      	cmp	r3, #6
 8000790:	d900      	bls.n	8000794 <spv1_uart_rx_event+0x20>
 8000792:	e0a5      	b.n	80008e0 <spv1_uart_rx_event+0x16c>
 8000794:	009a      	lsls	r2, r3, #2
 8000796:	4b59      	ldr	r3, [pc, #356]	; (80008fc <spv1_uart_rx_event+0x188>)
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	469f      	mov	pc, r3
     {
           case RXSTATE_SOF:
           {
               if(rx_data == SERIAL_HEADER_BYTE)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2bff      	cmp	r3, #255	; 0xff
 80007a2:	d000      	beq.n	80007a6 <spv1_uart_rx_event+0x32>
 80007a4:	e0a0      	b.n	80008e8 <spv1_uart_rx_event+0x174>
               {
                    RxFrame.HeaderByte = rx_data;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b55      	ldr	r3, [pc, #340]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007ac:	701a      	strb	r2, [r3, #0]
                    RxFrame.Checksum = 0;
 80007ae:	4b54      	ldr	r3, [pc, #336]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	711a      	strb	r2, [r3, #4]
                    Serial.ReceivedDataCount = 0;
 80007b4:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	805a      	strh	r2, [r3, #2]
                    Serial.RxState = RXSTATE_ADDRESS;
 80007ba:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
               }
            break;
 80007c0:	e092      	b.n	80008e8 <spv1_uart_rx_event+0x174>
           }

           case RXSTATE_ADDRESS:
           {
                if((rx_data == 0) || (rx_data == RxFrame.NodeAddress))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d006      	beq.n	80007d6 <spv1_uart_rx_event+0x62>
 80007c8:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007ca:	789b      	ldrb	r3, [r3, #2]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	001a      	movs	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d10b      	bne.n	80007ee <spv1_uart_rx_event+0x7a>
                {
                	 RxFrame.NodeAddress = rx_data;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b49      	ldr	r3, [pc, #292]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007dc:	709a      	strb	r2, [r3, #2]
                	 RxFrame.Checksum = rx_data;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b47      	ldr	r3, [pc, #284]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007e4:	711a      	strb	r2, [r3, #4]
                     Serial.RxState = RXSTATE_DATACOUNT_LSB;
 80007e6:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80007e8:	2203      	movs	r2, #3
 80007ea:	701a      	strb	r2, [r3, #0]
                else
                {
                   Serial.RxState = RXSTATE_SOF;
                }

            break;
 80007ec:	e07f      	b.n	80008ee <spv1_uart_rx_event+0x17a>
                   Serial.RxState = RXSTATE_SOF;
 80007ee:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
            break;
 80007f4:	e07b      	b.n	80008ee <spv1_uart_rx_event+0x17a>
           }
           case RXSTATE_DATACOUNT_LSB:
           {
        	   RxFrame.DataLength = rx_data;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b41      	ldr	r3, [pc, #260]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007fc:	705a      	strb	r2, [r3, #1]
               if((RxFrame.DataLength > MAX_DATA_COUNT + 1) ||(RxFrame.DataLength == 0))
 80007fe:	4b40      	ldr	r3, [pc, #256]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d103      	bne.n	8000814 <spv1_uart_rx_event+0xa0>
               {
                 Serial.RxState = RXSTATE_SOF;
 800080c:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <spv1_uart_rx_event+0x184>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
               else
               {
            	 RxFrame.Checksum += rx_data;
                 Serial.RxState = RXSTATE_COMMAND;
               }
             break;
 8000812:	e06c      	b.n	80008ee <spv1_uart_rx_event+0x17a>
            	 RxFrame.Checksum += rx_data;
 8000814:	4b3a      	ldr	r3, [pc, #232]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000816:	791b      	ldrb	r3, [r3, #4]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	001a      	movs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	189b      	adds	r3, r3, r2
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b37      	ldr	r3, [pc, #220]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000824:	711a      	strb	r2, [r3, #4]
                 Serial.RxState = RXSTATE_COMMAND;
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000828:	2204      	movs	r2, #4
 800082a:	701a      	strb	r2, [r3, #0]
             break;
 800082c:	e05f      	b.n	80008ee <spv1_uart_rx_event+0x17a>
            }
           case RXSTATE_COMMAND:
           {

        	   RxFrame.CommandByte = rx_data;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b33      	ldr	r3, [pc, #204]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000834:	70da      	strb	r2, [r3, #3]
               Serial.ReceivedDataCount =0;
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000838:	2200      	movs	r2, #0
 800083a:	805a      	strh	r2, [r3, #2]
               RxFrame.Checksum += rx_data;
 800083c:	4b30      	ldr	r3, [pc, #192]	; (8000900 <spv1_uart_rx_event+0x18c>)
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	001a      	movs	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	189b      	adds	r3, r3, r2
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <spv1_uart_rx_event+0x18c>)
 800084c:	711a      	strb	r2, [r3, #4]

               if (RxFrame.DataLength == 1)
 800084e:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000850:	785b      	ldrb	r3, [r3, #1]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b01      	cmp	r3, #1
 8000856:	d103      	bne.n	8000860 <spv1_uart_rx_event+0xec>
               {
                 Serial.RxState = RXSTATE_CHECKSUM;
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <spv1_uart_rx_event+0x184>)
 800085a:	2206      	movs	r2, #6
 800085c:	701a      	strb	r2, [r3, #0]
               }
               else
               {
                  Serial.RxState = RXSTATE_DATA;
               }
             break ;
 800085e:	e046      	b.n	80008ee <spv1_uart_rx_event+0x17a>
                  Serial.RxState = RXSTATE_DATA;
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000862:	2205      	movs	r2, #5
 8000864:	701a      	strb	r2, [r3, #0]
             break ;
 8000866:	e042      	b.n	80008ee <spv1_uart_rx_event+0x17a>
            }
            case RXSTATE_DATA:
            {
            	RxFrame.RxDataBuffer[Serial.ReceivedDataCount ++]= rx_data;
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <spv1_uart_rx_event+0x184>)
 800086c:	885b      	ldrh	r3, [r3, #2]
 800086e:	b29b      	uxth	r3, r3
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	b291      	uxth	r1, r2
 8000874:	4a20      	ldr	r2, [pc, #128]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000876:	8051      	strh	r1, [r2, #2]
 8000878:	0019      	movs	r1, r3
 800087a:	b2c2      	uxtb	r2, r0
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <spv1_uart_rx_event+0x18c>)
 800087e:	185b      	adds	r3, r3, r1
 8000880:	715a      	strb	r2, [r3, #5]
            	RxFrame.Checksum += rx_data;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	001a      	movs	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	189b      	adds	r3, r3, r2
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000892:	711a      	strb	r2, [r3, #4]

               if(Serial.ReceivedDataCount == RxFrame.DataLength-1)
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000896:	885b      	ldrh	r3, [r3, #2]
 8000898:	b29b      	uxth	r3, r3
 800089a:	001a      	movs	r2, r3
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <spv1_uart_rx_event+0x18c>)
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	3b01      	subs	r3, #1
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d121      	bne.n	80008ec <spv1_uart_rx_event+0x178>
               {

                 Serial.RxState = RXSTATE_CHECKSUM;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80008aa:	2206      	movs	r2, #6
 80008ac:	701a      	strb	r2, [r3, #0]
               }

             break;
 80008ae:	e01d      	b.n	80008ec <spv1_uart_rx_event+0x178>
            }
            case RXSTATE_CHECKSUM:
            {
                 if (RxFrame.Checksum == rx_data)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	001a      	movs	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d10c      	bne.n	80008d8 <spv1_uart_rx_event+0x164>
                 {
                   Serial.RxState = RXSTATE_SOF;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
                   Serial.rxFlag = SERIAL_FLAG_COMMAND_READY;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	711a      	strb	r2, [r3, #4]
                   uart_command_parser(RxFrame.CommandByte);
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80008cc:	78db      	ldrb	r3, [r3, #3]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 f8b7 	bl	8001a44 <uart_command_parser>
                 else
                 {
                   Serial.RxState = RXSTATE_SOF;
                 }

             break;
 80008d6:	e00a      	b.n	80008ee <spv1_uart_rx_event+0x17a>
                   Serial.RxState = RXSTATE_SOF;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
             break;
 80008de:	e006      	b.n	80008ee <spv1_uart_rx_event+0x17a>
            }

            default:
            {
               Serial.RxState = RXSTATE_SOF;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]

             break ;
 80008e6:	e002      	b.n	80008ee <spv1_uart_rx_event+0x17a>
            break;
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	e000      	b.n	80008ee <spv1_uart_rx_event+0x17a>
             break;
 80008ec:	46c0      	nop			; (mov r8, r8)
            }
       }
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	200000b0 	.word	0x200000b0
 80008fc:	08005638 	.word	0x08005638
 8000900:	200000bc 	.word	0x200000bc

08000904 <Tx_Frame>:


void Tx_Frame (uint8_t SerialCommand)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b0bb      	sub	sp, #236	; 0xec
 8000908:	af00      	add	r7, sp, #0
 800090a:	0002      	movs	r2, r0
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	701a      	strb	r2, [r3, #0]
	switch(SerialCommand)
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	3b82      	subs	r3, #130	; 0x82
 8000916:	2b11      	cmp	r3, #17
 8000918:	d900      	bls.n	800091c <Tx_Frame+0x18>
 800091a:	e38e      	b.n	800103a <Tx_Frame+0x736>
 800091c:	009a      	lsls	r2, r3, #2
 800091e:	4bde      	ldr	r3, [pc, #888]	; (8000c98 <Tx_Frame+0x394>)
 8000920:	18d3      	adds	r3, r2, r3
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	469f      	mov	pc, r3
	{
	  case CMD_ACTIVATE_ALL:
	  {
		//Cmd Activate All
		uint8_t Buf_Activate_All[5];
		uint8_t activate_all_checksum = 0;
 8000926:	23e7      	movs	r3, #231	; 0xe7
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]

	    Buf_Activate_All[0] = 0xFF;
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	187b      	adds	r3, r7, r1
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	701a      	strb	r2, [r3, #0]
	    Buf_Activate_All[1] = 0x00;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	705a      	strb	r2, [r3, #1]
	    Buf_Activate_All[2] = 0x01;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2201      	movs	r2, #1
 8000940:	709a      	strb	r2, [r3, #2]
	    Buf_Activate_All[3]	= CMD_ACTIVATE_ALL;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2283      	movs	r2, #131	; 0x83
 8000946:	70da      	strb	r2, [r3, #3]

	    for(int i = 1 ; i < sizeof(Buf_Activate_All) - 1 ; i++)
 8000948:	2301      	movs	r3, #1
 800094a:	22e0      	movs	r2, #224	; 0xe0
 800094c:	18ba      	adds	r2, r7, r2
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	e011      	b.n	8000976 <Tx_Frame+0x72>
	  	{
	    	activate_all_checksum = Buf_Activate_All[i] + activate_all_checksum;
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	18fa      	adds	r2, r7, r3
 8000956:	20e0      	movs	r0, #224	; 0xe0
 8000958:	183b      	adds	r3, r7, r0
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	18d3      	adds	r3, r2, r3
 800095e:	7819      	ldrb	r1, [r3, #0]
 8000960:	22e7      	movs	r2, #231	; 0xe7
 8000962:	18bb      	adds	r3, r7, r2
 8000964:	18ba      	adds	r2, r7, r2
 8000966:	7812      	ldrb	r2, [r2, #0]
 8000968:	188a      	adds	r2, r1, r2
 800096a:	701a      	strb	r2, [r3, #0]
	    for(int i = 1 ; i < sizeof(Buf_Activate_All) - 1 ; i++)
 800096c:	183b      	adds	r3, r7, r0
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	183a      	adds	r2, r7, r0
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	23e0      	movs	r3, #224	; 0xe0
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b03      	cmp	r3, #3
 800097e:	d9e8      	bls.n	8000952 <Tx_Frame+0x4e>
	  	}
	    Buf_Activate_All[4] = activate_all_checksum;
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	187b      	adds	r3, r7, r1
 8000984:	24e7      	movs	r4, #231	; 0xe7
 8000986:	193a      	adds	r2, r7, r4
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	711a      	strb	r2, [r3, #4]

        UART_driver_send_data(Buf_Activate_All, sizeof(Buf_Activate_All));
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2105      	movs	r1, #5
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fb83 	bl	800209c <UART_driver_send_data>
		activate_all_checksum = 0;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]

	    break;
 800099c:	e34d      	b.n	800103a <Tx_Frame+0x736>

      case CMD_SEEK_FOR_TAG:
	  {
		  //Cmd Seek For Tag
		  uint8_t Buf_Seek_For_Tag[5];
		  uint8_t seek_for_tag_checksum = 0;
 800099e:	23df      	movs	r3, #223	; 0xdf
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]

		  Buf_Seek_For_Tag[0] = 0xFF;
 80009a6:	2178      	movs	r1, #120	; 0x78
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	701a      	strb	r2, [r3, #0]
		  Buf_Seek_For_Tag[1] = 0x00;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	705a      	strb	r2, [r3, #1]
		  Buf_Seek_For_Tag[2] = 0x01;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2201      	movs	r2, #1
 80009b8:	709a      	strb	r2, [r3, #2]
		  Buf_Seek_For_Tag[3] = CMD_SEEK_FOR_TAG;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2282      	movs	r2, #130	; 0x82
 80009be:	70da      	strb	r2, [r3, #3]

		  for(int i = 1 ; i < sizeof(Buf_Seek_For_Tag) - 1 ; i++)
 80009c0:	2301      	movs	r3, #1
 80009c2:	22d8      	movs	r2, #216	; 0xd8
 80009c4:	18ba      	adds	r2, r7, r2
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	e011      	b.n	80009ee <Tx_Frame+0xea>
		  {
			  seek_for_tag_checksum = Buf_Seek_For_Tag[i] + seek_for_tag_checksum;
 80009ca:	2378      	movs	r3, #120	; 0x78
 80009cc:	18fa      	adds	r2, r7, r3
 80009ce:	20d8      	movs	r0, #216	; 0xd8
 80009d0:	183b      	adds	r3, r7, r0
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	7819      	ldrb	r1, [r3, #0]
 80009d8:	22df      	movs	r2, #223	; 0xdf
 80009da:	18bb      	adds	r3, r7, r2
 80009dc:	18ba      	adds	r2, r7, r2
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	188a      	adds	r2, r1, r2
 80009e2:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Seek_For_Tag) - 1 ; i++)
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	183a      	adds	r2, r7, r0
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	23d8      	movs	r3, #216	; 0xd8
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	d9e8      	bls.n	80009ca <Tx_Frame+0xc6>
		  }

		  Buf_Seek_For_Tag[4] = seek_for_tag_checksum;
 80009f8:	2178      	movs	r1, #120	; 0x78
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	24df      	movs	r4, #223	; 0xdf
 80009fe:	193a      	adds	r2, r7, r4
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	711a      	strb	r2, [r3, #4]
		  UART_driver_send_data(Buf_Seek_For_Tag, sizeof(Buf_Seek_For_Tag));
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2105      	movs	r1, #5
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 fb47 	bl	800209c <UART_driver_send_data>
		  seek_for_tag_checksum = 0 ;
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]

		 break;
 8000a14:	e311      	b.n	800103a <Tx_Frame+0x736>

	  case CMD_ACTIVATE_IDLE:
	  {
		  //Cmd Activate Idle
		  uint8_t Buf_Activate_Idle[5];
		  uint8_t activate_idle_checksum = 0;
 8000a16:	23d7      	movs	r3, #215	; 0xd7
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]

		  Buf_Activate_Idle[0] = 0xFF;
 8000a1e:	2170      	movs	r1, #112	; 0x70
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	701a      	strb	r2, [r3, #0]
		  Buf_Activate_Idle[1] = 0x00;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	705a      	strb	r2, [r3, #1]
		  Buf_Activate_Idle[2] = 0x01;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	709a      	strb	r2, [r3, #2]
		  Buf_Activate_Idle[3] = CMD_ACTIVATE_IDLE;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2284      	movs	r2, #132	; 0x84
 8000a36:	70da      	strb	r2, [r3, #3]

		  for(int i = 1 ; i < sizeof(Buf_Activate_Idle)- 1 ; i++)
 8000a38:	2301      	movs	r3, #1
 8000a3a:	22d0      	movs	r2, #208	; 0xd0
 8000a3c:	18ba      	adds	r2, r7, r2
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e011      	b.n	8000a66 <Tx_Frame+0x162>
		  {
		     activate_idle_checksum = Buf_Activate_Idle[i] + activate_idle_checksum ;
 8000a42:	2370      	movs	r3, #112	; 0x70
 8000a44:	18fa      	adds	r2, r7, r3
 8000a46:	20d0      	movs	r0, #208	; 0xd0
 8000a48:	183b      	adds	r3, r7, r0
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	18d3      	adds	r3, r2, r3
 8000a4e:	7819      	ldrb	r1, [r3, #0]
 8000a50:	22d7      	movs	r2, #215	; 0xd7
 8000a52:	18bb      	adds	r3, r7, r2
 8000a54:	18ba      	adds	r2, r7, r2
 8000a56:	7812      	ldrb	r2, [r2, #0]
 8000a58:	188a      	adds	r2, r1, r2
 8000a5a:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Activate_Idle)- 1 ; i++)
 8000a5c:	183b      	adds	r3, r7, r0
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	183a      	adds	r2, r7, r0
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	23d0      	movs	r3, #208	; 0xd0
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	d9e8      	bls.n	8000a42 <Tx_Frame+0x13e>
		  }

		  Buf_Activate_Idle[4] = activate_idle_checksum;
 8000a70:	2170      	movs	r1, #112	; 0x70
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	24d7      	movs	r4, #215	; 0xd7
 8000a76:	193a      	adds	r2, r7, r4
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	711a      	strb	r2, [r3, #4]
		  UART_driver_send_data(Buf_Activate_Idle, sizeof(Buf_Activate_Idle));
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2105      	movs	r1, #5
 8000a80:	0018      	movs	r0, r3
 8000a82:	f001 fb0b 	bl	800209c <UART_driver_send_data>
		  activate_idle_checksum = 0 ;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]

		break;
 8000a8c:	e2d5      	b.n	800103a <Tx_Frame+0x736>
	  }
	  case CMD_HALT:
	  {
		  //Cmd Halt Command
		  uint8_t Buf_Halt[5];
		  uint8_t halt_checksum = 0;
 8000a8e:	23cf      	movs	r3, #207	; 0xcf
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]

		  Buf_Halt[0] = 0xFF;
 8000a96:	2168      	movs	r1, #104	; 0x68
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	701a      	strb	r2, [r3, #0]
		  Buf_Halt[1] = 0x00;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	705a      	strb	r2, [r3, #1]
		  Buf_Halt[2] = 0x01;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	709a      	strb	r2, [r3, #2]
		  Buf_Halt[3] = CMD_HALT;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2293      	movs	r2, #147	; 0x93
 8000aae:	70da      	strb	r2, [r3, #3]

		  for(int i = 1 ; i < sizeof(Buf_Halt) - 1 ; i++)
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	22c8      	movs	r2, #200	; 0xc8
 8000ab4:	18ba      	adds	r2, r7, r2
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	e011      	b.n	8000ade <Tx_Frame+0x1da>
		  {
		  	  halt_checksum = Buf_Halt[i] + halt_checksum;
 8000aba:	2368      	movs	r3, #104	; 0x68
 8000abc:	18fa      	adds	r2, r7, r3
 8000abe:	20c8      	movs	r0, #200	; 0xc8
 8000ac0:	183b      	adds	r3, r7, r0
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	18d3      	adds	r3, r2, r3
 8000ac6:	7819      	ldrb	r1, [r3, #0]
 8000ac8:	22cf      	movs	r2, #207	; 0xcf
 8000aca:	18bb      	adds	r3, r7, r2
 8000acc:	18ba      	adds	r2, r7, r2
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	188a      	adds	r2, r1, r2
 8000ad2:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Halt) - 1 ; i++)
 8000ad4:	183b      	adds	r3, r7, r0
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	183a      	adds	r2, r7, r0
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	23c8      	movs	r3, #200	; 0xc8
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d9e8      	bls.n	8000aba <Tx_Frame+0x1b6>
		  }

          Buf_Halt[4] = halt_checksum;
 8000ae8:	2168      	movs	r1, #104	; 0x68
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	24cf      	movs	r4, #207	; 0xcf
 8000aee:	193a      	adds	r2, r7, r4
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	711a      	strb	r2, [r3, #4]
		  UART_driver_send_data(Buf_Halt, sizeof(Buf_Halt));
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2105      	movs	r1, #5
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 facf 	bl	800209c <UART_driver_send_data>
		  halt_checksum = 0 ;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]

		break;
 8000b04:	e299      	b.n	800103a <Tx_Frame+0x736>
	  }
	  case CMD_AUTHENTICATE:
	  {
		  //Cmd Authenticate
		  uint8_t Buf_Authenticate[7];
		  uint8_t authenticate_checksum = 0;
 8000b06:	23c7      	movs	r3, #199	; 0xc7
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]

		  Serial.txFlag = 0;
 8000b0e:	4b63      	ldr	r3, [pc, #396]	; (8000c9c <Tx_Frame+0x398>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	721a      	strb	r2, [r3, #8]
		  Tx_Frame(CMD_ACTIVATE_ALL);
 8000b14:	2083      	movs	r0, #131	; 0x83
 8000b16:	f7ff fef5 	bl	8000904 <Tx_Frame>

		  while(!Serial.txFlag)
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <Tx_Frame+0x398>)
 8000b1e:	7a1b      	ldrb	r3, [r3, #8]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0fa      	beq.n	8000b1c <Tx_Frame+0x218>
		  {
		  }
		  //AUTHENTICATE for Block4,5,6,7
		  Buf_Authenticate[0] = 0xFF;
 8000b26:	2160      	movs	r1, #96	; 0x60
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	22ff      	movs	r2, #255	; 0xff
 8000b2c:	701a      	strb	r2, [r3, #0]
		  Buf_Authenticate[1] = 0x00;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	705a      	strb	r2, [r3, #1]
		  Buf_Authenticate[2] = 0x03;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2203      	movs	r2, #3
 8000b38:	709a      	strb	r2, [r3, #2]
		  Buf_Authenticate[3] = CMD_AUTHENTICATE;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2285      	movs	r2, #133	; 0x85
 8000b3e:	70da      	strb	r2, [r3, #3]
		  Buf_Authenticate[4] = authenticate_block_no;
 8000b40:	4b57      	ldr	r3, [pc, #348]	; (8000ca0 <Tx_Frame+0x39c>)
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	711a      	strb	r2, [r3, #4]
		  Buf_Authenticate[5] = 0xFF;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	22ff      	movs	r2, #255	; 0xff
 8000b4c:	715a      	strb	r2, [r3, #5]

		  for(int i = 1 ; i < sizeof(Buf_Authenticate) - 1 ; i++)
 8000b4e:	2301      	movs	r3, #1
 8000b50:	22c0      	movs	r2, #192	; 0xc0
 8000b52:	18ba      	adds	r2, r7, r2
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e011      	b.n	8000b7c <Tx_Frame+0x278>
		  {
			  authenticate_checksum = Buf_Authenticate[i] + authenticate_checksum;
 8000b58:	2360      	movs	r3, #96	; 0x60
 8000b5a:	18fa      	adds	r2, r7, r3
 8000b5c:	20c0      	movs	r0, #192	; 0xc0
 8000b5e:	183b      	adds	r3, r7, r0
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	18d3      	adds	r3, r2, r3
 8000b64:	7819      	ldrb	r1, [r3, #0]
 8000b66:	22c7      	movs	r2, #199	; 0xc7
 8000b68:	18bb      	adds	r3, r7, r2
 8000b6a:	18ba      	adds	r2, r7, r2
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	188a      	adds	r2, r1, r2
 8000b70:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Authenticate) - 1 ; i++)
 8000b72:	183b      	adds	r3, r7, r0
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	183a      	adds	r2, r7, r0
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	23c0      	movs	r3, #192	; 0xc0
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d9e8      	bls.n	8000b58 <Tx_Frame+0x254>
		  }

		  Buf_Authenticate[6] = authenticate_checksum;
 8000b86:	2160      	movs	r1, #96	; 0x60
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	24c7      	movs	r4, #199	; 0xc7
 8000b8c:	193a      	adds	r2, r7, r4
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	719a      	strb	r2, [r3, #6]
		  UART_driver_send_data(Buf_Authenticate, sizeof(Buf_Authenticate));
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2107      	movs	r1, #7
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 fa80 	bl	800209c <UART_driver_send_data>

		  Serial.txFlag = 0;
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <Tx_Frame+0x398>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	721a      	strb	r2, [r3, #8]
		  authenticate_checksum = 0;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
       break;
 8000ba8:	e247      	b.n	800103a <Tx_Frame+0x736>

	  case CMD_READ_BLOCK:
	  {
		  //Cmd Read Block Command
		  uint8_t Buf_Read_Block[6];
		  uint8_t read_block_checksum = 0;
 8000baa:	23bf      	movs	r3, #191	; 0xbf
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]

		  Tx_Frame(CMD_AUTHENTICATE);
 8000bb2:	2085      	movs	r0, #133	; 0x85
 8000bb4:	f7ff fea6 	bl	8000904 <Tx_Frame>

		  while (!Serial.txFlag)
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <Tx_Frame+0x398>)
 8000bbc:	7a1b      	ldrb	r3, [r3, #8]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0fa      	beq.n	8000bba <Tx_Frame+0x2b6>
		  {
		  }

		  Buf_Read_Block[0] = 0xFF;
 8000bc4:	2158      	movs	r1, #88	; 0x58
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	22ff      	movs	r2, #255	; 0xff
 8000bca:	701a      	strb	r2, [r3, #0]
		  Buf_Read_Block[1] = 0x00;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	705a      	strb	r2, [r3, #1]
		  Buf_Read_Block[2] = 0x02;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	709a      	strb	r2, [r3, #2]
		  Buf_Read_Block[3] = CMD_READ_BLOCK;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2286      	movs	r2, #134	; 0x86
 8000bdc:	70da      	strb	r2, [r3, #3]
		  Buf_Read_Block[4] = read_block_no;
 8000bde:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <Tx_Frame+0x3a0>)
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	711a      	strb	r2, [r3, #4]

		  for(int i = 1 ; i < sizeof(Buf_Read_Block) - 1 ; i++)
 8000be6:	2301      	movs	r3, #1
 8000be8:	22b8      	movs	r2, #184	; 0xb8
 8000bea:	18ba      	adds	r2, r7, r2
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e011      	b.n	8000c14 <Tx_Frame+0x310>
		  {
			read_block_checksum = Buf_Read_Block[i] + read_block_checksum;
 8000bf0:	2358      	movs	r3, #88	; 0x58
 8000bf2:	18fa      	adds	r2, r7, r3
 8000bf4:	20b8      	movs	r0, #184	; 0xb8
 8000bf6:	183b      	adds	r3, r7, r0
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	18d3      	adds	r3, r2, r3
 8000bfc:	7819      	ldrb	r1, [r3, #0]
 8000bfe:	22bf      	movs	r2, #191	; 0xbf
 8000c00:	18bb      	adds	r3, r7, r2
 8000c02:	18ba      	adds	r2, r7, r2
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	188a      	adds	r2, r1, r2
 8000c08:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Read_Block) - 1 ; i++)
 8000c0a:	183b      	adds	r3, r7, r0
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	183a      	adds	r2, r7, r0
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	23b8      	movs	r3, #184	; 0xb8
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d9e8      	bls.n	8000bf0 <Tx_Frame+0x2ec>
		  }

		  Buf_Read_Block[5] = read_block_checksum;
 8000c1e:	2158      	movs	r1, #88	; 0x58
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	24bf      	movs	r4, #191	; 0xbf
 8000c24:	193a      	adds	r2, r7, r4
 8000c26:	7812      	ldrb	r2, [r2, #0]
 8000c28:	715a      	strb	r2, [r3, #5]
          UART_driver_send_data(Buf_Read_Block, sizeof(Buf_Read_Block));
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2106      	movs	r1, #6
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f001 fa34 	bl	800209c <UART_driver_send_data>
          Serial.txFlag = 0;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <Tx_Frame+0x398>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	721a      	strb	r2, [r3, #8]
          read_block_checksum = 0;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]

		 break;
 8000c40:	e1fb      	b.n	800103a <Tx_Frame+0x736>

	  case CMD_WRITE_BLOCK:
	  {
		  //Cmd Write Block Command
		  uint8_t Buf_Write_Block[22];
		  uint8_t write_block_checksum = 0;
 8000c42:	23b7      	movs	r3, #183	; 0xb7
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]

		  Tx_Frame(CMD_AUTHENTICATE);
 8000c4a:	2085      	movs	r0, #133	; 0x85
 8000c4c:	f7ff fe5a 	bl	8000904 <Tx_Frame>

		  while(!Serial.txFlag)
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <Tx_Frame+0x398>)
 8000c54:	7a1b      	ldrb	r3, [r3, #8]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0fa      	beq.n	8000c52 <Tx_Frame+0x34e>
		  {
		  }

		  Buf_Write_Block[0] = 0xFF;
 8000c5c:	2140      	movs	r1, #64	; 0x40
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	701a      	strb	r2, [r3, #0]
	      Buf_Write_Block[1] = 0x00;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2200      	movs	r2, #0
 8000c68:	705a      	strb	r2, [r3, #1]
	      Buf_Write_Block[2] = 0x12;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2212      	movs	r2, #18
 8000c6e:	709a      	strb	r2, [r3, #2]
	      Buf_Write_Block[3] = CMD_WRITE_BLOCK;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2289      	movs	r2, #137	; 0x89
 8000c74:	70da      	strb	r2, [r3, #3]
	      Buf_Write_Block[4] = write_block_no;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <Tx_Frame+0x3a4>)
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	711a      	strb	r2, [r3, #4]

	      memcpy(&Buf_Write_Block[5], &Write_Block ,sizeof(Write_Block));
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2205      	movs	r2, #5
 8000c82:	490a      	ldr	r1, [pc, #40]	; (8000cac <Tx_Frame+0x3a8>)
 8000c84:	189b      	adds	r3, r3, r2
 8000c86:	2210      	movs	r2, #16
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f003 f9cd 	bl	8004028 <memcpy>

	      for(int i = 1 ; i < sizeof(Buf_Write_Block) - 1 ; i++)
 8000c8e:	2301      	movs	r3, #1
 8000c90:	22b0      	movs	r2, #176	; 0xb0
 8000c92:	18ba      	adds	r2, r7, r2
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e01d      	b.n	8000cd4 <Tx_Frame+0x3d0>
 8000c98:	08005654 	.word	0x08005654
 8000c9c:	200000b0 	.word	0x200000b0
 8000ca0:	20000001 	.word	0x20000001
 8000ca4:	20000002 	.word	0x20000002
 8000ca8:	20000003 	.word	0x20000003
 8000cac:	200002d4 	.word	0x200002d4
	      {
	        write_block_checksum = Buf_Write_Block[i] + write_block_checksum;
 8000cb0:	2340      	movs	r3, #64	; 0x40
 8000cb2:	18fa      	adds	r2, r7, r3
 8000cb4:	20b0      	movs	r0, #176	; 0xb0
 8000cb6:	183b      	adds	r3, r7, r0
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	18d3      	adds	r3, r2, r3
 8000cbc:	7819      	ldrb	r1, [r3, #0]
 8000cbe:	22b7      	movs	r2, #183	; 0xb7
 8000cc0:	18bb      	adds	r3, r7, r2
 8000cc2:	18ba      	adds	r2, r7, r2
 8000cc4:	7812      	ldrb	r2, [r2, #0]
 8000cc6:	188a      	adds	r2, r1, r2
 8000cc8:	701a      	strb	r2, [r3, #0]
	      for(int i = 1 ; i < sizeof(Buf_Write_Block) - 1 ; i++)
 8000cca:	183b      	adds	r3, r7, r0
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	183a      	adds	r2, r7, r0
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	23b0      	movs	r3, #176	; 0xb0
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b14      	cmp	r3, #20
 8000cdc:	d9e8      	bls.n	8000cb0 <Tx_Frame+0x3ac>
	      }

	      Buf_Write_Block[21] = write_block_checksum;
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	24b7      	movs	r4, #183	; 0xb7
 8000ce4:	193a      	adds	r2, r7, r4
 8000ce6:	7812      	ldrb	r2, [r2, #0]
 8000ce8:	755a      	strb	r2, [r3, #21]
	      UART_driver_send_data(Buf_Write_Block, sizeof(Buf_Write_Block));
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2116      	movs	r1, #22
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 f9d4 	bl	800209c <UART_driver_send_data>
	      Serial.txFlag = 0;
 8000cf4:	4bd3      	ldr	r3, [pc, #844]	; (8001044 <Tx_Frame+0x740>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	721a      	strb	r2, [r3, #8]
	      write_block_checksum = 0;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]

	    break;
 8000d00:	e19b      	b.n	800103a <Tx_Frame+0x736>

	  case CMD_WRITE_BLOCK_4_BYTE:
	  {
		 //Cmd Write Block 4 Byte
		 uint8_t Buf_Write_Block_4_Byte[10];
		 uint8_t write_block_4_byte_checksum = 0;
 8000d02:	23af      	movs	r3, #175	; 0xaf
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]

		 Tx_Frame(CMD_AUTHENTICATE);
 8000d0a:	2085      	movs	r0, #133	; 0x85
 8000d0c:	f7ff fdfa 	bl	8000904 <Tx_Frame>

		 while(!Serial.txFlag)
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	4bcc      	ldr	r3, [pc, #816]	; (8001044 <Tx_Frame+0x740>)
 8000d14:	7a1b      	ldrb	r3, [r3, #8]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0fa      	beq.n	8000d12 <Tx_Frame+0x40e>
		 {
		 }
		 Buf_Write_Block_4_Byte[0] = 0xFF;
 8000d1c:	2134      	movs	r1, #52	; 0x34
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	22ff      	movs	r2, #255	; 0xff
 8000d22:	701a      	strb	r2, [r3, #0]
		 Buf_Write_Block_4_Byte[1] = 0x00;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	705a      	strb	r2, [r3, #1]
		 Buf_Write_Block_4_Byte[2] = 0x06;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2206      	movs	r2, #6
 8000d2e:	709a      	strb	r2, [r3, #2]
		 Buf_Write_Block_4_Byte[3] = CMD_WRITE_BLOCK_4_BYTE;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	228b      	movs	r2, #139	; 0x8b
 8000d34:	70da      	strb	r2, [r3, #3]
		 Buf_Write_Block_4_Byte[4] = write_block_4_byte_no;
 8000d36:	4bc4      	ldr	r3, [pc, #784]	; (8001048 <Tx_Frame+0x744>)
 8000d38:	781a      	ldrb	r2, [r3, #0]
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	711a      	strb	r2, [r3, #4]

		 memcpy(&Buf_Write_Block_4_Byte[5], &Write_Block_4_Byte ,sizeof(Write_Block_4_Byte));
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2205      	movs	r2, #5
 8000d42:	49c2      	ldr	r1, [pc, #776]	; (800104c <Tx_Frame+0x748>)
 8000d44:	189b      	adds	r3, r3, r2
 8000d46:	2204      	movs	r2, #4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f003 f96d 	bl	8004028 <memcpy>

		 for(int i = 1; i < sizeof(Buf_Write_Block_4_Byte) - 1; i++ )
 8000d4e:	2301      	movs	r3, #1
 8000d50:	22a8      	movs	r2, #168	; 0xa8
 8000d52:	18ba      	adds	r2, r7, r2
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e011      	b.n	8000d7c <Tx_Frame+0x478>
		 {
			write_block_4_byte_checksum = Buf_Write_Block_4_Byte[i] + write_block_4_byte_checksum;
 8000d58:	2334      	movs	r3, #52	; 0x34
 8000d5a:	18fa      	adds	r2, r7, r3
 8000d5c:	20a8      	movs	r0, #168	; 0xa8
 8000d5e:	183b      	adds	r3, r7, r0
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	18d3      	adds	r3, r2, r3
 8000d64:	7819      	ldrb	r1, [r3, #0]
 8000d66:	22af      	movs	r2, #175	; 0xaf
 8000d68:	18bb      	adds	r3, r7, r2
 8000d6a:	18ba      	adds	r2, r7, r2
 8000d6c:	7812      	ldrb	r2, [r2, #0]
 8000d6e:	188a      	adds	r2, r1, r2
 8000d70:	701a      	strb	r2, [r3, #0]
		 for(int i = 1; i < sizeof(Buf_Write_Block_4_Byte) - 1; i++ )
 8000d72:	183b      	adds	r3, r7, r0
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	183a      	adds	r2, r7, r0
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	23a8      	movs	r3, #168	; 0xa8
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d9e8      	bls.n	8000d58 <Tx_Frame+0x454>
		 }
		 Buf_Write_Block_4_Byte[9] = write_block_4_byte_checksum;
 8000d86:	2134      	movs	r1, #52	; 0x34
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	24af      	movs	r4, #175	; 0xaf
 8000d8c:	193a      	adds	r2, r7, r4
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	725a      	strb	r2, [r3, #9]
		 UART_driver_send_data(Buf_Write_Block_4_Byte, sizeof(Buf_Write_Block_4_Byte));
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	210a      	movs	r1, #10
 8000d96:	0018      	movs	r0, r3
 8000d98:	f001 f980 	bl	800209c <UART_driver_send_data>

		 Serial.txFlag = 0;
 8000d9c:	4ba9      	ldr	r3, [pc, #676]	; (8001044 <Tx_Frame+0x740>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	721a      	strb	r2, [r3, #8]
		 write_block_4_byte_checksum = 0 ;
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]

		break;
 8000da8:	e147      	b.n	800103a <Tx_Frame+0x736>

	  case CMD_WRITE_VALUE_BLOCK:
	  {
		  //Cmd Write Value Block Command
		  uint8_t Buf_Write_Value_Block[10];
		  uint8_t write_value_block_checksum = 0;
 8000daa:	23a7      	movs	r3, #167	; 0xa7
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]

		  Tx_Frame(CMD_AUTHENTICATE);
 8000db2:	2085      	movs	r0, #133	; 0x85
 8000db4:	f7ff fda6 	bl	8000904 <Tx_Frame>

		  while(!Serial.txFlag)
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	4ba2      	ldr	r3, [pc, #648]	; (8001044 <Tx_Frame+0x740>)
 8000dbc:	7a1b      	ldrb	r3, [r3, #8]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0fa      	beq.n	8000dba <Tx_Frame+0x4b6>
		  {
		  }

		  Buf_Write_Value_Block[0] = 0xFF;
 8000dc4:	2128      	movs	r1, #40	; 0x28
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	22ff      	movs	r2, #255	; 0xff
 8000dca:	701a      	strb	r2, [r3, #0]
		  Buf_Write_Value_Block[1] = 0x00;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	705a      	strb	r2, [r3, #1]
		  Buf_Write_Value_Block[2] = 0x06;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2206      	movs	r2, #6
 8000dd6:	709a      	strb	r2, [r3, #2]
		  Buf_Write_Value_Block[3] = CMD_WRITE_VALUE_BLOCK;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	228a      	movs	r2, #138	; 0x8a
 8000ddc:	70da      	strb	r2, [r3, #3]
		  Buf_Write_Value_Block[4] = write_value_block_no;
 8000dde:	4b9c      	ldr	r3, [pc, #624]	; (8001050 <Tx_Frame+0x74c>)
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	711a      	strb	r2, [r3, #4]

		  memcpy(&Buf_Write_Value_Block[5], &Write_Value_Block ,sizeof(Write_Value_Block));
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2205      	movs	r2, #5
 8000dea:	499a      	ldr	r1, [pc, #616]	; (8001054 <Tx_Frame+0x750>)
 8000dec:	189b      	adds	r3, r3, r2
 8000dee:	2204      	movs	r2, #4
 8000df0:	0018      	movs	r0, r3
 8000df2:	f003 f919 	bl	8004028 <memcpy>

		  for(int i = 1 ; i < sizeof(Buf_Write_Value_Block) - 1 ; i++)
 8000df6:	2301      	movs	r3, #1
 8000df8:	22a0      	movs	r2, #160	; 0xa0
 8000dfa:	18ba      	adds	r2, r7, r2
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e011      	b.n	8000e24 <Tx_Frame+0x520>
		  {
			write_value_block_checksum = Buf_Write_Value_Block[i] + write_value_block_checksum;
 8000e00:	2328      	movs	r3, #40	; 0x28
 8000e02:	18fa      	adds	r2, r7, r3
 8000e04:	20a0      	movs	r0, #160	; 0xa0
 8000e06:	183b      	adds	r3, r7, r0
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	18d3      	adds	r3, r2, r3
 8000e0c:	7819      	ldrb	r1, [r3, #0]
 8000e0e:	22a7      	movs	r2, #167	; 0xa7
 8000e10:	18bb      	adds	r3, r7, r2
 8000e12:	18ba      	adds	r2, r7, r2
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	188a      	adds	r2, r1, r2
 8000e18:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Write_Value_Block) - 1 ; i++)
 8000e1a:	183b      	adds	r3, r7, r0
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	183a      	adds	r2, r7, r0
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	23a0      	movs	r3, #160	; 0xa0
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d9e8      	bls.n	8000e00 <Tx_Frame+0x4fc>
		  }

		  Buf_Write_Value_Block[9] = write_value_block_checksum;
 8000e2e:	2128      	movs	r1, #40	; 0x28
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	24a7      	movs	r4, #167	; 0xa7
 8000e34:	193a      	adds	r2, r7, r4
 8000e36:	7812      	ldrb	r2, [r2, #0]
 8000e38:	725a      	strb	r2, [r3, #9]
		  UART_driver_send_data(Buf_Write_Value_Block, sizeof(Buf_Write_Value_Block));
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	210a      	movs	r1, #10
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f001 f92c 	bl	800209c <UART_driver_send_data>

		  Serial.txFlag = 0;
 8000e44:	4b7f      	ldr	r3, [pc, #508]	; (8001044 <Tx_Frame+0x740>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	721a      	strb	r2, [r3, #8]
		  write_value_block_checksum = 0;
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]

		break;
 8000e50:	e0f3      	b.n	800103a <Tx_Frame+0x736>

	  case CMD_READ_VALUE_BLOCK:
	  {
		  //Cmd Read Value Block Command
		  uint8_t Buf_Read_Value_Block[6];
		  uint8_t read_value_block_checksum = 0;
 8000e52:	239f      	movs	r3, #159	; 0x9f
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]

		  Tx_Frame(CMD_WRITE_VALUE_BLOCK);
 8000e5a:	208a      	movs	r0, #138	; 0x8a
 8000e5c:	f7ff fd52 	bl	8000904 <Tx_Frame>

          while(!Serial.txFlag)
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	4b78      	ldr	r3, [pc, #480]	; (8001044 <Tx_Frame+0x740>)
 8000e64:	7a1b      	ldrb	r3, [r3, #8]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0fa      	beq.n	8000e62 <Tx_Frame+0x55e>
          {
          }
		  Buf_Read_Value_Block[0] = 0xFF;
 8000e6c:	2120      	movs	r1, #32
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	22ff      	movs	r2, #255	; 0xff
 8000e72:	701a      	strb	r2, [r3, #0]
		  Buf_Read_Value_Block[1] = 0x00;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	705a      	strb	r2, [r3, #1]
		  Buf_Read_Value_Block[2] = 0x02;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	709a      	strb	r2, [r3, #2]
		  Buf_Read_Value_Block[3] = CMD_READ_VALUE_BLOCK;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2287      	movs	r2, #135	; 0x87
 8000e84:	70da      	strb	r2, [r3, #3]
		  Buf_Read_Value_Block[4] = read_value_block_no;
 8000e86:	4b74      	ldr	r3, [pc, #464]	; (8001058 <Tx_Frame+0x754>)
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	711a      	strb	r2, [r3, #4]

		  for(int i = 1 ; i < sizeof(Buf_Read_Value_Block) - 1 ; i++)
 8000e8e:	2301      	movs	r3, #1
 8000e90:	2298      	movs	r2, #152	; 0x98
 8000e92:	18ba      	adds	r2, r7, r2
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e011      	b.n	8000ebc <Tx_Frame+0x5b8>
		  {
		    read_value_block_checksum = Buf_Read_Value_Block[i] + read_value_block_checksum;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	18fa      	adds	r2, r7, r3
 8000e9c:	2098      	movs	r0, #152	; 0x98
 8000e9e:	183b      	adds	r3, r7, r0
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	18d3      	adds	r3, r2, r3
 8000ea4:	7819      	ldrb	r1, [r3, #0]
 8000ea6:	229f      	movs	r2, #159	; 0x9f
 8000ea8:	18bb      	adds	r3, r7, r2
 8000eaa:	18ba      	adds	r2, r7, r2
 8000eac:	7812      	ldrb	r2, [r2, #0]
 8000eae:	188a      	adds	r2, r1, r2
 8000eb0:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Read_Value_Block) - 1 ; i++)
 8000eb2:	183b      	adds	r3, r7, r0
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	183a      	adds	r2, r7, r0
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	2398      	movs	r3, #152	; 0x98
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	d9e8      	bls.n	8000e98 <Tx_Frame+0x594>
		  }

		  Buf_Read_Value_Block[5] = read_value_block_checksum;
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	249f      	movs	r4, #159	; 0x9f
 8000ecc:	193a      	adds	r2, r7, r4
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	715a      	strb	r2, [r3, #5]
		  UART_driver_send_data(Buf_Read_Value_Block, sizeof(Buf_Read_Value_Block));
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2106      	movs	r1, #6
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f001 f8e0 	bl	800209c <UART_driver_send_data>

		  Serial.txFlag = 0;
 8000edc:	4b59      	ldr	r3, [pc, #356]	; (8001044 <Tx_Frame+0x740>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	721a      	strb	r2, [r3, #8]
		  read_value_block_checksum = 0;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]

	   break;
 8000ee8:	e0a7      	b.n	800103a <Tx_Frame+0x736>

	 case CMD_INCREMENT_VALUE_BLOCK:
	 {
		 //Cmd Increment Value Block Command
		 uint8_t Buf_Increment_Value_Block [10];
		 uint8_t increment_value_block_checksum = 0;
 8000eea:	2397      	movs	r3, #151	; 0x97
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]

		 Tx_Frame(CMD_AUTHENTICATE);
 8000ef2:	2085      	movs	r0, #133	; 0x85
 8000ef4:	f7ff fd06 	bl	8000904 <Tx_Frame>

		 while(!Serial.txFlag)
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	4b52      	ldr	r3, [pc, #328]	; (8001044 <Tx_Frame+0x740>)
 8000efc:	7a1b      	ldrb	r3, [r3, #8]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0fa      	beq.n	8000efa <Tx_Frame+0x5f6>
		 {
		 }

		 Buf_Increment_Value_Block[0] = 0xFF;
 8000f04:	2114      	movs	r1, #20
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	22ff      	movs	r2, #255	; 0xff
 8000f0a:	701a      	strb	r2, [r3, #0]
		 Buf_Increment_Value_Block[1] = 0x00;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	705a      	strb	r2, [r3, #1]
		 Buf_Increment_Value_Block[2] = 0x06;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2206      	movs	r2, #6
 8000f16:	709a      	strb	r2, [r3, #2]
		 Buf_Increment_Value_Block[3] = CMD_INCREMENT_VALUE_BLOCK;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	228d      	movs	r2, #141	; 0x8d
 8000f1c:	70da      	strb	r2, [r3, #3]
		 Buf_Increment_Value_Block[4] = increment_value_block_no;
 8000f1e:	4b4f      	ldr	r3, [pc, #316]	; (800105c <Tx_Frame+0x758>)
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	711a      	strb	r2, [r3, #4]

		 memcpy(&Buf_Increment_Value_Block[5], &Increment_Value_Block ,sizeof(Increment_Value_Block));
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2205      	movs	r2, #5
 8000f2a:	494d      	ldr	r1, [pc, #308]	; (8001060 <Tx_Frame+0x75c>)
 8000f2c:	189b      	adds	r3, r3, r2
 8000f2e:	2204      	movs	r2, #4
 8000f30:	0018      	movs	r0, r3
 8000f32:	f003 f879 	bl	8004028 <memcpy>

		 for(int i = 1 ; i < sizeof(Buf_Increment_Value_Block) - 1 ; i++)
 8000f36:	2301      	movs	r3, #1
 8000f38:	2290      	movs	r2, #144	; 0x90
 8000f3a:	18ba      	adds	r2, r7, r2
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e011      	b.n	8000f64 <Tx_Frame+0x660>
		 {
			 increment_value_block_checksum = Buf_Increment_Value_Block[i] + increment_value_block_checksum;
 8000f40:	2314      	movs	r3, #20
 8000f42:	18fa      	adds	r2, r7, r3
 8000f44:	2090      	movs	r0, #144	; 0x90
 8000f46:	183b      	adds	r3, r7, r0
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	18d3      	adds	r3, r2, r3
 8000f4c:	7819      	ldrb	r1, [r3, #0]
 8000f4e:	2297      	movs	r2, #151	; 0x97
 8000f50:	18bb      	adds	r3, r7, r2
 8000f52:	18ba      	adds	r2, r7, r2
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	188a      	adds	r2, r1, r2
 8000f58:	701a      	strb	r2, [r3, #0]
		 for(int i = 1 ; i < sizeof(Buf_Increment_Value_Block) - 1 ; i++)
 8000f5a:	183b      	adds	r3, r7, r0
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	183a      	adds	r2, r7, r0
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	2390      	movs	r3, #144	; 0x90
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d9e8      	bls.n	8000f40 <Tx_Frame+0x63c>
		 }

		 Buf_Increment_Value_Block[9] = increment_value_block_checksum;
 8000f6e:	2114      	movs	r1, #20
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2497      	movs	r4, #151	; 0x97
 8000f74:	193a      	adds	r2, r7, r4
 8000f76:	7812      	ldrb	r2, [r2, #0]
 8000f78:	725a      	strb	r2, [r3, #9]

		 UART_driver_send_data(Buf_Increment_Value_Block, sizeof(Buf_Increment_Value_Block));
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	210a      	movs	r1, #10
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f001 f88c 	bl	800209c <UART_driver_send_data>
		 Serial.txFlag = 0;
 8000f84:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <Tx_Frame+0x740>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	721a      	strb	r2, [r3, #8]
		 increment_value_block_checksum = 0;
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]

		break;
 8000f90:	e053      	b.n	800103a <Tx_Frame+0x736>

	 case CMD_DECREMENT_VALUE_BLOCK:
	 {
		 //Cmd Decrement Value Block Command
		 uint8_t  Buf_Decrement_Value_Block[10];
		 uint8_t  decrement_value_block_checksum = 0;
 8000f92:	238f      	movs	r3, #143	; 0x8f
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]

		 Tx_Frame(CMD_AUTHENTICATE);
 8000f9a:	2085      	movs	r0, #133	; 0x85
 8000f9c:	f7ff fcb2 	bl	8000904 <Tx_Frame>

	     while(!Serial.txFlag)
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <Tx_Frame+0x740>)
 8000fa4:	7a1b      	ldrb	r3, [r3, #8]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0fa      	beq.n	8000fa2 <Tx_Frame+0x69e>
	     {
	     }

	     Buf_Decrement_Value_Block[0] = 0xFF;
 8000fac:	2108      	movs	r1, #8
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	22ff      	movs	r2, #255	; 0xff
 8000fb2:	701a      	strb	r2, [r3, #0]
	     Buf_Decrement_Value_Block[1] = 0x00;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	705a      	strb	r2, [r3, #1]
	     Buf_Decrement_Value_Block[2] = 0x06;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2206      	movs	r2, #6
 8000fbe:	709a      	strb	r2, [r3, #2]
	     Buf_Decrement_Value_Block[3] = CMD_DECREMENT_VALUE_BLOCK;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	228e      	movs	r2, #142	; 0x8e
 8000fc4:	70da      	strb	r2, [r3, #3]
	     Buf_Decrement_Value_Block[4] = decrement_value_block_no;
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <Tx_Frame+0x760>)
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	711a      	strb	r2, [r3, #4]

	     memcpy(&Buf_Decrement_Value_Block[5], &Decrement_Value_Block ,sizeof(Decrement_Value_Block));
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	4925      	ldr	r1, [pc, #148]	; (8001068 <Tx_Frame+0x764>)
 8000fd4:	189b      	adds	r3, r3, r2
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f003 f825 	bl	8004028 <memcpy>

	     for(int i = 1 ; i < sizeof(Buf_Decrement_Value_Block) - 1 ; i++)
 8000fde:	2301      	movs	r3, #1
 8000fe0:	2288      	movs	r2, #136	; 0x88
 8000fe2:	18ba      	adds	r2, r7, r2
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e011      	b.n	800100c <Tx_Frame+0x708>
	     {
	    	decrement_value_block_checksum = Buf_Decrement_Value_Block[i] + decrement_value_block_checksum;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	18fa      	adds	r2, r7, r3
 8000fec:	2088      	movs	r0, #136	; 0x88
 8000fee:	183b      	adds	r3, r7, r0
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	18d3      	adds	r3, r2, r3
 8000ff4:	7819      	ldrb	r1, [r3, #0]
 8000ff6:	228f      	movs	r2, #143	; 0x8f
 8000ff8:	18bb      	adds	r3, r7, r2
 8000ffa:	18ba      	adds	r2, r7, r2
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	188a      	adds	r2, r1, r2
 8001000:	701a      	strb	r2, [r3, #0]
	     for(int i = 1 ; i < sizeof(Buf_Decrement_Value_Block) - 1 ; i++)
 8001002:	183b      	adds	r3, r7, r0
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	183a      	adds	r2, r7, r0
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	2388      	movs	r3, #136	; 0x88
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b08      	cmp	r3, #8
 8001014:	d9e8      	bls.n	8000fe8 <Tx_Frame+0x6e4>
	     }

	     Buf_Decrement_Value_Block[9] = decrement_value_block_checksum;
 8001016:	2108      	movs	r1, #8
 8001018:	187b      	adds	r3, r7, r1
 800101a:	248f      	movs	r4, #143	; 0x8f
 800101c:	193a      	adds	r2, r7, r4
 800101e:	7812      	ldrb	r2, [r2, #0]
 8001020:	725a      	strb	r2, [r3, #9]
	     UART_driver_send_data(Buf_Decrement_Value_Block, sizeof(Buf_Decrement_Value_Block));
 8001022:	187b      	adds	r3, r7, r1
 8001024:	210a      	movs	r1, #10
 8001026:	0018      	movs	r0, r3
 8001028:	f001 f838 	bl	800209c <UART_driver_send_data>

	     Serial.txFlag = 0;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <Tx_Frame+0x740>)
 800102e:	2200      	movs	r2, #0
 8001030:	721a      	strb	r2, [r3, #8]
	     decrement_value_block_checksum = 0;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]

	    break;
 8001038:	46c0      	nop			; (mov r8, r8)

	 }
  }
}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b03b      	add	sp, #236	; 0xec
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	200000b0 	.word	0x200000b0
 8001048:	20000004 	.word	0x20000004
 800104c:	20000008 	.word	0x20000008
 8001050:	2000000d 	.word	0x2000000d
 8001054:	20000010 	.word	0x20000010
 8001058:	2000000c 	.word	0x2000000c
 800105c:	20000018 	.word	0x20000018
 8001060:	20000014 	.word	0x20000014
 8001064:	20000020 	.word	0x20000020
 8001068:	2000001c 	.word	0x2000001c

0800106c <func_activate_all>:




void func_activate_all()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

	  if (RxFrame.RxDataBuffer[0] == 0x4E)
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <func_activate_all+0xa0>)
 8001074:	795b      	ldrb	r3, [r3, #5]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b4e      	cmp	r3, #78	; 0x4e
 800107a:	d107      	bne.n	800108c <func_activate_all+0x20>
	  {
		 printf("%s\n","No Tag");
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <func_activate_all+0xa4>)
 800107e:	0018      	movs	r0, r3
 8001080:	f003 f870 	bl	8004164 <puts>
		 //return 0;
		 Serial.txFlag = 1 ;
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <func_activate_all+0xa8>)
 8001086:	2201      	movs	r2, #1
 8001088:	721a      	strb	r2, [r3, #8]

		//return 1;
		Serial.txFlag = 1 ;
	  }

}
 800108a:	e03b      	b.n	8001104 <func_activate_all+0x98>
	  else if ((RxFrame.DataLength == 6) ||(RxFrame.DataLength ==9))
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <func_activate_all+0xa0>)
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b06      	cmp	r3, #6
 8001094:	d004      	beq.n	80010a0 <func_activate_all+0x34>
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <func_activate_all+0xa0>)
 8001098:	785b      	ldrb	r3, [r3, #1]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b09      	cmp	r3, #9
 800109e:	d131      	bne.n	8001104 <func_activate_all+0x98>
		printf(" %s %x\n", "Tag_Type: " ,RxFrame.RxDataBuffer[0]);
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <func_activate_all+0xa0>)
 80010a2:	795b      	ldrb	r3, [r3, #5]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	001a      	movs	r2, r3
 80010a8:	491b      	ldr	r1, [pc, #108]	; (8001118 <func_activate_all+0xac>)
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <func_activate_all+0xb0>)
 80010ac:	0018      	movs	r0, r3
 80010ae:	f002 ffcd 	bl	800404c <iprintf>
	    int uidlength = RxFrame.DataLength - 2;
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <func_activate_all+0xa0>)
 80010b4:	785b      	ldrb	r3, [r3, #1]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	3b02      	subs	r3, #2
 80010ba:	603b      	str	r3, [r7, #0]
		printf("%s %x\n", "UID Length:", uidlength);
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	4918      	ldr	r1, [pc, #96]	; (8001120 <func_activate_all+0xb4>)
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <func_activate_all+0xb8>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f002 ffc2 	bl	800404c <iprintf>
		printf("%s\n","UID: ");
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <func_activate_all+0xbc>)
 80010ca:	0018      	movs	r0, r3
 80010cc:	f003 f84a 	bl	8004164 <puts>
		for (int i = 0; i< uidlength; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	e00f      	b.n	80010f6 <func_activate_all+0x8a>
	       printf("%x\n", RxFrame.RxDataBuffer[uidlength-i]);
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <func_activate_all+0xa0>)
 80010de:	18d3      	adds	r3, r2, r3
 80010e0:	795b      	ldrb	r3, [r3, #5]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	001a      	movs	r2, r3
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <func_activate_all+0xc0>)
 80010e8:	0011      	movs	r1, r2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f002 ffae 	bl	800404c <iprintf>
		for (int i = 0; i< uidlength; i++)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dbeb      	blt.n	80010d6 <func_activate_all+0x6a>
		Serial.txFlag = 1 ;
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <func_activate_all+0xa8>)
 8001100:	2201      	movs	r2, #1
 8001102:	721a      	strb	r2, [r3, #8]
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000bc 	.word	0x200000bc
 8001110:	0800510c 	.word	0x0800510c
 8001114:	200000b0 	.word	0x200000b0
 8001118:	08005114 	.word	0x08005114
 800111c:	08005120 	.word	0x08005120
 8001120:	08005128 	.word	0x08005128
 8001124:	08005134 	.word	0x08005134
 8001128:	0800513c 	.word	0x0800513c
 800112c:	08005144 	.word	0x08005144

08001130 <func_seek_for_tag>:


void func_seek_for_tag ()
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

	if(RxFrame.RxDataBuffer[0] == 0x4C)
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <func_seek_for_tag+0xb8>)
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b4c      	cmp	r3, #76	; 0x4c
 800113e:	d103      	bne.n	8001148 <func_seek_for_tag+0x18>
	{
	   printf("%s\n", "0x4C (‘L’) : Operation is successful. Card UID will be reported as soon as detected.");
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <func_seek_for_tag+0xbc>)
 8001142:	0018      	movs	r0, r3
 8001144:	f003 f80e 	bl	8004164 <puts>
	}

	if(RxFrame.RxDataBuffer[0] == 0x46)
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <func_seek_for_tag+0xb8>)
 800114a:	795b      	ldrb	r3, [r3, #5]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b46      	cmp	r3, #70	; 0x46
 8001150:	d103      	bne.n	800115a <func_seek_for_tag+0x2a>
	{
	   printf("%s\n", "0x46 (‘F’) : Operation failed. CmdSeekForTag cannot be used if Auto Mode is enabled");
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <func_seek_for_tag+0xc0>)
 8001154:	0018      	movs	r0, r3
 8001156:	f003 f805 	bl	8004164 <puts>
	}

	if(RxFrame.RxDataBuffer[0] == 0x55)
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <func_seek_for_tag+0xb8>)
 800115c:	795b      	ldrb	r3, [r3, #5]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b55      	cmp	r3, #85	; 0x55
 8001162:	d104      	bne.n	800116e <func_seek_for_tag+0x3e>
	{
	   printf("%s\n", "0x55 (‘U’) : Operation failed. The Antenna power was switched off. CmdSeekForTag cannot run.");
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <func_seek_for_tag+0xc4>)
 8001166:	0018      	movs	r0, r3
 8001168:	f002 fffc 	bl	8004164 <puts>
	   {
	     printf("%x\n", RxFrame.RxDataBuffer[uidlength-i]);
	   }
	}

}
 800116c:	e038      	b.n	80011e0 <func_seek_for_tag+0xb0>
	else if ((RxFrame.DataLength == 6) ||(RxFrame.DataLength ==9))
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <func_seek_for_tag+0xb8>)
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b06      	cmp	r3, #6
 8001176:	d004      	beq.n	8001182 <func_seek_for_tag+0x52>
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <func_seek_for_tag+0xb8>)
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b09      	cmp	r3, #9
 8001180:	d12e      	bne.n	80011e0 <func_seek_for_tag+0xb0>
	   printf(" %s %x\n", "Tag_Type: " ,RxFrame.RxDataBuffer[0]);
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <func_seek_for_tag+0xb8>)
 8001184:	795b      	ldrb	r3, [r3, #5]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	001a      	movs	r2, r3
 800118a:	491b      	ldr	r1, [pc, #108]	; (80011f8 <func_seek_for_tag+0xc8>)
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <func_seek_for_tag+0xcc>)
 800118e:	0018      	movs	r0, r3
 8001190:	f002 ff5c 	bl	800404c <iprintf>
	   int uidlength = RxFrame.DataLength - 2;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <func_seek_for_tag+0xb8>)
 8001196:	785b      	ldrb	r3, [r3, #1]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3b02      	subs	r3, #2
 800119c:	603b      	str	r3, [r7, #0]
	   printf("%s %x\n", "UID Length:", uidlength);
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	4917      	ldr	r1, [pc, #92]	; (8001200 <func_seek_for_tag+0xd0>)
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <func_seek_for_tag+0xd4>)
 80011a4:	0018      	movs	r0, r3
 80011a6:	f002 ff51 	bl	800404c <iprintf>
	   printf("%s\n","UID: ");
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <func_seek_for_tag+0xd8>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f002 ffd9 	bl	8004164 <puts>
	   for (int i = 0; i< uidlength; i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	e00f      	b.n	80011d8 <func_seek_for_tag+0xa8>
	     printf("%x\n", RxFrame.RxDataBuffer[uidlength-i]);
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <func_seek_for_tag+0xb8>)
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	795b      	ldrb	r3, [r3, #5]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	001a      	movs	r2, r3
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <func_seek_for_tag+0xdc>)
 80011ca:	0011      	movs	r1, r2
 80011cc:	0018      	movs	r0, r3
 80011ce:	f002 ff3d 	bl	800404c <iprintf>
	   for (int i = 0; i< uidlength; i++)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3301      	adds	r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbeb      	blt.n	80011b8 <func_seek_for_tag+0x88>
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200000bc 	.word	0x200000bc
 80011ec:	08005148 	.word	0x08005148
 80011f0:	080051a4 	.word	0x080051a4
 80011f4:	080051fc 	.word	0x080051fc
 80011f8:	08005114 	.word	0x08005114
 80011fc:	08005120 	.word	0x08005120
 8001200:	08005128 	.word	0x08005128
 8001204:	08005134 	.word	0x08005134
 8001208:	0800513c 	.word	0x0800513c
 800120c:	08005144 	.word	0x08005144

08001210 <func_activate_idle>:


void func_activate_idle()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
   if (RxFrame.RxDataBuffer[0] == 0x4E)
 8001216:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <func_activate_idle+0xa8>)
 8001218:	795b      	ldrb	r3, [r3, #5]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b4e      	cmp	r3, #78	; 0x4e
 800121e:	d103      	bne.n	8001228 <func_activate_idle+0x18>
   {
      printf("%s\n","No Tag");
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <func_activate_idle+0xac>)
 8001222:	0018      	movs	r0, r3
 8001224:	f002 ff9e 	bl	8004164 <puts>
   }

   if (RxFrame.RxDataBuffer[0] == 0x55)
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <func_activate_idle+0xa8>)
 800122a:	795b      	ldrb	r3, [r3, #5]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b55      	cmp	r3, #85	; 0x55
 8001230:	d104      	bne.n	800123c <func_activate_idle+0x2c>
   {
     printf("%s\n","Operation failed. The Antenna power was switched off.");
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <func_activate_idle+0xb0>)
 8001234:	0018      	movs	r0, r3
 8001236:	f002 ff95 	bl	8004164 <puts>
       printf("%x\n", RxFrame.RxDataBuffer[uidlength-i]);
     }

   }

}
 800123a:	e038      	b.n	80012ae <func_activate_idle+0x9e>
   else if ((RxFrame.DataLength == 6) ||(RxFrame.DataLength == 9))
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <func_activate_idle+0xa8>)
 800123e:	785b      	ldrb	r3, [r3, #1]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b06      	cmp	r3, #6
 8001244:	d004      	beq.n	8001250 <func_activate_idle+0x40>
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <func_activate_idle+0xa8>)
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b09      	cmp	r3, #9
 800124e:	d12e      	bne.n	80012ae <func_activate_idle+0x9e>
     printf(" %s %x\n", "Tag_Type: " ,RxFrame.RxDataBuffer[0]);
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <func_activate_idle+0xa8>)
 8001252:	795b      	ldrb	r3, [r3, #5]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	001a      	movs	r2, r3
 8001258:	491a      	ldr	r1, [pc, #104]	; (80012c4 <func_activate_idle+0xb4>)
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <func_activate_idle+0xb8>)
 800125c:	0018      	movs	r0, r3
 800125e:	f002 fef5 	bl	800404c <iprintf>
     int uidlength = RxFrame.DataLength - 2;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <func_activate_idle+0xa8>)
 8001264:	785b      	ldrb	r3, [r3, #1]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	3b02      	subs	r3, #2
 800126a:	603b      	str	r3, [r7, #0]
     printf("%s %x\n", "UID Length:", uidlength);
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4917      	ldr	r1, [pc, #92]	; (80012cc <func_activate_idle+0xbc>)
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <func_activate_idle+0xc0>)
 8001272:	0018      	movs	r0, r3
 8001274:	f002 feea 	bl	800404c <iprintf>
     printf("%s\n","UID: ");
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <func_activate_idle+0xc4>)
 800127a:	0018      	movs	r0, r3
 800127c:	f002 ff72 	bl	8004164 <puts>
     for (int i = 0; i< uidlength; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	e00f      	b.n	80012a6 <func_activate_idle+0x96>
       printf("%x\n", RxFrame.RxDataBuffer[uidlength-i]);
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <func_activate_idle+0xa8>)
 800128e:	18d3      	adds	r3, r2, r3
 8001290:	795b      	ldrb	r3, [r3, #5]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	001a      	movs	r2, r3
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <func_activate_idle+0xc8>)
 8001298:	0011      	movs	r1, r2
 800129a:	0018      	movs	r0, r3
 800129c:	f002 fed6 	bl	800404c <iprintf>
     for (int i = 0; i< uidlength; i++)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbeb      	blt.n	8001286 <func_activate_idle+0x76>
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	200000bc 	.word	0x200000bc
 80012bc:	0800510c 	.word	0x0800510c
 80012c0:	08005260 	.word	0x08005260
 80012c4:	08005114 	.word	0x08005114
 80012c8:	08005120 	.word	0x08005120
 80012cc:	08005128 	.word	0x08005128
 80012d0:	08005134 	.word	0x08005134
 80012d4:	0800513c 	.word	0x0800513c
 80012d8:	08005144 	.word	0x08005144

080012dc <func_halt>:

void func_halt()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
     if(RxFrame.Checksum == 0xE1)
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <func_halt+0x30>)
 80012e2:	791b      	ldrb	r3, [r3, #4]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2be1      	cmp	r3, #225	; 0xe1
 80012e8:	d103      	bne.n	80012f2 <func_halt+0x16>
 	 {
 	 	printf("%s\n","Status Code: 0x4C(‘L’). Halt command is executed successfully.");
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <func_halt+0x34>)
 80012ec:	0018      	movs	r0, r3
 80012ee:	f002 ff39 	bl	8004164 <puts>
 	 }

 	 if(RxFrame.Checksum == 0xEA)
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <func_halt+0x30>)
 80012f4:	791b      	ldrb	r3, [r3, #4]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2bea      	cmp	r3, #234	; 0xea
 80012fa:	d103      	bne.n	8001304 <func_halt+0x28>
 	 {
 	    printf("%s\n","Status Code: 0x55(‘U’). Operation failed. The Antenna power was switched off.");
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <func_halt+0x38>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f002 ff30 	bl	8004164 <puts>
 	 }

}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	200000bc 	.word	0x200000bc
 8001310:	08005298 	.word	0x08005298
 8001314:	080052dc 	.word	0x080052dc

08001318 <func_authenticate>:


void func_authenticate()
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af02      	add	r7, sp, #8

	printf("%x %x %x %x\n",RxFrame.HeaderByte,RxFrame.NodeAddress,RxFrame.DataLength,RxFrame.CommandByte);
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <func_authenticate+0x80>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	0019      	movs	r1, r3
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <func_authenticate+0x80>)
 8001328:	789b      	ldrb	r3, [r3, #2]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	001a      	movs	r2, r3
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <func_authenticate+0x80>)
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	001c      	movs	r4, r3
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <func_authenticate+0x80>)
 8001338:	78db      	ldrb	r3, [r3, #3]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4817      	ldr	r0, [pc, #92]	; (800139c <func_authenticate+0x84>)
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	0023      	movs	r3, r4
 8001342:	f002 fe83 	bl	800404c <iprintf>

    for(int k=0 ; k< RxFrame.DataLength-1; k++)
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	e00e      	b.n	800136a <func_authenticate+0x52>
    {
      printf("%x\n",RxFrame.RxDataBuffer[k] );
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <func_authenticate+0x80>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	3305      	adds	r3, #5
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	001a      	movs	r2, r3
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <func_authenticate+0x88>)
 800135c:	0011      	movs	r1, r2
 800135e:	0018      	movs	r0, r3
 8001360:	f002 fe74 	bl	800404c <iprintf>
    for(int k=0 ; k< RxFrame.DataLength-1; k++)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3301      	adds	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <func_authenticate+0x80>)
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3b01      	subs	r3, #1
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbe9      	blt.n	800134c <func_authenticate+0x34>
    }

    printf("%x\n", RxFrame.Checksum);
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <func_authenticate+0x80>)
 800137a:	791b      	ldrb	r3, [r3, #4]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	001a      	movs	r2, r3
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <func_authenticate+0x88>)
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f002 fe61 	bl	800404c <iprintf>

    Serial.txFlag = 1;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <func_authenticate+0x8c>)
 800138c:	2201      	movs	r2, #1
 800138e:	721a      	strb	r2, [r3, #8]

}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b003      	add	sp, #12
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	200000bc 	.word	0x200000bc
 800139c:	08005330 	.word	0x08005330
 80013a0:	08005144 	.word	0x08005144
 80013a4:	200000b0 	.word	0x200000b0

080013a8 <func_read_block>:


void func_read_block ()
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af02      	add	r7, sp, #8

    printf("%s %x\n", "Mifare Card Block no: " ,RxFrame.RxDataBuffer[0]);
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <func_read_block+0xc4>)
 80013b0:	795b      	ldrb	r3, [r3, #5]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	001a      	movs	r2, r3
 80013b6:	492e      	ldr	r1, [pc, #184]	; (8001470 <func_read_block+0xc8>)
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <func_read_block+0xcc>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f002 fe46 	bl	800404c <iprintf>
    printf("%x %x %x %x\n",RxFrame.HeaderByte,RxFrame.NodeAddress,RxFrame.DataLength, RxFrame.CommandByte);
 80013c0:	4b2a      	ldr	r3, [pc, #168]	; (800146c <func_read_block+0xc4>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	0019      	movs	r1, r3
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <func_read_block+0xc4>)
 80013ca:	789b      	ldrb	r3, [r3, #2]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	001a      	movs	r2, r3
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <func_read_block+0xc4>)
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	001c      	movs	r4, r3
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <func_read_block+0xc4>)
 80013da:	78db      	ldrb	r3, [r3, #3]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4826      	ldr	r0, [pc, #152]	; (8001478 <func_read_block+0xd0>)
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	0023      	movs	r3, r4
 80013e4:	f002 fe32 	bl	800404c <iprintf>

    for(int i = 0; i< RxFrame.DataLength - 1; i++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	e00e      	b.n	800140c <func_read_block+0x64>
 	{
 	   printf("%x\n", RxFrame.RxDataBuffer[i]);
 80013ee:	4a1f      	ldr	r2, [pc, #124]	; (800146c <func_read_block+0xc4>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	18d3      	adds	r3, r2, r3
 80013f4:	3305      	adds	r3, #5
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	001a      	movs	r2, r3
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <func_read_block+0xd4>)
 80013fe:	0011      	movs	r1, r2
 8001400:	0018      	movs	r0, r3
 8001402:	f002 fe23 	bl	800404c <iprintf>
    for(int i = 0; i< RxFrame.DataLength - 1; i++)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3301      	adds	r3, #1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	4b17      	ldr	r3, [pc, #92]	; (800146c <func_read_block+0xc4>)
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3b01      	subs	r3, #1
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbe9      	blt.n	80013ee <func_read_block+0x46>
 	}

    printf("%x\n", RxFrame.Checksum);
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <func_read_block+0xc4>)
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	001a      	movs	r2, r3
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <func_read_block+0xd4>)
 8001424:	0011      	movs	r1, r2
 8001426:	0018      	movs	r0, r3
 8001428:	f002 fe10 	bl	800404c <iprintf>

 	if(RxFrame.RxDataBuffer[0] == 0x4E)
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <func_read_block+0xc4>)
 800142e:	795b      	ldrb	r3, [r3, #5]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b4e      	cmp	r3, #78	; 0x4e
 8001434:	d103      	bne.n	800143e <func_read_block+0x96>
 	{
 	  printf("%s\n", "0x4E ('N'):No Tag or operation failed.");
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <func_read_block+0xd8>)
 8001438:	0018      	movs	r0, r3
 800143a:	f002 fe93 	bl	8004164 <puts>
 	}

 	if(RxFrame.RxDataBuffer[0] == 0x46)
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <func_read_block+0xc4>)
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b46      	cmp	r3, #70	; 0x46
 8001446:	d103      	bne.n	8001450 <func_read_block+0xa8>
 	{
 	  printf("%s\n", "0x46 ('F'): No Tag or operation failed.");
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <func_read_block+0xdc>)
 800144a:	0018      	movs	r0, r3
 800144c:	f002 fe8a 	bl	8004164 <puts>
 	}

 	if(RxFrame.RxDataBuffer[0] == 0x55)
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <func_read_block+0xc4>)
 8001452:	795b      	ldrb	r3, [r3, #5]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b55      	cmp	r3, #85	; 0x55
 8001458:	d103      	bne.n	8001462 <func_read_block+0xba>
 	{
 	  printf("%s\n", "0x55 ('U'): Operation failed. The Antenna power was switched off.");
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <func_read_block+0xe0>)
 800145c:	0018      	movs	r0, r3
 800145e:	f002 fe81 	bl	8004164 <puts>
 	}

}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b003      	add	sp, #12
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	200000bc 	.word	0x200000bc
 8001470:	08005340 	.word	0x08005340
 8001474:	08005134 	.word	0x08005134
 8001478:	08005330 	.word	0x08005330
 800147c:	08005144 	.word	0x08005144
 8001480:	08005358 	.word	0x08005358
 8001484:	08005380 	.word	0x08005380
 8001488:	080053a8 	.word	0x080053a8

0800148c <func_write_block>:

void func_write_block()
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b085      	sub	sp, #20
 8001490:	af02      	add	r7, sp, #8

     printf("%s %x\n", "Mifare Card Block no: ", RxFrame.RxDataBuffer[0]);
 8001492:	4b33      	ldr	r3, [pc, #204]	; (8001560 <func_write_block+0xd4>)
 8001494:	795b      	ldrb	r3, [r3, #5]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	001a      	movs	r2, r3
 800149a:	4932      	ldr	r1, [pc, #200]	; (8001564 <func_write_block+0xd8>)
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <func_write_block+0xdc>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f002 fdd4 	bl	800404c <iprintf>
     printf("%x %x %x %x\n",RxFrame.HeaderByte,RxFrame.NodeAddress,RxFrame.DataLength,RxFrame.CommandByte);
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <func_write_block+0xd4>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	0019      	movs	r1, r3
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <func_write_block+0xd4>)
 80014ae:	789b      	ldrb	r3, [r3, #2]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	001a      	movs	r2, r3
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <func_write_block+0xd4>)
 80014b6:	785b      	ldrb	r3, [r3, #1]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	001c      	movs	r4, r3
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <func_write_block+0xd4>)
 80014be:	78db      	ldrb	r3, [r3, #3]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	482a      	ldr	r0, [pc, #168]	; (800156c <func_write_block+0xe0>)
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	0023      	movs	r3, r4
 80014c8:	f002 fdc0 	bl	800404c <iprintf>

     for(int i=0 ; i < RxFrame.DataLength-1; i++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	e00e      	b.n	80014f0 <func_write_block+0x64>
     {
        printf("%x\n", RxFrame.RxDataBuffer[i]);
 80014d2:	4a23      	ldr	r2, [pc, #140]	; (8001560 <func_write_block+0xd4>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	18d3      	adds	r3, r2, r3
 80014d8:	3305      	adds	r3, #5
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	001a      	movs	r2, r3
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <func_write_block+0xe4>)
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f002 fdb1 	bl	800404c <iprintf>
     for(int i=0 ; i < RxFrame.DataLength-1; i++)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3301      	adds	r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <func_write_block+0xd4>)
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3b01      	subs	r3, #1
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbe9      	blt.n	80014d2 <func_write_block+0x46>
     }

     printf("%x\n", RxFrame.Checksum);
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <func_write_block+0xd4>)
 8001500:	791b      	ldrb	r3, [r3, #4]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	001a      	movs	r2, r3
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <func_write_block+0xe4>)
 8001508:	0011      	movs	r1, r2
 800150a:	0018      	movs	r0, r3
 800150c:	f002 fd9e 	bl	800404c <iprintf>

     if(RxFrame.RxDataBuffer[0] == 0x4E)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <func_write_block+0xd4>)
 8001512:	795b      	ldrb	r3, [r3, #5]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b4e      	cmp	r3, #78	; 0x4e
 8001518:	d103      	bne.n	8001522 <func_write_block+0x96>
     {
        printf("%s\n", "0x4E ('N'):No Tag or operation failed.");
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <func_write_block+0xe8>)
 800151c:	0018      	movs	r0, r3
 800151e:	f002 fe21 	bl	8004164 <puts>
     }

     if(RxFrame.RxDataBuffer[0] == 0x46)
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <func_write_block+0xd4>)
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b46      	cmp	r3, #70	; 0x46
 800152a:	d103      	bne.n	8001534 <func_write_block+0xa8>
     {
        printf("%s\n", "0x46 ('F'): No Tag or operation failed.");
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <func_write_block+0xec>)
 800152e:	0018      	movs	r0, r3
 8001530:	f002 fe18 	bl	8004164 <puts>
     }

     if(RxFrame.RxDataBuffer[0] == 0x55)
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <func_write_block+0xd4>)
 8001536:	795b      	ldrb	r3, [r3, #5]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b55      	cmp	r3, #85	; 0x55
 800153c:	d103      	bne.n	8001546 <func_write_block+0xba>
     {
        printf("%s\n", "0x55 ('U'): Read after write failed.");
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <func_write_block+0xf0>)
 8001540:	0018      	movs	r0, r3
 8001542:	f002 fe0f 	bl	8004164 <puts>
     }

     if(RxFrame.RxDataBuffer[0] == 0x58)
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <func_write_block+0xd4>)
 8001548:	795b      	ldrb	r3, [r3, #5]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b58      	cmp	r3, #88	; 0x58
 800154e:	d103      	bne.n	8001558 <func_write_block+0xcc>
     {
       printf("%s\n", "0x58 ('X'): Unable to read after write.");
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <func_write_block+0xf4>)
 8001552:	0018      	movs	r0, r3
 8001554:	f002 fe06 	bl	8004164 <puts>
     }

}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b003      	add	sp, #12
 800155e:	bd90      	pop	{r4, r7, pc}
 8001560:	200000bc 	.word	0x200000bc
 8001564:	08005340 	.word	0x08005340
 8001568:	08005134 	.word	0x08005134
 800156c:	08005330 	.word	0x08005330
 8001570:	08005144 	.word	0x08005144
 8001574:	08005358 	.word	0x08005358
 8001578:	08005380 	.word	0x08005380
 800157c:	080053ec 	.word	0x080053ec
 8001580:	08005414 	.word	0x08005414

08001584 <func_write_block_4_byte>:

void func_write_block_4_byte()
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b085      	sub	sp, #20
 8001588:	af02      	add	r7, sp, #8

	printf("%s %x\n", "Mifare Ultralight Page No: " , RxFrame.RxDataBuffer[0]);
 800158a:	4b33      	ldr	r3, [pc, #204]	; (8001658 <func_write_block_4_byte+0xd4>)
 800158c:	795b      	ldrb	r3, [r3, #5]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	001a      	movs	r2, r3
 8001592:	4932      	ldr	r1, [pc, #200]	; (800165c <func_write_block_4_byte+0xd8>)
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <func_write_block_4_byte+0xdc>)
 8001596:	0018      	movs	r0, r3
 8001598:	f002 fd58 	bl	800404c <iprintf>
	printf("%x %x %x %x\n",RxFrame.HeaderByte,RxFrame.NodeAddress, RxFrame.DataLength, RxFrame.CommandByte);
 800159c:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <func_write_block_4_byte+0xd4>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	0019      	movs	r1, r3
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <func_write_block_4_byte+0xd4>)
 80015a6:	789b      	ldrb	r3, [r3, #2]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	001a      	movs	r2, r3
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <func_write_block_4_byte+0xd4>)
 80015ae:	785b      	ldrb	r3, [r3, #1]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	001c      	movs	r4, r3
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <func_write_block_4_byte+0xd4>)
 80015b6:	78db      	ldrb	r3, [r3, #3]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	482a      	ldr	r0, [pc, #168]	; (8001664 <func_write_block_4_byte+0xe0>)
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	0023      	movs	r3, r4
 80015c0:	f002 fd44 	bl	800404c <iprintf>

	for(int i = 0 ; i < RxFrame.DataLength - 1 ; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	e00e      	b.n	80015e8 <func_write_block_4_byte+0x64>
	{
	   printf("%x\n", RxFrame.RxDataBuffer[i]);
 80015ca:	4a23      	ldr	r2, [pc, #140]	; (8001658 <func_write_block_4_byte+0xd4>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	18d3      	adds	r3, r2, r3
 80015d0:	3305      	adds	r3, #5
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	001a      	movs	r2, r3
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <func_write_block_4_byte+0xe4>)
 80015da:	0011      	movs	r1, r2
 80015dc:	0018      	movs	r0, r3
 80015de:	f002 fd35 	bl	800404c <iprintf>
	for(int i = 0 ; i < RxFrame.DataLength - 1 ; i++)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3301      	adds	r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <func_write_block_4_byte+0xd4>)
 80015ea:	785b      	ldrb	r3, [r3, #1]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3b01      	subs	r3, #1
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	dbe9      	blt.n	80015ca <func_write_block_4_byte+0x46>
	}

	printf("%x\n", RxFrame.Checksum);
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <func_write_block_4_byte+0xd4>)
 80015f8:	791b      	ldrb	r3, [r3, #4]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	001a      	movs	r2, r3
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <func_write_block_4_byte+0xe4>)
 8001600:	0011      	movs	r1, r2
 8001602:	0018      	movs	r0, r3
 8001604:	f002 fd22 	bl	800404c <iprintf>

	if(RxFrame.RxDataBuffer[0] == 0x4E)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <func_write_block_4_byte+0xd4>)
 800160a:	795b      	ldrb	r3, [r3, #5]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b4e      	cmp	r3, #78	; 0x4e
 8001610:	d103      	bne.n	800161a <func_write_block_4_byte+0x96>
    {
	   printf("%s\n", "0x4E ('N'):No Tag or operation failed.");
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <func_write_block_4_byte+0xe8>)
 8001614:	0018      	movs	r0, r3
 8001616:	f002 fda5 	bl	8004164 <puts>
	}

	if(RxFrame.RxDataBuffer[0] == 0x46)
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <func_write_block_4_byte+0xd4>)
 800161c:	795b      	ldrb	r3, [r3, #5]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b46      	cmp	r3, #70	; 0x46
 8001622:	d103      	bne.n	800162c <func_write_block_4_byte+0xa8>
	{
	   printf("%s\n","0x46 ('F'): No Tag or operation failed.");
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <func_write_block_4_byte+0xec>)
 8001626:	0018      	movs	r0, r3
 8001628:	f002 fd9c 	bl	8004164 <puts>
	}

	if(RxFrame.RxDataBuffer[0] == 0x55)
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <func_write_block_4_byte+0xd4>)
 800162e:	795b      	ldrb	r3, [r3, #5]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b55      	cmp	r3, #85	; 0x55
 8001634:	d103      	bne.n	800163e <func_write_block_4_byte+0xba>
	{
	   printf("%s\n", "0x55 ('U'): Read after write failed ");
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <func_write_block_4_byte+0xf0>)
 8001638:	0018      	movs	r0, r3
 800163a:	f002 fd93 	bl	8004164 <puts>
	}

	if(RxFrame.RxDataBuffer[0] == 0x58)
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <func_write_block_4_byte+0xd4>)
 8001640:	795b      	ldrb	r3, [r3, #5]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b58      	cmp	r3, #88	; 0x58
 8001646:	d103      	bne.n	8001650 <func_write_block_4_byte+0xcc>
	{
	   printf("%s\n", "Unable to read after write");
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <func_write_block_4_byte+0xf4>)
 800164a:	0018      	movs	r0, r3
 800164c:	f002 fd8a 	bl	8004164 <puts>
	}

}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b003      	add	sp, #12
 8001656:	bd90      	pop	{r4, r7, pc}
 8001658:	200000bc 	.word	0x200000bc
 800165c:	0800543c 	.word	0x0800543c
 8001660:	08005134 	.word	0x08005134
 8001664:	08005330 	.word	0x08005330
 8001668:	08005144 	.word	0x08005144
 800166c:	08005358 	.word	0x08005358
 8001670:	08005380 	.word	0x08005380
 8001674:	08005458 	.word	0x08005458
 8001678:	08005480 	.word	0x08005480

0800167c <func_read_value_block>:


void func_read_value_block()
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b085      	sub	sp, #20
 8001680:	af02      	add	r7, sp, #8

	printf("%s %d\n", "The value is ", RxFrame.RxDataBuffer[1]);
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <func_read_value_block+0xd4>)
 8001684:	799b      	ldrb	r3, [r3, #6]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	001a      	movs	r2, r3
 800168a:	4932      	ldr	r1, [pc, #200]	; (8001754 <func_read_value_block+0xd8>)
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <func_read_value_block+0xdc>)
 800168e:	0018      	movs	r0, r3
 8001690:	f002 fcdc 	bl	800404c <iprintf>
    printf("%s %x\n", "Mifare Card Bloc k no = ", RxFrame.RxDataBuffer[0]);
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <func_read_value_block+0xd4>)
 8001696:	795b      	ldrb	r3, [r3, #5]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	001a      	movs	r2, r3
 800169c:	492f      	ldr	r1, [pc, #188]	; (800175c <func_read_value_block+0xe0>)
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <func_read_value_block+0xe4>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f002 fcd3 	bl	800404c <iprintf>

    printf("%x %x %x %x\n",RxFrame.HeaderByte,RxFrame.NodeAddress,RxFrame.DataLength,RxFrame.CommandByte);
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <func_read_value_block+0xd4>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	0019      	movs	r1, r3
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <func_read_value_block+0xd4>)
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	001a      	movs	r2, r3
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <func_read_value_block+0xd4>)
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	001c      	movs	r4, r3
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <func_read_value_block+0xd4>)
 80016c0:	78db      	ldrb	r3, [r3, #3]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4827      	ldr	r0, [pc, #156]	; (8001764 <func_read_value_block+0xe8>)
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	0023      	movs	r3, r4
 80016ca:	f002 fcbf 	bl	800404c <iprintf>

    for(int i = 0; i< RxFrame.DataLength-1 ; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	e00e      	b.n	80016f2 <func_read_value_block+0x76>
	{
	   printf("%x\n", RxFrame.RxDataBuffer[i]);
 80016d4:	4a1e      	ldr	r2, [pc, #120]	; (8001750 <func_read_value_block+0xd4>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	18d3      	adds	r3, r2, r3
 80016da:	3305      	adds	r3, #5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	001a      	movs	r2, r3
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <func_read_value_block+0xec>)
 80016e4:	0011      	movs	r1, r2
 80016e6:	0018      	movs	r0, r3
 80016e8:	f002 fcb0 	bl	800404c <iprintf>
    for(int i = 0; i< RxFrame.DataLength-1 ; i++)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3301      	adds	r3, #1
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <func_read_value_block+0xd4>)
 80016f4:	785b      	ldrb	r3, [r3, #1]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbe9      	blt.n	80016d4 <func_read_value_block+0x58>
	}

	printf("%x\n", RxFrame.Checksum);
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <func_read_value_block+0xd4>)
 8001702:	791b      	ldrb	r3, [r3, #4]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	001a      	movs	r2, r3
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <func_read_value_block+0xec>)
 800170a:	0011      	movs	r1, r2
 800170c:	0018      	movs	r0, r3
 800170e:	f002 fc9d 	bl	800404c <iprintf>

	if(RxFrame.RxDataBuffer[0] == 0x4E)
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <func_read_value_block+0xd4>)
 8001714:	795b      	ldrb	r3, [r3, #5]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b4e      	cmp	r3, #78	; 0x4e
 800171a:	d103      	bne.n	8001724 <func_read_value_block+0xa8>
	{
	   printf("%s\n" ,"0x4E (‘N’): No Tag or operation failed");
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <func_read_value_block+0xf0>)
 800171e:	0018      	movs	r0, r3
 8001720:	f002 fd20 	bl	8004164 <puts>
	}

	if(RxFrame.RxDataBuffer[0] == 0x46)
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <func_read_value_block+0xd4>)
 8001726:	795b      	ldrb	r3, [r3, #5]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b46      	cmp	r3, #70	; 0x46
 800172c:	d103      	bne.n	8001736 <func_read_value_block+0xba>
	{
	   printf("%s\n", "0x46 (‘F’): No Tag or operation failed");
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <func_read_value_block+0xf4>)
 8001730:	0018      	movs	r0, r3
 8001732:	f002 fd17 	bl	8004164 <puts>
	}

    if(RxFrame.RxDataBuffer[0] == 0x49)
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <func_read_value_block+0xd4>)
 8001738:	795b      	ldrb	r3, [r3, #5]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b49      	cmp	r3, #73	; 0x49
 800173e:	d103      	bne.n	8001748 <func_read_value_block+0xcc>
	{
	   printf("%s\n","0x49 (‘I’): Invalid Value Block. The block was not in the proper value format.");
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <func_read_value_block+0xf8>)
 8001742:	0018      	movs	r0, r3
 8001744:	f002 fd0e 	bl	8004164 <puts>
	}

}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	b003      	add	sp, #12
 800174e:	bd90      	pop	{r4, r7, pc}
 8001750:	200000bc 	.word	0x200000bc
 8001754:	0800549c 	.word	0x0800549c
 8001758:	080054ac 	.word	0x080054ac
 800175c:	080054b4 	.word	0x080054b4
 8001760:	08005134 	.word	0x08005134
 8001764:	08005330 	.word	0x08005330
 8001768:	08005144 	.word	0x08005144
 800176c:	080054d0 	.word	0x080054d0
 8001770:	080054fc 	.word	0x080054fc
 8001774:	08005528 	.word	0x08005528

08001778 <func_write_value_block>:

void func_write_value_block ()
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b085      	sub	sp, #20
 800177c:	af02      	add	r7, sp, #8

	printf("%s %x\n", "Mifare Card Block No: " ,RxFrame.RxDataBuffer[0]);
 800177e:	4b35      	ldr	r3, [pc, #212]	; (8001854 <func_write_value_block+0xdc>)
 8001780:	795b      	ldrb	r3, [r3, #5]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	001a      	movs	r2, r3
 8001786:	4934      	ldr	r1, [pc, #208]	; (8001858 <func_write_value_block+0xe0>)
 8001788:	4b34      	ldr	r3, [pc, #208]	; (800185c <func_write_value_block+0xe4>)
 800178a:	0018      	movs	r0, r3
 800178c:	f002 fc5e 	bl	800404c <iprintf>
	printf("%x %x %x %x\n",RxFrame.HeaderByte, RxFrame.NodeAddress, RxFrame.DataLength, RxFrame.CommandByte);
 8001790:	4b30      	ldr	r3, [pc, #192]	; (8001854 <func_write_value_block+0xdc>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	0019      	movs	r1, r3
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <func_write_value_block+0xdc>)
 800179a:	789b      	ldrb	r3, [r3, #2]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	001a      	movs	r2, r3
 80017a0:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <func_write_value_block+0xdc>)
 80017a2:	785b      	ldrb	r3, [r3, #1]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	001c      	movs	r4, r3
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <func_write_value_block+0xdc>)
 80017aa:	78db      	ldrb	r3, [r3, #3]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	482c      	ldr	r0, [pc, #176]	; (8001860 <func_write_value_block+0xe8>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	0023      	movs	r3, r4
 80017b4:	f002 fc4a 	bl	800404c <iprintf>

    for(int i=0; i < RxFrame.DataLength-1 ;i++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	e00e      	b.n	80017dc <func_write_value_block+0x64>
    {
	   printf("%x\n", RxFrame.RxDataBuffer[i]);
 80017be:	4a25      	ldr	r2, [pc, #148]	; (8001854 <func_write_value_block+0xdc>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	18d3      	adds	r3, r2, r3
 80017c4:	3305      	adds	r3, #5
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	001a      	movs	r2, r3
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <func_write_value_block+0xec>)
 80017ce:	0011      	movs	r1, r2
 80017d0:	0018      	movs	r0, r3
 80017d2:	f002 fc3b 	bl	800404c <iprintf>
    for(int i=0; i < RxFrame.DataLength-1 ;i++)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3301      	adds	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <func_write_value_block+0xdc>)
 80017de:	785b      	ldrb	r3, [r3, #1]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	3b01      	subs	r3, #1
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	dbe9      	blt.n	80017be <func_write_value_block+0x46>
    }
	printf("%x\n", RxFrame.Checksum);
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <func_write_value_block+0xdc>)
 80017ec:	791b      	ldrb	r3, [r3, #4]
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	001a      	movs	r2, r3
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <func_write_value_block+0xec>)
 80017f4:	0011      	movs	r1, r2
 80017f6:	0018      	movs	r0, r3
 80017f8:	f002 fc28 	bl	800404c <iprintf>

	if(RxFrame.RxDataBuffer[0] == 0x4E)
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <func_write_value_block+0xdc>)
 80017fe:	795b      	ldrb	r3, [r3, #5]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b4e      	cmp	r3, #78	; 0x4e
 8001804:	d103      	bne.n	800180e <func_write_value_block+0x96>
	{
	   printf("%s\n" ,"0x4E (‘N’): No Tag or operation failed");
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <func_write_value_block+0xf0>)
 8001808:	0018      	movs	r0, r3
 800180a:	f002 fcab 	bl	8004164 <puts>
	}

    if(RxFrame.RxDataBuffer[0] == 0x46)
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <func_write_value_block+0xdc>)
 8001810:	795b      	ldrb	r3, [r3, #5]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b46      	cmp	r3, #70	; 0x46
 8001816:	d103      	bne.n	8001820 <func_write_value_block+0xa8>
	{
	   printf("%s\n", "0x46 (‘F’): No Tag or operation failed");
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <func_write_value_block+0xf4>)
 800181a:	0018      	movs	r0, r3
 800181c:	f002 fca2 	bl	8004164 <puts>
	}

	if(RxFrame.RxDataBuffer[0] == 0x55)
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <func_write_value_block+0xdc>)
 8001822:	795b      	ldrb	r3, [r3, #5]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b55      	cmp	r3, #85	; 0x55
 8001828:	d103      	bne.n	8001832 <func_write_value_block+0xba>
	{
	   printf("%s\n", "0x55 ('U'): Read after write failed ");
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <func_write_value_block+0xf8>)
 800182c:	0018      	movs	r0, r3
 800182e:	f002 fc99 	bl	8004164 <puts>
	}

	if(RxFrame.RxDataBuffer[0] == 0x58)
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <func_write_value_block+0xdc>)
 8001834:	795b      	ldrb	r3, [r3, #5]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b58      	cmp	r3, #88	; 0x58
 800183a:	d103      	bne.n	8001844 <func_write_value_block+0xcc>
	{
	   printf("%s\n", "Unable to read after write ");
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <func_write_value_block+0xfc>)
 800183e:	0018      	movs	r0, r3
 8001840:	f002 fc90 	bl	8004164 <puts>
	}

	Serial.txFlag = 1;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <func_write_value_block+0x100>)
 8001846:	2201      	movs	r2, #1
 8001848:	721a      	strb	r2, [r3, #8]
}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b003      	add	sp, #12
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	200000bc 	.word	0x200000bc
 8001858:	0800557c 	.word	0x0800557c
 800185c:	08005134 	.word	0x08005134
 8001860:	08005330 	.word	0x08005330
 8001864:	08005144 	.word	0x08005144
 8001868:	080054d0 	.word	0x080054d0
 800186c:	080054fc 	.word	0x080054fc
 8001870:	08005458 	.word	0x08005458
 8001874:	08005594 	.word	0x08005594
 8001878:	200000b0 	.word	0x200000b0

0800187c <func_increment_value_block>:


void  func_increment_value_block()
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af02      	add	r7, sp, #8

	printf("%s %x\n", "Mifare Card Block no: " ,RxFrame.RxDataBuffer[0]);
 8001882:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <func_increment_value_block+0xc4>)
 8001884:	795b      	ldrb	r3, [r3, #5]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	001a      	movs	r2, r3
 800188a:	492e      	ldr	r1, [pc, #184]	; (8001944 <func_increment_value_block+0xc8>)
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <func_increment_value_block+0xcc>)
 800188e:	0018      	movs	r0, r3
 8001890:	f002 fbdc 	bl	800404c <iprintf>
    printf("%x %x %x %x\n",RxFrame.HeaderByte, RxFrame.NodeAddress,RxFrame.DataLength, RxFrame.CommandByte);
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <func_increment_value_block+0xc4>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	0019      	movs	r1, r3
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <func_increment_value_block+0xc4>)
 800189e:	789b      	ldrb	r3, [r3, #2]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	001a      	movs	r2, r3
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <func_increment_value_block+0xc4>)
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	001c      	movs	r4, r3
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <func_increment_value_block+0xc4>)
 80018ae:	78db      	ldrb	r3, [r3, #3]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4826      	ldr	r0, [pc, #152]	; (800194c <func_increment_value_block+0xd0>)
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	0023      	movs	r3, r4
 80018b8:	f002 fbc8 	bl	800404c <iprintf>

    for(int i = 0 ; i < RxFrame.DataLength - 1 ; i++)
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	e00e      	b.n	80018e0 <func_increment_value_block+0x64>
    {
       printf("%x\n" , RxFrame.RxDataBuffer[i]);
 80018c2:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <func_increment_value_block+0xc4>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	18d3      	adds	r3, r2, r3
 80018c8:	3305      	adds	r3, #5
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	001a      	movs	r2, r3
 80018d0:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <func_increment_value_block+0xd4>)
 80018d2:	0011      	movs	r1, r2
 80018d4:	0018      	movs	r0, r3
 80018d6:	f002 fbb9 	bl	800404c <iprintf>
    for(int i = 0 ; i < RxFrame.DataLength - 1 ; i++)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3301      	adds	r3, #1
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <func_increment_value_block+0xc4>)
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dbe9      	blt.n	80018c2 <func_increment_value_block+0x46>
    }

    printf("%x\n", RxFrame.Checksum);
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <func_increment_value_block+0xc4>)
 80018f0:	791b      	ldrb	r3, [r3, #4]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	001a      	movs	r2, r3
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <func_increment_value_block+0xd4>)
 80018f8:	0011      	movs	r1, r2
 80018fa:	0018      	movs	r0, r3
 80018fc:	f002 fba6 	bl	800404c <iprintf>

   if(RxFrame.RxDataBuffer[0] == 0x4E)
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <func_increment_value_block+0xc4>)
 8001902:	795b      	ldrb	r3, [r3, #5]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b4e      	cmp	r3, #78	; 0x4e
 8001908:	d103      	bne.n	8001912 <func_increment_value_block+0x96>
   {
      printf("%s\n" ,"0x4E ('N'):No Tag or operation failed.");
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <func_increment_value_block+0xd8>)
 800190c:	0018      	movs	r0, r3
 800190e:	f002 fc29 	bl	8004164 <puts>
   }

   if(RxFrame.RxDataBuffer[0] == 0x46)
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <func_increment_value_block+0xc4>)
 8001914:	795b      	ldrb	r3, [r3, #5]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b46      	cmp	r3, #70	; 0x46
 800191a:	d103      	bne.n	8001924 <func_increment_value_block+0xa8>
   {
      printf("%s\n", "0x46 ('F'): No Tag or operation failed.");
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <func_increment_value_block+0xdc>)
 800191e:	0018      	movs	r0, r3
 8001920:	f002 fc20 	bl	8004164 <puts>
   }

   if(RxFrame.RxDataBuffer[0] == 0x49)
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <func_increment_value_block+0xc4>)
 8001926:	795b      	ldrb	r3, [r3, #5]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b49      	cmp	r3, #73	; 0x49
 800192c:	d103      	bne.n	8001936 <func_increment_value_block+0xba>
   {
     printf("%s\n" ,"0x49 ('I'): Invalid Value Block. The block was not in the proper value format when read back.");
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <func_increment_value_block+0xe0>)
 8001930:	0018      	movs	r0, r3
 8001932:	f002 fc17 	bl	8004164 <puts>
   }

}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b003      	add	sp, #12
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	200000bc 	.word	0x200000bc
 8001944:	08005340 	.word	0x08005340
 8001948:	08005134 	.word	0x08005134
 800194c:	08005330 	.word	0x08005330
 8001950:	08005144 	.word	0x08005144
 8001954:	08005358 	.word	0x08005358
 8001958:	08005380 	.word	0x08005380
 800195c:	080055b0 	.word	0x080055b0

08001960 <func_decrement_value_block>:


void  func_decrement_value_block()
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b085      	sub	sp, #20
 8001964:	af02      	add	r7, sp, #8

	printf("%s %x\n", "Mifare Card Block no: " , RxFrame.RxDataBuffer[0]);
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <func_decrement_value_block+0xc4>)
 8001968:	795b      	ldrb	r3, [r3, #5]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	001a      	movs	r2, r3
 800196e:	492e      	ldr	r1, [pc, #184]	; (8001a28 <func_decrement_value_block+0xc8>)
 8001970:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <func_decrement_value_block+0xcc>)
 8001972:	0018      	movs	r0, r3
 8001974:	f002 fb6a 	bl	800404c <iprintf>
	printf("%x %x %x %x\n", RxFrame.HeaderByte, RxFrame.NodeAddress, RxFrame.DataLength, RxFrame.CommandByte);
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <func_decrement_value_block+0xc4>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	0019      	movs	r1, r3
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <func_decrement_value_block+0xc4>)
 8001982:	789b      	ldrb	r3, [r3, #2]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	001a      	movs	r2, r3
 8001988:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <func_decrement_value_block+0xc4>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	001c      	movs	r4, r3
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <func_decrement_value_block+0xc4>)
 8001992:	78db      	ldrb	r3, [r3, #3]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4826      	ldr	r0, [pc, #152]	; (8001a30 <func_decrement_value_block+0xd0>)
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	0023      	movs	r3, r4
 800199c:	f002 fb56 	bl	800404c <iprintf>

	for(int i = 0 ; i < RxFrame.DataLength -1 ; i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	e00e      	b.n	80019c4 <func_decrement_value_block+0x64>
	{
	   printf("%x\n" , RxFrame.RxDataBuffer[i]);
 80019a6:	4a1f      	ldr	r2, [pc, #124]	; (8001a24 <func_decrement_value_block+0xc4>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	18d3      	adds	r3, r2, r3
 80019ac:	3305      	adds	r3, #5
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	001a      	movs	r2, r3
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <func_decrement_value_block+0xd4>)
 80019b6:	0011      	movs	r1, r2
 80019b8:	0018      	movs	r0, r3
 80019ba:	f002 fb47 	bl	800404c <iprintf>
	for(int i = 0 ; i < RxFrame.DataLength -1 ; i++)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3301      	adds	r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <func_decrement_value_block+0xc4>)
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbe9      	blt.n	80019a6 <func_decrement_value_block+0x46>
	}

	printf("%x\n", RxFrame.Checksum);
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <func_decrement_value_block+0xc4>)
 80019d4:	791b      	ldrb	r3, [r3, #4]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	001a      	movs	r2, r3
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <func_decrement_value_block+0xd4>)
 80019dc:	0011      	movs	r1, r2
 80019de:	0018      	movs	r0, r3
 80019e0:	f002 fb34 	bl	800404c <iprintf>

	if(RxFrame.RxDataBuffer[0] == 0x4E)
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <func_decrement_value_block+0xc4>)
 80019e6:	795b      	ldrb	r3, [r3, #5]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b4e      	cmp	r3, #78	; 0x4e
 80019ec:	d103      	bne.n	80019f6 <func_decrement_value_block+0x96>
	{
	   printf("%s\n", "0x4E ('N'): No Tag or operation failed.");
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <func_decrement_value_block+0xd8>)
 80019f0:	0018      	movs	r0, r3
 80019f2:	f002 fbb7 	bl	8004164 <puts>
	}

	if(RxFrame.RxDataBuffer[0] == 0x46)
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <func_decrement_value_block+0xc4>)
 80019f8:	795b      	ldrb	r3, [r3, #5]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b46      	cmp	r3, #70	; 0x46
 80019fe:	d103      	bne.n	8001a08 <func_decrement_value_block+0xa8>
	{
	   printf("%s\n", "0x46 ('F'): No Tag or operation failed.");
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <func_decrement_value_block+0xdc>)
 8001a02:	0018      	movs	r0, r3
 8001a04:	f002 fbae 	bl	8004164 <puts>
	}

	if(RxFrame.RxDataBuffer[0] == 0x49)
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <func_decrement_value_block+0xc4>)
 8001a0a:	795b      	ldrb	r3, [r3, #5]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b49      	cmp	r3, #73	; 0x49
 8001a10:	d103      	bne.n	8001a1a <func_decrement_value_block+0xba>
	{
	  printf("%s\n", "0x49 ('I'): Invalid Value Block. The block was not in the proper value format when read back.");
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <func_decrement_value_block+0xe0>)
 8001a14:	0018      	movs	r0, r3
 8001a16:	f002 fba5 	bl	8004164 <puts>
	}

}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b003      	add	sp, #12
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	200000bc 	.word	0x200000bc
 8001a28:	08005340 	.word	0x08005340
 8001a2c:	08005134 	.word	0x08005134
 8001a30:	08005330 	.word	0x08005330
 8001a34:	08005144 	.word	0x08005144
 8001a38:	08005610 	.word	0x08005610
 8001a3c:	08005380 	.word	0x08005380
 8001a40:	080055b0 	.word	0x080055b0

08001a44 <uart_command_parser>:


void uart_command_parser(uint8_t Command)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	1dfb      	adds	r3, r7, #7
 8001a4e:	701a      	strb	r2, [r3, #0]
	switch (Command)
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	3b82      	subs	r3, #130	; 0x82
 8001a56:	2b11      	cmp	r3, #17
 8001a58:	d828      	bhi.n	8001aac <uart_command_parser+0x68>
 8001a5a:	009a      	lsls	r2, r3, #2
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <uart_command_parser+0x74>)
 8001a5e:	18d3      	adds	r3, r2, r3
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	469f      	mov	pc, r3
	{
	  case CMD_ACTIVATE_ALL:
	  func_activate_all();
 8001a64:	f7ff fb02 	bl	800106c <func_activate_all>
	  break;
 8001a68:	e021      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_SEEK_FOR_TAG:
	  func_seek_for_tag();
 8001a6a:	f7ff fb61 	bl	8001130 <func_seek_for_tag>
	  break;
 8001a6e:	e01e      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_ACTIVATE_IDLE:
	  func_activate_idle();
 8001a70:	f7ff fbce 	bl	8001210 <func_activate_idle>
	  break;
 8001a74:	e01b      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_HALT:
	  func_halt();
 8001a76:	f7ff fc31 	bl	80012dc <func_halt>
	  break;
 8001a7a:	e018      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_AUTHENTICATE:
	  func_authenticate();
 8001a7c:	f7ff fc4c 	bl	8001318 <func_authenticate>
	  break;
 8001a80:	e015      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_READ_BLOCK:
	  func_read_block();
 8001a82:	f7ff fc91 	bl	80013a8 <func_read_block>
	  break;
 8001a86:	e012      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_WRITE_BLOCK:
	  func_write_block();
 8001a88:	f7ff fd00 	bl	800148c <func_write_block>
	  break;
 8001a8c:	e00f      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_WRITE_BLOCK_4_BYTE:
	  func_write_block_4_byte();
 8001a8e:	f7ff fd79 	bl	8001584 <func_write_block_4_byte>
	  break;
 8001a92:	e00c      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_READ_VALUE_BLOCK:
	  func_read_value_block();
 8001a94:	f7ff fdf2 	bl	800167c <func_read_value_block>
	  break;
 8001a98:	e009      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_WRITE_VALUE_BLOCK:
	  func_write_value_block();
 8001a9a:	f7ff fe6d 	bl	8001778 <func_write_value_block>
	  break;
 8001a9e:	e006      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_INCREMENT_VALUE_BLOCK:
	  func_increment_value_block();
 8001aa0:	f7ff feec 	bl	800187c <func_increment_value_block>
	  break;
 8001aa4:	e003      	b.n	8001aae <uart_command_parser+0x6a>

	  case CMD_DECREMENT_VALUE_BLOCK:
	  func_decrement_value_block();
 8001aa6:	f7ff ff5b 	bl	8001960 <func_decrement_value_block>
	  break;
 8001aaa:	e000      	b.n	8001aae <uart_command_parser+0x6a>


	  default :
	  {
		//UnknownCommand();
		break;
 8001aac:	46c0      	nop			; (mov r8, r8)
	  }
	}
}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	0800569c 	.word	0x0800569c

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_MspInit+0x24>)
 8001ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_MspInit+0x24>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <HAL_MspInit+0x24>)
 8001ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_MspInit+0x24>)
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	0549      	lsls	r1, r1, #21
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b08b      	sub	sp, #44	; 0x2c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	2414      	movs	r4, #20
 8001aee:	193b      	adds	r3, r7, r4
 8001af0:	0018      	movs	r0, r3
 8001af2:	2314      	movs	r3, #20
 8001af4:	001a      	movs	r2, r3
 8001af6:	2100      	movs	r1, #0
 8001af8:	f002 fa9f 	bl	800403a <memset>
  if(huart->Instance==USART1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a34      	ldr	r2, [pc, #208]	; (8001bd4 <HAL_UART_MspInit+0xf0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d133      	bne.n	8001b6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_UART_MspInit+0xf4>)
 8001b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <HAL_UART_MspInit+0xf4>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	01c9      	lsls	r1, r1, #7
 8001b10:	430a      	orrs	r2, r1
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_UART_MspInit+0xf4>)
 8001b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b18:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <HAL_UART_MspInit+0xf4>)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_UART_MspInit+0xf4>)
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b2c:	193b      	adds	r3, r7, r4
 8001b2e:	22c0      	movs	r2, #192	; 0xc0
 8001b30:	00d2      	lsls	r2, r2, #3
 8001b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	0021      	movs	r1, r4
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	2202      	movs	r2, #2
 8001b3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2203      	movs	r2, #3
 8001b46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	187a      	adds	r2, r7, r1
 8001b50:	23a0      	movs	r3, #160	; 0xa0
 8001b52:	05db      	lsls	r3, r3, #23
 8001b54:	0011      	movs	r1, r2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fc1c 	bl	8002394 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	201b      	movs	r0, #27
 8001b62:	f000 fbe5 	bl	8002330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b66:	201b      	movs	r0, #27
 8001b68:	f000 fbf7 	bl	800235a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b6c:	e02e      	b.n	8001bcc <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1a      	ldr	r2, [pc, #104]	; (8001bdc <HAL_UART_MspInit+0xf8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d129      	bne.n	8001bcc <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_UART_MspInit+0xf4>)
 8001b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_UART_MspInit+0xf4>)
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	0289      	lsls	r1, r1, #10
 8001b82:	430a      	orrs	r2, r1
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_UART_MspInit+0xf4>)
 8001b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <HAL_UART_MspInit+0xf4>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_UART_MspInit+0xf4>)
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b9e:	2114      	movs	r1, #20
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2202      	movs	r2, #2
 8001baa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	2204      	movs	r2, #4
 8001bbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	187a      	adds	r2, r7, r1
 8001bc0:	23a0      	movs	r3, #160	; 0xa0
 8001bc2:	05db      	lsls	r3, r3, #23
 8001bc4:	0011      	movs	r1, r2
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 fbe4 	bl	8002394 <HAL_GPIO_Init>
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b00b      	add	sp, #44	; 0x2c
 8001bd2:	bd90      	pop	{r4, r7, pc}
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40004400 	.word	0x40004400

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <NMI_Handler+0x4>

08001be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	uint32_t isrflags = USART1->ISR;
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <USART1_IRQHandler+0x3c>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	60fb      	str	r3, [r7, #12]
	uint32_t control_reg1 = USART1->CR1;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <USART1_IRQHandler+0x3c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60bb      	str	r3, [r7, #8]
	uint8_t rx_data ;
    uint8_t data;
    //uint8_t SerialCommand

	 /*  UART in mode Receiver*/
   if(((isrflags & USART_ISR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) != RESET))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	4013      	ands	r3, r2
 8001c18:	d00c      	beq.n	8001c34 <USART1_IRQHandler+0x34>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d008      	beq.n	8001c34 <USART1_IRQHandler+0x34>
   {
	   rx_data = (uint8_t)USART1->RDR;
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <USART1_IRQHandler+0x3c>)
 8001c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	701a      	strb	r2, [r3, #0]
	   spv1_uart_rx_event(rx_data);
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7fe fda0 	bl	8000774 <spv1_uart_rx_event>
  /* USER CODE END USART1_IRQn 0 */
 // HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b004      	add	sp, #16
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40013800 	.word	0x40013800

08001c40 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e00a      	b.n	8001c68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c52:	e000      	b.n	8001c56 <_read+0x16>
 8001c54:	bf00      	nop
 8001c56:	0001      	movs	r1, r0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	60ba      	str	r2, [r7, #8]
 8001c5e:	b2ca      	uxtb	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf0      	blt.n	8001c52 <_read+0x12>
	}

return len;
 8001c70:	687b      	ldr	r3, [r7, #4]
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b006      	add	sp, #24
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e009      	b.n	8001ca0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 f92d 	bl	8001ef4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dbf1      	blt.n	8001c8c <_write+0x12>
	}
	return len;
 8001ca8:	687b      	ldr	r3, [r7, #4]
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b006      	add	sp, #24
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_close>:

int _close(int file)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	425b      	negs	r3, r3
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b002      	add	sp, #8
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	0192      	lsls	r2, r2, #6
 8001cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	0018      	movs	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b002      	add	sp, #8
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_isatty>:

int _isatty(int file)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
	return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b004      	add	sp, #16
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	18d3      	adds	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f002 f94a 	bl	8003fd4 <__errno>
 8001d40:	0003      	movs	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	425b      	negs	r3, r3
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	18d2      	adds	r2, r2, r3
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <_sbrk+0x64>)
 8001d5c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	0018      	movs	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b006      	add	sp, #24
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20002000 	.word	0x20002000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	200002e4 	.word	0x200002e4
 8001d74:	20000408 	.word	0x20000408

08001d78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001d9e:	4b4e      	ldr	r3, [pc, #312]	; (8001ed8 <SystemCoreClockUpdate+0x154>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	220c      	movs	r2, #12
 8001da4:	4013      	ands	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]

  switch (tmp)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d024      	beq.n	8001df8 <SystemCoreClockUpdate+0x74>
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d825      	bhi.n	8001e00 <SystemCoreClockUpdate+0x7c>
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <SystemCoreClockUpdate+0x3e>
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d00e      	beq.n	8001dde <SystemCoreClockUpdate+0x5a>
 8001dc0:	e01e      	b.n	8001e00 <SystemCoreClockUpdate+0x7c>
  {
    case 0x00U:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
 8001dc2:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <SystemCoreClockUpdate+0x154>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	2207      	movs	r2, #7
 8001dca:	4013      	ands	r3, r2
 8001dcc:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	0212      	lsls	r2, r2, #8
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	4b40      	ldr	r3, [pc, #256]	; (8001edc <SystemCoreClockUpdate+0x158>)
 8001dda:	601a      	str	r2, [r3, #0]
      break;
 8001ddc:	e069      	b.n	8001eb2 <SystemCoreClockUpdate+0x12e>
    case 0x04U:  /* HSI used as system clock */
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001dde:	4b3e      	ldr	r3, [pc, #248]	; (8001ed8 <SystemCoreClockUpdate+0x154>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2210      	movs	r2, #16
 8001de4:	4013      	ands	r3, r2
 8001de6:	d003      	beq.n	8001df0 <SystemCoreClockUpdate+0x6c>
      {
        SystemCoreClock = HSI_VALUE / 4U;
 8001de8:	4b3c      	ldr	r3, [pc, #240]	; (8001edc <SystemCoreClockUpdate+0x158>)
 8001dea:	4a3d      	ldr	r2, [pc, #244]	; (8001ee0 <SystemCoreClockUpdate+0x15c>)
 8001dec:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = HSI_VALUE;
      }
      break;
 8001dee:	e060      	b.n	8001eb2 <SystemCoreClockUpdate+0x12e>
        SystemCoreClock = HSI_VALUE;
 8001df0:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <SystemCoreClockUpdate+0x158>)
 8001df2:	4a3c      	ldr	r2, [pc, #240]	; (8001ee4 <SystemCoreClockUpdate+0x160>)
 8001df4:	601a      	str	r2, [r3, #0]
      break;
 8001df6:	e05c      	b.n	8001eb2 <SystemCoreClockUpdate+0x12e>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001df8:	4b38      	ldr	r3, [pc, #224]	; (8001edc <SystemCoreClockUpdate+0x158>)
 8001dfa:	4a3b      	ldr	r2, [pc, #236]	; (8001ee8 <SystemCoreClockUpdate+0x164>)
 8001dfc:	601a      	str	r2, [r3, #0]
      break;
 8001dfe:	e058      	b.n	8001eb2 <SystemCoreClockUpdate+0x12e>
    default:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001e00:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <SystemCoreClockUpdate+0x154>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	23f0      	movs	r3, #240	; 0xf0
 8001e06:	039b      	lsls	r3, r3, #14
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <SystemCoreClockUpdate+0x154>)
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	23c0      	movs	r3, #192	; 0xc0
 8001e12:	041b      	lsls	r3, r3, #16
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	4a33      	ldr	r2, [pc, #204]	; (8001eec <SystemCoreClockUpdate+0x168>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	0d9b      	lsrs	r3, r3, #22
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]

      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <SystemCoreClockUpdate+0x154>)
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	025b      	lsls	r3, r3, #9
 8001e32:	4013      	ands	r3, r2
 8001e34:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00U)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d128      	bne.n	8001e8e <SystemCoreClockUpdate+0x10a>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <SystemCoreClockUpdate+0x154>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2210      	movs	r2, #16
 8001e42:	4013      	ands	r3, r2
 8001e44:	d011      	beq.n	8001e6a <SystemCoreClockUpdate+0xe6>
        {
          SystemCoreClock = (((HSI_VALUE / 4U) * pllmul) / plldiv);
 8001e46:	6939      	ldr	r1, [r7, #16]
 8001e48:	000a      	movs	r2, r1
 8001e4a:	0152      	lsls	r2, r2, #5
 8001e4c:	1a52      	subs	r2, r2, r1
 8001e4e:	0193      	lsls	r3, r2, #6
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	185b      	adds	r3, r3, r1
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7fe f95e 	bl	800011c <__udivsi3>
 8001e60:	0003      	movs	r3, r0
 8001e62:	001a      	movs	r2, r3
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <SystemCoreClockUpdate+0x158>)
 8001e66:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8001e68:	e022      	b.n	8001eb0 <SystemCoreClockUpdate+0x12c>
          SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8001e6a:	6939      	ldr	r1, [r7, #16]
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	0152      	lsls	r2, r2, #5
 8001e70:	1a52      	subs	r2, r2, r1
 8001e72:	0193      	lsls	r3, r2, #6
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	185b      	adds	r3, r3, r1
 8001e7a:	029b      	lsls	r3, r3, #10
 8001e7c:	68f9      	ldr	r1, [r7, #12]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7fe f94c 	bl	800011c <__udivsi3>
 8001e84:	0003      	movs	r3, r0
 8001e86:	001a      	movs	r2, r3
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <SystemCoreClockUpdate+0x158>)
 8001e8a:	601a      	str	r2, [r3, #0]
      break;
 8001e8c:	e010      	b.n	8001eb0 <SystemCoreClockUpdate+0x12c>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8001e8e:	6939      	ldr	r1, [r7, #16]
 8001e90:	000a      	movs	r2, r1
 8001e92:	0152      	lsls	r2, r2, #5
 8001e94:	1a52      	subs	r2, r2, r1
 8001e96:	0193      	lsls	r3, r2, #6
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	185b      	adds	r3, r3, r1
 8001e9e:	025b      	lsls	r3, r3, #9
 8001ea0:	68f9      	ldr	r1, [r7, #12]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7fe f93a 	bl	800011c <__udivsi3>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	001a      	movs	r2, r3
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <SystemCoreClockUpdate+0x158>)
 8001eae:	601a      	str	r2, [r3, #0]
      break;
 8001eb0:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <SystemCoreClockUpdate+0x154>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	220f      	movs	r2, #15
 8001eba:	4013      	ands	r3, r2
 8001ebc:	4a0c      	ldr	r2, [pc, #48]	; (8001ef0 <SystemCoreClockUpdate+0x16c>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <SystemCoreClockUpdate+0x158>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	40da      	lsrs	r2, r3
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SystemCoreClockUpdate+0x158>)
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b006      	add	sp, #24
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	20000024 	.word	0x20000024
 8001ee0:	003d0900 	.word	0x003d0900
 8001ee4:	00f42400 	.word	0x00f42400
 8001ee8:	007a1200 	.word	0x007a1200
 8001eec:	080056fc 	.word	0x080056fc
 8001ef0:	080056e4 	.word	0x080056e4

08001ef4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001efc:	2301      	movs	r3, #1
 8001efe:	425b      	negs	r3, r3
 8001f00:	1d39      	adds	r1, r7, #4
 8001f02:	4804      	ldr	r0, [pc, #16]	; (8001f14 <__io_putchar+0x20>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	f001 fb79 	bl	80035fc <HAL_UART_Transmit>
  return ch;
 8001f0a:	687b      	ldr	r3, [r7, #4]
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	2000036c 	.word	0x2000036c

08001f18 <UART_Init>:

void UART_Init()
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0


GPIO_InitTypeDef GPIO_InitStruct;

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1e:	4b59      	ldr	r3, [pc, #356]	; (8002084 <UART_Init+0x16c>)
 8001f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f22:	4b58      	ldr	r3, [pc, #352]	; (8002084 <UART_Init+0x16c>)
 8001f24:	2104      	movs	r1, #4
 8001f26:	430a      	orrs	r2, r1
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f2a:	4b56      	ldr	r3, [pc, #344]	; (8002084 <UART_Init+0x16c>)
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	2204      	movs	r2, #4
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOH_CLK_ENABLE();
 8001f36:	4b53      	ldr	r3, [pc, #332]	; (8002084 <UART_Init+0x16c>)
 8001f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3a:	4b52      	ldr	r3, [pc, #328]	; (8002084 <UART_Init+0x16c>)
 8001f3c:	2180      	movs	r1, #128	; 0x80
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f42:	4b50      	ldr	r3, [pc, #320]	; (8002084 <UART_Init+0x16c>)
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	4013      	ands	r3, r2
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <UART_Init+0x16c>)
 8001f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f52:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <UART_Init+0x16c>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	430a      	orrs	r2, r1
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <UART_Init+0x16c>)
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f66:	23a0      	movs	r3, #160	; 0xa0
 8001f68:	05db      	lsls	r3, r3, #23
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 fb86 	bl	8002680 <HAL_GPIO_WritePin>

/*Configure GPIO pin : PC13 */
GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f74:	210c      	movs	r1, #12
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	2280      	movs	r2, #128	; 0x80
 8001f7a:	0192      	lsls	r2, r2, #6
 8001f7c:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	2284      	movs	r2, #132	; 0x84
 8001f82:	0392      	lsls	r2, r2, #14
 8001f84:	605a      	str	r2, [r3, #4]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	187b      	adds	r3, r7, r1
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	000c      	movs	r4, r1
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <UART_Init+0x170>)
 8001f92:	0019      	movs	r1, r3
 8001f94:	0010      	movs	r0, r2
 8001f96:	f000 f9fd 	bl	8002394 <HAL_GPIO_Init>

/*Configure GPIO pin : PA5 */
GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f9a:	0021      	movs	r1, r4
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	605a      	str	r2, [r3, #4]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	60da      	str	r2, [r3, #12]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	187a      	adds	r2, r7, r1
 8001fb6:	23a0      	movs	r3, #160	; 0xa0
 8001fb8:	05db      	lsls	r3, r3, #23
 8001fba:	0011      	movs	r1, r2
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f000 f9e9 	bl	8002394 <HAL_GPIO_Init>
      - Parity = None
      - BaudRate = 19200 baud
      - Hardware flow control disabled (RTS and CTS signals) */


huart1.Instance = USART1;
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <UART_Init+0x174>)
 8001fc4:	4a32      	ldr	r2, [pc, #200]	; (8002090 <UART_Init+0x178>)
 8001fc6:	601a      	str	r2, [r3, #0]
huart1.Init.BaudRate = 19200;
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <UART_Init+0x174>)
 8001fca:	2296      	movs	r2, #150	; 0x96
 8001fcc:	01d2      	lsls	r2, r2, #7
 8001fce:	605a      	str	r2, [r3, #4]
huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	; (800208c <UART_Init+0x174>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <UART_Init+0x174>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
huart1.Init.Parity = UART_PARITY_NONE;
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <UART_Init+0x174>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <UART_Init+0x174>)
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	615a      	str	r2, [r3, #20]
huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe8:	4b28      	ldr	r3, [pc, #160]	; (800208c <UART_Init+0x174>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <UART_Init+0x174>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	61da      	str	r2, [r3, #28]
huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <UART_Init+0x174>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	621a      	str	r2, [r3, #32]
huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <UART_Init+0x174>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

if (HAL_UART_Init(&huart1) != HAL_OK)
 8002000:	4b22      	ldr	r3, [pc, #136]	; (800208c <UART_Init+0x174>)
 8002002:	0018      	movs	r0, r3
 8002004:	f001 faa6 	bl	8003554 <HAL_UART_Init>
 8002008:	1e03      	subs	r3, r0, #0
 800200a:	d001      	beq.n	8002010 <UART_Init+0xf8>
{
  Error_Handler();
 800200c:	f7fe fb94 	bl	8000738 <Error_Handler>
}

/* 4- Enable UART Receive Data Register Not Empty */

SET_BIT(USART1->CR1 , USART_CR1_RXNEIE);
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <UART_Init+0x178>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <UART_Init+0x178>)
 8002016:	2120      	movs	r1, #32
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

/* 5 - Enable UART Interrupt in NVIC */
HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	201b      	movs	r0, #27
 8002022:	f000 f985 	bl	8002330 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002026:	201b      	movs	r0, #27
 8002028:	f000 f997 	bl	800235a <HAL_NVIC_EnableIRQ>


huart2.Instance = USART2;
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <UART_Init+0x17c>)
 800202e:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <UART_Init+0x180>)
 8002030:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 19200;
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <UART_Init+0x17c>)
 8002034:	2296      	movs	r2, #150	; 0x96
 8002036:	01d2      	lsls	r2, r2, #7
 8002038:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <UART_Init+0x17c>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <UART_Init+0x17c>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <UART_Init+0x17c>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <UART_Init+0x17c>)
 800204e:	220c      	movs	r2, #12
 8002050:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <UART_Init+0x17c>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <UART_Init+0x17c>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <UART_Init+0x17c>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <UART_Init+0x17c>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
if (HAL_UART_Init(&huart2) != HAL_OK)
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <UART_Init+0x17c>)
 800206c:	0018      	movs	r0, r3
 800206e:	f001 fa71 	bl	8003554 <HAL_UART_Init>
 8002072:	1e03      	subs	r3, r0, #0
 8002074:	d001      	beq.n	800207a <UART_Init+0x162>
{
  Error_Handler();
 8002076:	f7fe fb5f 	bl	8000738 <Error_Handler>
}


}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	46bd      	mov	sp, r7
 800207e:	b009      	add	sp, #36	; 0x24
 8002080:	bd90      	pop	{r4, r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	40021000 	.word	0x40021000
 8002088:	50000800 	.word	0x50000800
 800208c:	200002e8 	.word	0x200002e8
 8002090:	40013800 	.word	0x40013800
 8002094:	2000036c 	.word	0x2000036c
 8002098:	40004400 	.word	0x40004400

0800209c <UART_driver_send_data>:
  }

}

void UART_driver_send_data (uint8_t* Buff , uint8_t Size)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	000a      	movs	r2, r1
 80020a6:	1cfb      	adds	r3, r7, #3
 80020a8:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, Buff, Size, 100);
 80020aa:	1cfb      	adds	r3, r7, #3
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4804      	ldr	r0, [pc, #16]	; (80020c4 <UART_driver_send_data+0x28>)
 80020b4:	2364      	movs	r3, #100	; 0x64
 80020b6:	f001 faa1 	bl	80035fc <HAL_UART_Transmit>
}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	200002e8 	.word	0x200002e8

080020c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ce:	490e      	ldr	r1, [pc, #56]	; (8002108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <LoopForever+0xe>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e4:	4c0b      	ldr	r4, [pc, #44]	; (8002114 <LoopForever+0x16>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020f2:	f7ff fe41 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020f6:	f001 ff73 	bl	8003fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fa:	f7fe fa71 	bl	80005e0 <main>

080020fe <LoopForever>:

LoopForever:
    b LoopForever
 80020fe:	e7fe      	b.n	80020fe <LoopForever>
  ldr   r0, =_estack
 8002100:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800210c:	080057f8 	.word	0x080057f8
  ldr r2, =_sbss
 8002110:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002114:	20000404 	.word	0x20000404

08002118 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_COMP_IRQHandler>
	...

0800211c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_Init+0x3c>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_Init+0x3c>)
 800212e:	2140      	movs	r1, #64	; 0x40
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002134:	2000      	movs	r0, #0
 8002136:	f000 f811 	bl	800215c <HAL_InitTick>
 800213a:	1e03      	subs	r3, r0, #0
 800213c:	d003      	beq.n	8002146 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e001      	b.n	800214a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002146:	f7ff fcb9 	bl	8001abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800214a:	1dfb      	adds	r3, r7, #7
 800214c:	781b      	ldrb	r3, [r3, #0]
}
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b002      	add	sp, #8
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_InitTick+0x5c>)
 8002166:	681c      	ldr	r4, [r3, #0]
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_InitTick+0x60>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	0019      	movs	r1, r3
 800216e:	23fa      	movs	r3, #250	; 0xfa
 8002170:	0098      	lsls	r0, r3, #2
 8002172:	f7fd ffd3 	bl	800011c <__udivsi3>
 8002176:	0003      	movs	r3, r0
 8002178:	0019      	movs	r1, r3
 800217a:	0020      	movs	r0, r4
 800217c:	f7fd ffce 	bl	800011c <__udivsi3>
 8002180:	0003      	movs	r3, r0
 8002182:	0018      	movs	r0, r3
 8002184:	f000 f8f9 	bl	800237a <HAL_SYSTICK_Config>
 8002188:	1e03      	subs	r3, r0, #0
 800218a:	d001      	beq.n	8002190 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e00f      	b.n	80021b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d80b      	bhi.n	80021ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	2301      	movs	r3, #1
 800219a:	425b      	negs	r3, r3
 800219c:	2200      	movs	r2, #0
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 f8c6 	bl	8002330 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_InitTick+0x64>)
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e000      	b.n	80021b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b003      	add	sp, #12
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	20000024 	.word	0x20000024
 80021bc:	2000002c 	.word	0x2000002c
 80021c0:	20000028 	.word	0x20000028

080021c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  return uwTick;
 80021c8:	4b02      	ldr	r3, [pc, #8]	; (80021d4 <HAL_GetTick+0x10>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	200003f0 	.word	0x200003f0

080021d8 <__NVIC_EnableIRQ>:
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	0002      	movs	r2, r0
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b7f      	cmp	r3, #127	; 0x7f
 80021ea:	d809      	bhi.n	8002200 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	001a      	movs	r2, r3
 80021f2:	231f      	movs	r3, #31
 80021f4:	401a      	ands	r2, r3
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <__NVIC_EnableIRQ+0x30>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	4091      	lsls	r1, r2
 80021fc:	000a      	movs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	0002      	movs	r2, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b7f      	cmp	r3, #127	; 0x7f
 8002220:	d828      	bhi.n	8002274 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002222:	4a2f      	ldr	r2, [pc, #188]	; (80022e0 <__NVIC_SetPriority+0xd4>)
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b25b      	sxtb	r3, r3
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	33c0      	adds	r3, #192	; 0xc0
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	589b      	ldr	r3, [r3, r2]
 8002232:	1dfa      	adds	r2, r7, #7
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	0011      	movs	r1, r2
 8002238:	2203      	movs	r2, #3
 800223a:	400a      	ands	r2, r1
 800223c:	00d2      	lsls	r2, r2, #3
 800223e:	21ff      	movs	r1, #255	; 0xff
 8002240:	4091      	lsls	r1, r2
 8002242:	000a      	movs	r2, r1
 8002244:	43d2      	mvns	r2, r2
 8002246:	401a      	ands	r2, r3
 8002248:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	019b      	lsls	r3, r3, #6
 800224e:	22ff      	movs	r2, #255	; 0xff
 8002250:	401a      	ands	r2, r3
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	0018      	movs	r0, r3
 8002258:	2303      	movs	r3, #3
 800225a:	4003      	ands	r3, r0
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002260:	481f      	ldr	r0, [pc, #124]	; (80022e0 <__NVIC_SetPriority+0xd4>)
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b25b      	sxtb	r3, r3
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	430a      	orrs	r2, r1
 800226c:	33c0      	adds	r3, #192	; 0xc0
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	501a      	str	r2, [r3, r0]
}
 8002272:	e031      	b.n	80022d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002274:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <__NVIC_SetPriority+0xd8>)
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	0019      	movs	r1, r3
 800227c:	230f      	movs	r3, #15
 800227e:	400b      	ands	r3, r1
 8002280:	3b08      	subs	r3, #8
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3306      	adds	r3, #6
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	18d3      	adds	r3, r2, r3
 800228a:	3304      	adds	r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1dfa      	adds	r2, r7, #7
 8002290:	7812      	ldrb	r2, [r2, #0]
 8002292:	0011      	movs	r1, r2
 8002294:	2203      	movs	r2, #3
 8002296:	400a      	ands	r2, r1
 8002298:	00d2      	lsls	r2, r2, #3
 800229a:	21ff      	movs	r1, #255	; 0xff
 800229c:	4091      	lsls	r1, r2
 800229e:	000a      	movs	r2, r1
 80022a0:	43d2      	mvns	r2, r2
 80022a2:	401a      	ands	r2, r3
 80022a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	019b      	lsls	r3, r3, #6
 80022aa:	22ff      	movs	r2, #255	; 0xff
 80022ac:	401a      	ands	r2, r3
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	0018      	movs	r0, r3
 80022b4:	2303      	movs	r3, #3
 80022b6:	4003      	ands	r3, r0
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022bc:	4809      	ldr	r0, [pc, #36]	; (80022e4 <__NVIC_SetPriority+0xd8>)
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	001c      	movs	r4, r3
 80022c4:	230f      	movs	r3, #15
 80022c6:	4023      	ands	r3, r4
 80022c8:	3b08      	subs	r3, #8
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	430a      	orrs	r2, r1
 80022ce:	3306      	adds	r3, #6
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	18c3      	adds	r3, r0, r3
 80022d4:	3304      	adds	r3, #4
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b003      	add	sp, #12
 80022de:	bd90      	pop	{r4, r7, pc}
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <SysTick_Config>:
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	1e5a      	subs	r2, r3, #1
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	045b      	lsls	r3, r3, #17
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d301      	bcc.n	8002300 <SysTick_Config+0x18>
    return (1UL);                                                   /* Reload value impossible */
 80022fc:	2301      	movs	r3, #1
 80022fe:	e010      	b.n	8002322 <SysTick_Config+0x3a>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <SysTick_Config+0x44>)
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	3a01      	subs	r2, #1
 8002306:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002308:	2301      	movs	r3, #1
 800230a:	425b      	negs	r3, r3
 800230c:	2103      	movs	r1, #3
 800230e:	0018      	movs	r0, r3
 8002310:	f7ff ff7c 	bl	800220c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <SysTick_Config+0x44>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231a:	4b04      	ldr	r3, [pc, #16]	; (800232c <SysTick_Config+0x44>)
 800231c:	2207      	movs	r2, #7
 800231e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002320:	2300      	movs	r3, #0
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b002      	add	sp, #8
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	e000e010 	.word	0xe000e010

08002330 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	210f      	movs	r1, #15
 800233c:	187b      	adds	r3, r7, r1
 800233e:	1c02      	adds	r2, r0, #0
 8002340:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	187b      	adds	r3, r7, r1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	b25b      	sxtb	r3, r3
 800234a:	0011      	movs	r1, r2
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff ff5d 	bl	800220c <__NVIC_SetPriority>
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b004      	add	sp, #16
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	0002      	movs	r2, r0
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b25b      	sxtb	r3, r3
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff ff33 	bl	80021d8 <__NVIC_EnableIRQ>
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	b002      	add	sp, #8
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff ffaf 	bl	80022e8 <SysTick_Config>
 800238a:	0003      	movs	r3, r0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80023aa:	e14f      	b.n	800264c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4091      	lsls	r1, r2
 80023b6:	000a      	movs	r2, r1
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d100      	bne.n	80023c4 <HAL_GPIO_Init+0x30>
 80023c2:	e140      	b.n	8002646 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2203      	movs	r2, #3
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d005      	beq.n	80023dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2203      	movs	r2, #3
 80023d6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d130      	bne.n	800243e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	409a      	lsls	r2, r3
 80023ea:	0013      	movs	r3, r2
 80023ec:	43da      	mvns	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	409a      	lsls	r2, r3
 80023fe:	0013      	movs	r3, r2
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002412:	2201      	movs	r2, #1
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
 8002418:	0013      	movs	r3, r2
 800241a:	43da      	mvns	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	2201      	movs	r2, #1
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2203      	movs	r2, #3
 8002444:	4013      	ands	r3, r2
 8002446:	2b03      	cmp	r3, #3
 8002448:	d017      	beq.n	800247a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	409a      	lsls	r2, r3
 8002458:	0013      	movs	r3, r2
 800245a:	43da      	mvns	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2203      	movs	r2, #3
 8002480:	4013      	ands	r3, r2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d123      	bne.n	80024ce <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	58d3      	ldr	r3, [r2, r3]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2207      	movs	r2, #7
 8002498:	4013      	ands	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2107      	movs	r1, #7
 80024b2:	400b      	ands	r3, r1
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	409a      	lsls	r2, r3
 80024b8:	0013      	movs	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	6939      	ldr	r1, [r7, #16]
 80024cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	43da      	mvns	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2203      	movs	r2, #3
 80024ec:	401a      	ands	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	409a      	lsls	r2, r3
 80024f4:	0013      	movs	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	23c0      	movs	r3, #192	; 0xc0
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	4013      	ands	r3, r2
 800250c:	d100      	bne.n	8002510 <HAL_GPIO_Init+0x17c>
 800250e:	e09a      	b.n	8002646 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002510:	4b54      	ldr	r3, [pc, #336]	; (8002664 <HAL_GPIO_Init+0x2d0>)
 8002512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002514:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_GPIO_Init+0x2d0>)
 8002516:	2101      	movs	r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800251c:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_GPIO_Init+0x2d4>)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	3302      	adds	r3, #2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	589b      	ldr	r3, [r3, r2]
 8002528:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2203      	movs	r2, #3
 800252e:	4013      	ands	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	220f      	movs	r2, #15
 8002534:	409a      	lsls	r2, r3
 8002536:	0013      	movs	r3, r2
 8002538:	43da      	mvns	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	23a0      	movs	r3, #160	; 0xa0
 8002544:	05db      	lsls	r3, r3, #23
 8002546:	429a      	cmp	r2, r3
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x1ea>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a47      	ldr	r2, [pc, #284]	; (800266c <HAL_GPIO_Init+0x2d8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x1e6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a46      	ldr	r2, [pc, #280]	; (8002670 <HAL_GPIO_Init+0x2dc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x1e2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a45      	ldr	r2, [pc, #276]	; (8002674 <HAL_GPIO_Init+0x2e0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x1de>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a44      	ldr	r2, [pc, #272]	; (8002678 <HAL_GPIO_Init+0x2e4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x1da>
 800256a:	2305      	movs	r3, #5
 800256c:	e008      	b.n	8002580 <HAL_GPIO_Init+0x1ec>
 800256e:	2306      	movs	r3, #6
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x1ec>
 8002572:	2303      	movs	r3, #3
 8002574:	e004      	b.n	8002580 <HAL_GPIO_Init+0x1ec>
 8002576:	2302      	movs	r3, #2
 8002578:	e002      	b.n	8002580 <HAL_GPIO_Init+0x1ec>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x1ec>
 800257e:	2300      	movs	r3, #0
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	2103      	movs	r1, #3
 8002584:	400a      	ands	r2, r1
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	4093      	lsls	r3, r2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002590:	4935      	ldr	r1, [pc, #212]	; (8002668 <HAL_GPIO_Init+0x2d4>)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3302      	adds	r3, #2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800259e:	4b37      	ldr	r3, [pc, #220]	; (800267c <HAL_GPIO_Init+0x2e8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43da      	mvns	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	025b      	lsls	r3, r3, #9
 80025b6:	4013      	ands	r3, r2
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025c2:	4b2e      	ldr	r3, [pc, #184]	; (800267c <HAL_GPIO_Init+0x2e8>)
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80025c8:	4b2c      	ldr	r3, [pc, #176]	; (800267c <HAL_GPIO_Init+0x2e8>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43da      	mvns	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	029b      	lsls	r3, r3, #10
 80025e0:	4013      	ands	r3, r2
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025ec:	4b23      	ldr	r3, [pc, #140]	; (800267c <HAL_GPIO_Init+0x2e8>)
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_GPIO_Init+0x2e8>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43da      	mvns	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	035b      	lsls	r3, r3, #13
 800260a:	4013      	ands	r3, r2
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_GPIO_Init+0x2e8>)
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <HAL_GPIO_Init+0x2e8>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43da      	mvns	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	039b      	lsls	r3, r3, #14
 8002634:	4013      	ands	r3, r2
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_GPIO_Init+0x2e8>)
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	40da      	lsrs	r2, r3
 8002654:	1e13      	subs	r3, r2, #0
 8002656:	d000      	beq.n	800265a <HAL_GPIO_Init+0x2c6>
 8002658:	e6a8      	b.n	80023ac <HAL_GPIO_Init+0x18>
  }
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b006      	add	sp, #24
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	40010000 	.word	0x40010000
 800266c:	50000400 	.word	0x50000400
 8002670:	50000800 	.word	0x50000800
 8002674:	50000c00 	.word	0x50000c00
 8002678:	50001c00 	.word	0x50001c00
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	0008      	movs	r0, r1
 800268a:	0011      	movs	r1, r2
 800268c:	1cbb      	adds	r3, r7, #2
 800268e:	1c02      	adds	r2, r0, #0
 8002690:	801a      	strh	r2, [r3, #0]
 8002692:	1c7b      	adds	r3, r7, #1
 8002694:	1c0a      	adds	r2, r1, #0
 8002696:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002698:	1c7b      	adds	r3, r7, #1
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a0:	1cbb      	adds	r3, r7, #2
 80026a2:	881a      	ldrh	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80026a8:	e003      	b.n	80026b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80026aa:	1cbb      	adds	r3, r7, #2
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b5b0      	push	{r4, r5, r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f000 fbaf 	bl	8002e2e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d0:	4bcf      	ldr	r3, [pc, #828]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	220c      	movs	r2, #12
 80026d6:	4013      	ands	r3, r2
 80026d8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026da:	4bcd      	ldr	r3, [pc, #820]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	4013      	ands	r3, r2
 80026e4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d100      	bne.n	80026f2 <HAL_RCC_OscConfig+0x36>
 80026f0:	e07e      	b.n	80027f0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d007      	beq.n	8002708 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d112      	bne.n	8002724 <HAL_RCC_OscConfig+0x68>
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	025b      	lsls	r3, r3, #9
 8002704:	429a      	cmp	r2, r3
 8002706:	d10d      	bne.n	8002724 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	4bc1      	ldr	r3, [pc, #772]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	029b      	lsls	r3, r3, #10
 8002710:	4013      	ands	r3, r2
 8002712:	d100      	bne.n	8002716 <HAL_RCC_OscConfig+0x5a>
 8002714:	e06b      	b.n	80027ee <HAL_RCC_OscConfig+0x132>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d167      	bne.n	80027ee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f000 fb85 	bl	8002e2e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	025b      	lsls	r3, r3, #9
 800272c:	429a      	cmp	r2, r3
 800272e:	d107      	bne.n	8002740 <HAL_RCC_OscConfig+0x84>
 8002730:	4bb7      	ldr	r3, [pc, #732]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4bb6      	ldr	r3, [pc, #728]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	0249      	lsls	r1, r1, #9
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e027      	b.n	8002790 <HAL_RCC_OscConfig+0xd4>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	23a0      	movs	r3, #160	; 0xa0
 8002746:	02db      	lsls	r3, r3, #11
 8002748:	429a      	cmp	r2, r3
 800274a:	d10e      	bne.n	800276a <HAL_RCC_OscConfig+0xae>
 800274c:	4bb0      	ldr	r3, [pc, #704]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4baf      	ldr	r3, [pc, #700]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	02c9      	lsls	r1, r1, #11
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	4bad      	ldr	r3, [pc, #692]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4bac      	ldr	r3, [pc, #688]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	0249      	lsls	r1, r1, #9
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e012      	b.n	8002790 <HAL_RCC_OscConfig+0xd4>
 800276a:	4ba9      	ldr	r3, [pc, #676]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4ba8      	ldr	r3, [pc, #672]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002770:	49a8      	ldr	r1, [pc, #672]	; (8002a14 <HAL_RCC_OscConfig+0x358>)
 8002772:	400a      	ands	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	4ba6      	ldr	r3, [pc, #664]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4ba2      	ldr	r3, [pc, #648]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4ba1      	ldr	r3, [pc, #644]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800278a:	49a3      	ldr	r1, [pc, #652]	; (8002a18 <HAL_RCC_OscConfig+0x35c>)
 800278c:	400a      	ands	r2, r1
 800278e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff fd14 	bl	80021c4 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027a0:	e009      	b.n	80027b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a2:	f7ff fd0f 	bl	80021c4 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	; 0x64
 80027ae:	d902      	bls.n	80027b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f000 fb3c 	bl	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027b6:	4b96      	ldr	r3, [pc, #600]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	029b      	lsls	r3, r3, #10
 80027be:	4013      	ands	r3, r2
 80027c0:	d0ef      	beq.n	80027a2 <HAL_RCC_OscConfig+0xe6>
 80027c2:	e015      	b.n	80027f0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff fcfe 	bl	80021c4 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ce:	f7ff fcf9 	bl	80021c4 <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	; 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e326      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027e0:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	4013      	ands	r3, r2
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x112>
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2202      	movs	r2, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d100      	bne.n	80027fc <HAL_RCC_OscConfig+0x140>
 80027fa:	e08b      	b.n	8002914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	2b04      	cmp	r3, #4
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d13e      	bne.n	800288c <HAL_RCC_OscConfig+0x1d0>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d13b      	bne.n	800288c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2204      	movs	r2, #4
 800281a:	4013      	ands	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_RCC_OscConfig+0x16c>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e302      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a7b      	ldr	r2, [pc, #492]	; (8002a1c <HAL_RCC_OscConfig+0x360>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	021a      	lsls	r2, r3, #8
 8002838:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800283e:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2209      	movs	r2, #9
 8002844:	4393      	bics	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	4b71      	ldr	r3, [pc, #452]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002850:	f000 fc40 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8002854:	0001      	movs	r1, r0
 8002856:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	220f      	movs	r2, #15
 800285e:	4013      	ands	r3, r2
 8002860:	4a6f      	ldr	r2, [pc, #444]	; (8002a20 <HAL_RCC_OscConfig+0x364>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	000a      	movs	r2, r1
 8002866:	40da      	lsrs	r2, r3
 8002868:	4b6e      	ldr	r3, [pc, #440]	; (8002a24 <HAL_RCC_OscConfig+0x368>)
 800286a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800286c:	4b6e      	ldr	r3, [pc, #440]	; (8002a28 <HAL_RCC_OscConfig+0x36c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2513      	movs	r5, #19
 8002872:	197c      	adds	r4, r7, r5
 8002874:	0018      	movs	r0, r3
 8002876:	f7ff fc71 	bl	800215c <HAL_InitTick>
 800287a:	0003      	movs	r3, r0
 800287c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800287e:	197b      	adds	r3, r7, r5
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d046      	beq.n	8002914 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002886:	197b      	adds	r3, r7, r5
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	e2d0      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d027      	beq.n	80028e2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002892:	4b5f      	ldr	r3, [pc, #380]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2209      	movs	r2, #9
 8002898:	4393      	bics	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff fc8e 	bl	80021c4 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ae:	f7ff fc89 	bl	80021c4 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e2b6      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2204      	movs	r2, #4
 80028c6:	4013      	ands	r3, r2
 80028c8:	d0f1      	beq.n	80028ae <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ca:	4b51      	ldr	r3, [pc, #324]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4a53      	ldr	r2, [pc, #332]	; (8002a1c <HAL_RCC_OscConfig+0x360>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	021a      	lsls	r2, r3, #8
 80028da:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	e018      	b.n	8002914 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	438a      	bics	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7ff fc69 	bl	80021c4 <HAL_GetTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f8:	f7ff fc64 	bl	80021c4 <HAL_GetTick>
 80028fc:	0002      	movs	r2, r0
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e291      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2204      	movs	r2, #4
 8002910:	4013      	ands	r3, r2
 8002912:	d1f1      	bne.n	80028f8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2210      	movs	r2, #16
 800291a:	4013      	ands	r3, r2
 800291c:	d100      	bne.n	8002920 <HAL_RCC_OscConfig+0x264>
 800291e:	e0a1      	b.n	8002a64 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d140      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002926:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4013      	ands	r3, r2
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x282>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e277      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <HAL_RCC_OscConfig+0x370>)
 8002944:	4013      	ands	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800294c:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002952:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	0a19      	lsrs	r1, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	061a      	lsls	r2, r3, #24
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	0b5b      	lsrs	r3, r3, #13
 800296c:	3301      	adds	r3, #1
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	0212      	lsls	r2, r2, #8
 8002972:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	210f      	movs	r1, #15
 800297c:	400b      	ands	r3, r1
 800297e:	4928      	ldr	r1, [pc, #160]	; (8002a20 <HAL_RCC_OscConfig+0x364>)
 8002980:	5ccb      	ldrb	r3, [r1, r3]
 8002982:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x368>)
 8002986:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_RCC_OscConfig+0x36c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2513      	movs	r5, #19
 800298e:	197c      	adds	r4, r7, r5
 8002990:	0018      	movs	r0, r3
 8002992:	f7ff fbe3 	bl	800215c <HAL_InitTick>
 8002996:	0003      	movs	r3, r0
 8002998:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800299a:	197b      	adds	r3, r7, r5
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d060      	beq.n	8002a64 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80029a2:	197b      	adds	r3, r7, r5
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	e242      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d03f      	beq.n	8002a30 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029b6:	2180      	movs	r1, #128	; 0x80
 80029b8:	0049      	lsls	r1, r1, #1
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7ff fc01 	bl	80021c4 <HAL_GetTick>
 80029c2:	0003      	movs	r3, r0
 80029c4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c8:	f7ff fbfc 	bl	80021c4 <HAL_GetTick>
 80029cc:	0002      	movs	r2, r0
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e229      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4013      	ands	r3, r2
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <HAL_RCC_OscConfig+0x370>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	0a19      	lsrs	r1, r3, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	061a      	lsls	r2, r3, #24
 8002a08:	4b01      	ldr	r3, [pc, #4]	; (8002a10 <HAL_RCC_OscConfig+0x354>)
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	e029      	b.n	8002a64 <HAL_RCC_OscConfig+0x3a8>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	fffeffff 	.word	0xfffeffff
 8002a18:	fffbffff 	.word	0xfffbffff
 8002a1c:	ffffe0ff 	.word	0xffffe0ff
 8002a20:	080056e4 	.word	0x080056e4
 8002a24:	20000024 	.word	0x20000024
 8002a28:	20000028 	.word	0x20000028
 8002a2c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a30:	4bbd      	ldr	r3, [pc, #756]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4bbc      	ldr	r3, [pc, #752]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002a36:	49bd      	ldr	r1, [pc, #756]	; (8002d2c <HAL_RCC_OscConfig+0x670>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7ff fbc2 	bl	80021c4 <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a46:	f7ff fbbd 	bl	80021c4 <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1ea      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a58:	4bb3      	ldr	r3, [pc, #716]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d036      	beq.n	8002adc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d019      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a76:	4bac      	ldr	r3, [pc, #688]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a7a:	4bab      	ldr	r3, [pc, #684]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7ff fb9f 	bl	80021c4 <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7ff fb9a 	bl	80021c4 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1c7      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a9e:	4ba2      	ldr	r3, [pc, #648]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d0f1      	beq.n	8002a8c <HAL_RCC_OscConfig+0x3d0>
 8002aa8:	e018      	b.n	8002adc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aaa:	4b9f      	ldr	r3, [pc, #636]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aae:	4b9e      	ldr	r3, [pc, #632]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	438a      	bics	r2, r1
 8002ab4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab6:	f7ff fb85 	bl	80021c4 <HAL_GetTick>
 8002aba:	0003      	movs	r3, r0
 8002abc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac0:	f7ff fb80 	bl	80021c4 <HAL_GetTick>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e1ad      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ad2:	4b95      	ldr	r3, [pc, #596]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d1f1      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d100      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x42c>
 8002ae6:	e0ae      	b.n	8002c46 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae8:	2027      	movs	r0, #39	; 0x27
 8002aea:	183b      	adds	r3, r7, r0
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af0:	4b8d      	ldr	r3, [pc, #564]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	055b      	lsls	r3, r3, #21
 8002af8:	4013      	ands	r3, r2
 8002afa:	d109      	bne.n	8002b10 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afc:	4b8a      	ldr	r3, [pc, #552]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b00:	4b89      	ldr	r3, [pc, #548]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	0549      	lsls	r1, r1, #21
 8002b06:	430a      	orrs	r2, r1
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b0a:	183b      	adds	r3, r7, r0
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b87      	ldr	r3, [pc, #540]	; (8002d30 <HAL_RCC_OscConfig+0x674>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d11a      	bne.n	8002b52 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1c:	4b84      	ldr	r3, [pc, #528]	; (8002d30 <HAL_RCC_OscConfig+0x674>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b83      	ldr	r3, [pc, #524]	; (8002d30 <HAL_RCC_OscConfig+0x674>)
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	0049      	lsls	r1, r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2a:	f7ff fb4b 	bl	80021c4 <HAL_GetTick>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b34:	f7ff fb46 	bl	80021c4 <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e173      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	4b7a      	ldr	r3, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x674>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_OscConfig+0x4b2>
 8002b5e:	4b72      	ldr	r3, [pc, #456]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b62:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	0049      	lsls	r1, r1, #1
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b6c:	e031      	b.n	8002bd2 <HAL_RCC_OscConfig+0x516>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4d4>
 8002b76:	4b6c      	ldr	r3, [pc, #432]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b7a:	4b6b      	ldr	r3, [pc, #428]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b7c:	496b      	ldr	r1, [pc, #428]	; (8002d2c <HAL_RCC_OscConfig+0x670>)
 8002b7e:	400a      	ands	r2, r1
 8002b80:	651a      	str	r2, [r3, #80]	; 0x50
 8002b82:	4b69      	ldr	r3, [pc, #420]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b86:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b88:	496a      	ldr	r1, [pc, #424]	; (8002d34 <HAL_RCC_OscConfig+0x678>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b8e:	e020      	b.n	8002bd2 <HAL_RCC_OscConfig+0x516>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	23a0      	movs	r3, #160	; 0xa0
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d10e      	bne.n	8002bba <HAL_RCC_OscConfig+0x4fe>
 8002b9c:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002b9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba0:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002ba2:	2180      	movs	r1, #128	; 0x80
 8002ba4:	00c9      	lsls	r1, r1, #3
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	651a      	str	r2, [r3, #80]	; 0x50
 8002baa:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bae:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	0049      	lsls	r1, r1, #1
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	651a      	str	r2, [r3, #80]	; 0x50
 8002bb8:	e00b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x516>
 8002bba:	4b5b      	ldr	r3, [pc, #364]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bbe:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bc0:	495a      	ldr	r1, [pc, #360]	; (8002d2c <HAL_RCC_OscConfig+0x670>)
 8002bc2:	400a      	ands	r2, r1
 8002bc4:	651a      	str	r2, [r3, #80]	; 0x50
 8002bc6:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bca:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bcc:	4959      	ldr	r1, [pc, #356]	; (8002d34 <HAL_RCC_OscConfig+0x678>)
 8002bce:	400a      	ands	r2, r1
 8002bd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d015      	beq.n	8002c06 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7ff faf3 	bl	80021c4 <HAL_GetTick>
 8002bde:	0003      	movs	r3, r0
 8002be0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002be2:	e009      	b.n	8002bf8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7ff faee 	bl	80021c4 <HAL_GetTick>
 8002be8:	0002      	movs	r2, r0
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_RCC_OscConfig+0x67c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e11a      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4013      	ands	r3, r2
 8002c02:	d0ef      	beq.n	8002be4 <HAL_RCC_OscConfig+0x528>
 8002c04:	e014      	b.n	8002c30 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7ff fadd 	bl	80021c4 <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c0e:	e009      	b.n	8002c24 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7ff fad8 	bl	80021c4 <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	4a47      	ldr	r2, [pc, #284]	; (8002d38 <HAL_RCC_OscConfig+0x67c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e104      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d1ef      	bne.n	8002c10 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c30:	2327      	movs	r3, #39	; 0x27
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d105      	bne.n	8002c46 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3e:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c40:	493e      	ldr	r1, [pc, #248]	; (8002d3c <HAL_RCC_OscConfig+0x680>)
 8002c42:	400a      	ands	r2, r1
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d049      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d026      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c58:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c68:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002c70:	4b33      	ldr	r3, [pc, #204]	; (8002d40 <HAL_RCC_OscConfig+0x684>)
 8002c72:	6a1a      	ldr	r2, [r3, #32]
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_RCC_OscConfig+0x684>)
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	0189      	lsls	r1, r1, #6
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7ff faa1 	bl	80021c4 <HAL_GetTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c88:	f7ff fa9c 	bl	80021c4 <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e0c9      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d0f1      	beq.n	8002c88 <HAL_RCC_OscConfig+0x5cc>
 8002ca4:	e01e      	b.n	8002ce4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	438a      	bics	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_RCC_OscConfig+0x684>)
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_RCC_OscConfig+0x684>)
 8002cb8:	4922      	ldr	r1, [pc, #136]	; (8002d44 <HAL_RCC_OscConfig+0x688>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7ff fa81 	bl	80021c4 <HAL_GetTick>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc8:	f7ff fa7c 	bl	80021c4 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0a9      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d1f1      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d100      	bne.n	8002cee <HAL_RCC_OscConfig+0x632>
 8002cec:	e09e      	b.n	8002e2c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d100      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x63a>
 8002cf4:	e077      	b.n	8002de6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d158      	bne.n	8002db0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_OscConfig+0x66c>)
 8002d04:	4910      	ldr	r1, [pc, #64]	; (8002d48 <HAL_RCC_OscConfig+0x68c>)
 8002d06:	400a      	ands	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7ff fa5b 	bl	80021c4 <HAL_GetTick>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d12:	e01b      	b.n	8002d4c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d14:	f7ff fa56 	bl	80021c4 <HAL_GetTick>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d914      	bls.n	8002d4c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e083      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	fffffeff 	.word	0xfffffeff
 8002d30:	40007000 	.word	0x40007000
 8002d34:	fffffbff 	.word	0xfffffbff
 8002d38:	00001388 	.word	0x00001388
 8002d3c:	efffffff 	.word	0xefffffff
 8002d40:	40010000 	.word	0x40010000
 8002d44:	ffffdfff 	.word	0xffffdfff
 8002d48:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d4c:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	049b      	lsls	r3, r3, #18
 8002d54:	4013      	ands	r3, r2
 8002d56:	d1dd      	bne.n	8002d14 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d58:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <HAL_RCC_OscConfig+0x780>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	431a      	orrs	r2, r3
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	0449      	lsls	r1, r1, #17
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7ff fa1d 	bl	80021c4 <HAL_GetTick>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7ff fa18 	bl	80021c4 <HAL_GetTick>
 8002d94:	0002      	movs	r2, r0
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e045      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	049b      	lsls	r3, r3, #18
 8002daa:	4013      	ands	r3, r2
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x6d4>
 8002dae:	e03d      	b.n	8002e2c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002db6:	4922      	ldr	r1, [pc, #136]	; (8002e40 <HAL_RCC_OscConfig+0x784>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff fa02 	bl	80021c4 <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7ff f9fd 	bl	80021c4 <HAL_GetTick>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e02a      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	049b      	lsls	r3, r3, #18
 8002de0:	4013      	ands	r3, r2
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x70a>
 8002de4:	e022      	b.n	8002e2c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e01d      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_RCC_OscConfig+0x77c>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	025b      	lsls	r3, r3, #9
 8002dfe:	401a      	ands	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d10f      	bne.n	8002e28 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	23f0      	movs	r3, #240	; 0xf0
 8002e0c:	039b      	lsls	r3, r3, #14
 8002e0e:	401a      	ands	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	23c0      	movs	r3, #192	; 0xc0
 8002e1c:	041b      	lsls	r3, r3, #16
 8002e1e:	401a      	ands	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b00a      	add	sp, #40	; 0x28
 8002e34:	bdb0      	pop	{r4, r5, r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	ff02ffff 	.word	0xff02ffff
 8002e40:	feffffff 	.word	0xfeffffff

08002e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e44:	b5b0      	push	{r4, r5, r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e128      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e58:	4b96      	ldr	r3, [pc, #600]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4013      	ands	r3, r2
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d91e      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b93      	ldr	r3, [pc, #588]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4393      	bics	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	4b90      	ldr	r3, [pc, #576]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e78:	f7ff f9a4 	bl	80021c4 <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e80:	e009      	b.n	8002e96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e82:	f7ff f99f 	bl	80021c4 <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	4a8a      	ldr	r2, [pc, #552]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e109      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b87      	ldr	r3, [pc, #540]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1ee      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eae:	4b83      	ldr	r3, [pc, #524]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	22f0      	movs	r2, #240	; 0xf0
 8002eb4:	4393      	bics	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	4b7f      	ldr	r3, [pc, #508]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d100      	bne.n	8002ece <HAL_RCC_ClockConfig+0x8a>
 8002ecc:	e089      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ed6:	4b79      	ldr	r3, [pc, #484]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	029b      	lsls	r3, r3, #10
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d120      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e0e1      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eee:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	049b      	lsls	r3, r3, #18
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d114      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0d5      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f06:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d109      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0ca      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f14:	4b69      	ldr	r3, [pc, #420]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0c2      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f24:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4393      	bics	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	4b62      	ldr	r3, [pc, #392]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7ff f944 	bl	80021c4 <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d111      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f48:	e009      	b.n	8002f5e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4a:	f7ff f93b 	bl	80021c4 <HAL_GetTick>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	4a58      	ldr	r2, [pc, #352]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0a5      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f5e:	4b57      	ldr	r3, [pc, #348]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	220c      	movs	r2, #12
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d1ef      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x106>
 8002f6a:	e03a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d111      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f76:	f7ff f925 	bl	80021c4 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	4a4d      	ldr	r2, [pc, #308]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e08f      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	220c      	movs	r2, #12
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d1ef      	bne.n	8002f76 <HAL_RCC_ClockConfig+0x132>
 8002f96:	e024      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa2:	f7ff f90f 	bl	80021c4 <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	4a42      	ldr	r2, [pc, #264]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e079      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	220c      	movs	r2, #12
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d1ef      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x15e>
 8002fc2:	e00e      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7ff f8fe 	bl	80021c4 <HAL_GetTick>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4a3a      	ldr	r2, [pc, #232]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e068      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fd8:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	220c      	movs	r2, #12
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4013      	ands	r3, r2
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d21e      	bcs.n	800302e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff0:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4393      	bics	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003002:	f7ff f8df 	bl	80021c4 <HAL_GetTick>
 8003006:	0003      	movs	r3, r0
 8003008:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	e009      	b.n	8003020 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7ff f8da 	bl	80021c4 <HAL_GetTick>
 8003010:	0002      	movs	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <HAL_RCC_ClockConfig+0x274>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e044      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_ClockConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2201      	movs	r2, #1
 8003026:	4013      	ands	r3, r2
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d1ee      	bne.n	800300c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2204      	movs	r2, #4
 8003034:	4013      	ands	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <HAL_RCC_ClockConfig+0x27c>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2208      	movs	r2, #8
 8003052:	4013      	ands	r3, r2
 8003054:	d00a      	beq.n	800306c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003056:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_RCC_ClockConfig+0x280>)
 800305c:	4013      	ands	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00da      	lsls	r2, r3, #3
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800306c:	f000 f832 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8003070:	0001      	movs	r1, r0
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	220f      	movs	r2, #15
 800307a:	4013      	ands	r3, r2
 800307c:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <HAL_RCC_ClockConfig+0x284>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	000a      	movs	r2, r1
 8003082:	40da      	lsrs	r2, r3
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCC_ClockConfig+0x288>)
 8003086:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_ClockConfig+0x28c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	250b      	movs	r5, #11
 800308e:	197c      	adds	r4, r7, r5
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff f863 	bl	800215c <HAL_InitTick>
 8003096:	0003      	movs	r3, r0
 8003098:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800309a:	197b      	adds	r3, r7, r5
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80030a2:	197b      	adds	r3, r7, r5
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	e000      	b.n	80030aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	0018      	movs	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b004      	add	sp, #16
 80030b0:	bdb0      	pop	{r4, r5, r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	40022000 	.word	0x40022000
 80030b8:	00001388 	.word	0x00001388
 80030bc:	40021000 	.word	0x40021000
 80030c0:	fffff8ff 	.word	0xfffff8ff
 80030c4:	ffffc7ff 	.word	0xffffc7ff
 80030c8:	080056e4 	.word	0x080056e4
 80030cc:	20000024 	.word	0x20000024
 80030d0:	20000028 	.word	0x20000028

080030d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b08e      	sub	sp, #56	; 0x38
 80030d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80030da:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCC_GetSysClockFreq+0x138>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e2:	230c      	movs	r3, #12
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d014      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x40>
 80030ea:	d900      	bls.n	80030ee <HAL_RCC_GetSysClockFreq+0x1a>
 80030ec:	e07b      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x112>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x24>
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d00b      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x3a>
 80030f6:	e076      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030f8:	4b44      	ldr	r3, [pc, #272]	; (800320c <HAL_RCC_GetSysClockFreq+0x138>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2210      	movs	r2, #16
 80030fe:	4013      	ands	r3, r2
 8003100:	d002      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003102:	4b43      	ldr	r3, [pc, #268]	; (8003210 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003104:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003106:	e07c      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003108:	4b42      	ldr	r3, [pc, #264]	; (8003214 <HAL_RCC_GetSysClockFreq+0x140>)
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800310c:	e079      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800310e:	4b42      	ldr	r3, [pc, #264]	; (8003218 <HAL_RCC_GetSysClockFreq+0x144>)
 8003110:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003112:	e076      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003116:	0c9a      	lsrs	r2, r3, #18
 8003118:	230f      	movs	r3, #15
 800311a:	401a      	ands	r2, r3
 800311c:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_RCC_GetSysClockFreq+0x148>)
 800311e:	5c9b      	ldrb	r3, [r3, r2]
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003124:	0d9a      	lsrs	r2, r3, #22
 8003126:	2303      	movs	r3, #3
 8003128:	4013      	ands	r3, r2
 800312a:	3301      	adds	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312e:	4b37      	ldr	r3, [pc, #220]	; (800320c <HAL_RCC_GetSysClockFreq+0x138>)
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	025b      	lsls	r3, r3, #9
 8003136:	4013      	ands	r3, r2
 8003138:	d01a      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	4a35      	ldr	r2, [pc, #212]	; (8003218 <HAL_RCC_GetSysClockFreq+0x144>)
 8003144:	2300      	movs	r3, #0
 8003146:	69b8      	ldr	r0, [r7, #24]
 8003148:	69f9      	ldr	r1, [r7, #28]
 800314a:	f7fd f893 	bl	8000274 <__aeabi_lmul>
 800314e:	0002      	movs	r2, r0
 8003150:	000b      	movs	r3, r1
 8003152:	0010      	movs	r0, r2
 8003154:	0019      	movs	r1, r3
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f7fd f867 	bl	8000234 <__aeabi_uldivmod>
 8003166:	0002      	movs	r2, r0
 8003168:	000b      	movs	r3, r1
 800316a:	0013      	movs	r3, r2
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
 800316e:	e037      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003170:	4b26      	ldr	r3, [pc, #152]	; (800320c <HAL_RCC_GetSysClockFreq+0x138>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2210      	movs	r2, #16
 8003176:	4013      	ands	r3, r2
 8003178:	d01a      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4a23      	ldr	r2, [pc, #140]	; (8003210 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003184:	2300      	movs	r3, #0
 8003186:	68b8      	ldr	r0, [r7, #8]
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	f7fd f873 	bl	8000274 <__aeabi_lmul>
 800318e:	0002      	movs	r2, r0
 8003190:	000b      	movs	r3, r1
 8003192:	0010      	movs	r0, r2
 8003194:	0019      	movs	r1, r3
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f7fd f847 	bl	8000234 <__aeabi_uldivmod>
 80031a6:	0002      	movs	r2, r0
 80031a8:	000b      	movs	r3, r1
 80031aa:	0013      	movs	r3, r2
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
 80031ae:	e017      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	0018      	movs	r0, r3
 80031b4:	2300      	movs	r3, #0
 80031b6:	0019      	movs	r1, r3
 80031b8:	4a16      	ldr	r2, [pc, #88]	; (8003214 <HAL_RCC_GetSysClockFreq+0x140>)
 80031ba:	2300      	movs	r3, #0
 80031bc:	f7fd f85a 	bl	8000274 <__aeabi_lmul>
 80031c0:	0002      	movs	r2, r0
 80031c2:	000b      	movs	r3, r1
 80031c4:	0010      	movs	r0, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	001c      	movs	r4, r3
 80031cc:	2300      	movs	r3, #0
 80031ce:	001d      	movs	r5, r3
 80031d0:	0022      	movs	r2, r4
 80031d2:	002b      	movs	r3, r5
 80031d4:	f7fd f82e 	bl	8000234 <__aeabi_uldivmod>
 80031d8:	0002      	movs	r2, r0
 80031da:	000b      	movs	r3, r1
 80031dc:	0013      	movs	r3, r2
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80031e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031e4:	e00d      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_GetSysClockFreq+0x138>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0b5b      	lsrs	r3, r3, #13
 80031ec:	2207      	movs	r2, #7
 80031ee:	4013      	ands	r3, r2
 80031f0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	3301      	adds	r3, #1
 80031f6:	2280      	movs	r2, #128	; 0x80
 80031f8:	0212      	lsls	r2, r2, #8
 80031fa:	409a      	lsls	r2, r3
 80031fc:	0013      	movs	r3, r2
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003200:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b00e      	add	sp, #56	; 0x38
 800320a:	bdb0      	pop	{r4, r5, r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	003d0900 	.word	0x003d0900
 8003214:	00f42400 	.word	0x00f42400
 8003218:	007a1200 	.word	0x007a1200
 800321c:	080056fc 	.word	0x080056fc

08003220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003224:	4b02      	ldr	r3, [pc, #8]	; (8003230 <HAL_RCC_GetHCLKFreq+0x10>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	20000024 	.word	0x20000024

08003234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003238:	f7ff fff2 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 800323c:	0001      	movs	r1, r0
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	2207      	movs	r2, #7
 8003246:	4013      	ands	r3, r2
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_RCC_GetPCLK1Freq+0x28>)
 800324a:	5cd3      	ldrb	r3, [r2, r3]
 800324c:	40d9      	lsrs	r1, r3
 800324e:	000b      	movs	r3, r1
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	40021000 	.word	0x40021000
 800325c:	080056f4 	.word	0x080056f4

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003264:	f7ff ffdc 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003268:	0001      	movs	r1, r0
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x24>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	0adb      	lsrs	r3, r3, #11
 8003270:	2207      	movs	r2, #7
 8003272:	4013      	ands	r3, r2
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003276:	5cd3      	ldrb	r3, [r2, r3]
 8003278:	40d9      	lsrs	r1, r3
 800327a:	000b      	movs	r3, r1
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	40021000 	.word	0x40021000
 8003288:	080056f4 	.word	0x080056f4

0800328c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003294:	2317      	movs	r3, #23
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2220      	movs	r2, #32
 80032a2:	4013      	ands	r3, r2
 80032a4:	d106      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4013      	ands	r3, r2
 80032b0:	d100      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80032b2:	e0d9      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b4:	4b9c      	ldr	r3, [pc, #624]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80032b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	055b      	lsls	r3, r3, #21
 80032bc:	4013      	ands	r3, r2
 80032be:	d10a      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	4b99      	ldr	r3, [pc, #612]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80032c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c4:	4b98      	ldr	r3, [pc, #608]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80032c6:	2180      	movs	r1, #128	; 0x80
 80032c8:	0549      	lsls	r1, r1, #21
 80032ca:	430a      	orrs	r2, r1
 80032cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80032ce:	2317      	movs	r3, #23
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b95      	ldr	r3, [pc, #596]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4013      	ands	r3, r2
 80032e0:	d11a      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b92      	ldr	r3, [pc, #584]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b91      	ldr	r3, [pc, #580]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80032e8:	2180      	movs	r1, #128	; 0x80
 80032ea:	0049      	lsls	r1, r1, #1
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f0:	f7fe ff68 	bl	80021c4 <HAL_GetTick>
 80032f4:	0003      	movs	r3, r0
 80032f6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	e008      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fa:	f7fe ff63 	bl	80021c4 <HAL_GetTick>
 80032fe:	0002      	movs	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b64      	cmp	r3, #100	; 0x64
 8003306:	d901      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e108      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	4b87      	ldr	r3, [pc, #540]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4013      	ands	r3, r2
 8003316:	d0f0      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003318:	4b83      	ldr	r3, [pc, #524]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	23c0      	movs	r3, #192	; 0xc0
 800331e:	039b      	lsls	r3, r3, #14
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	23c0      	movs	r3, #192	; 0xc0
 800332a:	039b      	lsls	r3, r3, #14
 800332c:	4013      	ands	r3, r2
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d107      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	23c0      	movs	r3, #192	; 0xc0
 800333a:	039b      	lsls	r3, r3, #14
 800333c:	4013      	ands	r3, r2
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	429a      	cmp	r2, r3
 8003342:	d013      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	23c0      	movs	r3, #192	; 0xc0
 800334a:	029b      	lsls	r3, r3, #10
 800334c:	401a      	ands	r2, r3
 800334e:	23c0      	movs	r3, #192	; 0xc0
 8003350:	029b      	lsls	r3, r3, #10
 8003352:	429a      	cmp	r2, r3
 8003354:	d10a      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003356:	4b74      	ldr	r3, [pc, #464]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	029b      	lsls	r3, r3, #10
 800335e:	401a      	ands	r2, r3
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	029b      	lsls	r3, r3, #10
 8003364:	429a      	cmp	r2, r3
 8003366:	d101      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0d8      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800336c:	4b6e      	ldr	r3, [pc, #440]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800336e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003370:	23c0      	movs	r3, #192	; 0xc0
 8003372:	029b      	lsls	r3, r3, #10
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d049      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	23c0      	movs	r3, #192	; 0xc0
 8003384:	029b      	lsls	r3, r3, #10
 8003386:	4013      	ands	r3, r2
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	429a      	cmp	r2, r3
 800338c:	d004      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2220      	movs	r2, #32
 8003394:	4013      	ands	r3, r2
 8003396:	d10d      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	23c0      	movs	r3, #192	; 0xc0
 800339e:	029b      	lsls	r3, r3, #10
 80033a0:	4013      	ands	r3, r2
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d034      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	4013      	ands	r3, r2
 80033b2:	d02e      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80033b4:	4b5c      	ldr	r3, [pc, #368]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b8:	4a5d      	ldr	r2, [pc, #372]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033be:	4b5a      	ldr	r3, [pc, #360]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033c2:	4b59      	ldr	r3, [pc, #356]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033c4:	2180      	movs	r1, #128	; 0x80
 80033c6:	0309      	lsls	r1, r1, #12
 80033c8:	430a      	orrs	r2, r1
 80033ca:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033cc:	4b56      	ldr	r3, [pc, #344]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d0:	4b55      	ldr	r3, [pc, #340]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033d2:	4958      	ldr	r1, [pc, #352]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80033d4:	400a      	ands	r2, r1
 80033d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80033d8:	4b53      	ldr	r3, [pc, #332]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4013      	ands	r3, r2
 80033e6:	d014      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe feec 	bl	80021c4 <HAL_GetTick>
 80033ec:	0003      	movs	r3, r0
 80033ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033f0:	e009      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fe fee7 	bl	80021c4 <HAL_GetTick>
 80033f6:	0002      	movs	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	4a4e      	ldr	r2, [pc, #312]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e08b      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003406:	4b48      	ldr	r3, [pc, #288]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4013      	ands	r3, r2
 8003410:	d0ef      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	23c0      	movs	r3, #192	; 0xc0
 8003418:	029b      	lsls	r3, r3, #10
 800341a:	401a      	ands	r2, r3
 800341c:	23c0      	movs	r3, #192	; 0xc0
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	429a      	cmp	r2, r3
 8003422:	d10c      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003424:	4b40      	ldr	r3, [pc, #256]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a44      	ldr	r2, [pc, #272]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800342a:	4013      	ands	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	23c0      	movs	r3, #192	; 0xc0
 8003434:	039b      	lsls	r3, r3, #14
 8003436:	401a      	ands	r2, r3
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800343a:	430a      	orrs	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003440:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	23c0      	movs	r3, #192	; 0xc0
 8003448:	029b      	lsls	r3, r3, #10
 800344a:	401a      	ands	r2, r3
 800344c:	4b36      	ldr	r3, [pc, #216]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800344e:	430a      	orrs	r2, r1
 8003450:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003452:	2317      	movs	r3, #23
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345c:	4b32      	ldr	r3, [pc, #200]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800345e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003460:	4b31      	ldr	r3, [pc, #196]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003462:	4937      	ldr	r1, [pc, #220]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003464:	400a      	ands	r2, r1
 8003466:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2201      	movs	r2, #1
 800346e:	4013      	ands	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003472:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	2203      	movs	r2, #3
 8003478:	4393      	bics	r3, r2
 800347a:	0019      	movs	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	4b29      	ldr	r3, [pc, #164]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003482:	430a      	orrs	r2, r1
 8003484:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2202      	movs	r2, #2
 800348c:	4013      	ands	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003490:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003494:	220c      	movs	r2, #12
 8003496:	4393      	bics	r3, r2
 8003498:	0019      	movs	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034a0:	430a      	orrs	r2, r1
 80034a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2204      	movs	r2, #4
 80034aa:	4013      	ands	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b2:	4a24      	ldr	r2, [pc, #144]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	0019      	movs	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034be:	430a      	orrs	r2, r1
 80034c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2208      	movs	r2, #8
 80034c8:	4013      	ands	r3, r2
 80034ca:	d009      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034dc:	430a      	orrs	r2, r1
 80034de:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	4013      	ands	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ea:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	4a17      	ldr	r2, [pc, #92]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1a      	ldr	r2, [r3, #32]
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80034fa:	430a      	orrs	r2, r1
 80034fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	4013      	ands	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	4a10      	ldr	r2, [pc, #64]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800350e:	4013      	ands	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003518:	430a      	orrs	r2, r1
 800351a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b006      	add	sp, #24
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	40021000 	.word	0x40021000
 800352c:	40007000 	.word	0x40007000
 8003530:	fffcffff 	.word	0xfffcffff
 8003534:	fff7ffff 	.word	0xfff7ffff
 8003538:	00001388 	.word	0x00001388
 800353c:	ffcfffff 	.word	0xffcfffff
 8003540:	efffffff 	.word	0xefffffff
 8003544:	fffff3ff 	.word	0xfffff3ff
 8003548:	ffffcfff 	.word	0xffffcfff
 800354c:	fbffffff 	.word	0xfbffffff
 8003550:	fff3ffff 	.word	0xfff3ffff

08003554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e044      	b.n	80035f0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2274      	movs	r2, #116	; 0x74
 8003572:	2100      	movs	r1, #0
 8003574:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f7fe fab3 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2224      	movs	r2, #36	; 0x24
 8003582:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2101      	movs	r1, #1
 8003590:	438a      	bics	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	0018      	movs	r0, r3
 8003598:	f000 f8d8 	bl	800374c <UART_SetConfig>
 800359c:	0003      	movs	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e024      	b.n	80035f0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 fb4f 	bl	8003c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	490d      	ldr	r1, [pc, #52]	; (80035f8 <HAL_UART_Init+0xa4>)
 80035c2:	400a      	ands	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	212a      	movs	r1, #42	; 0x2a
 80035d2:	438a      	bics	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 fbe7 	bl	8003dbc <UART_CheckIdleState>
 80035ee:	0003      	movs	r3, r0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	ffffb7ff 	.word	0xffffb7ff

080035fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	1dbb      	adds	r3, r7, #6
 800360a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003610:	2b20      	cmp	r3, #32
 8003612:	d000      	beq.n	8003616 <HAL_UART_Transmit+0x1a>
 8003614:	e095      	b.n	8003742 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_UART_Transmit+0x28>
 800361c:	1dbb      	adds	r3, r7, #6
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e08d      	b.n	8003744 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	015b      	lsls	r3, r3, #5
 8003630:	429a      	cmp	r2, r3
 8003632:	d109      	bne.n	8003648 <HAL_UART_Transmit+0x4c>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2201      	movs	r2, #1
 8003640:	4013      	ands	r3, r2
 8003642:	d001      	beq.n	8003648 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e07d      	b.n	8003744 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2274      	movs	r2, #116	; 0x74
 800364c:	5c9b      	ldrb	r3, [r3, r2]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_UART_Transmit+0x5a>
 8003652:	2302      	movs	r3, #2
 8003654:	e076      	b.n	8003744 <HAL_UART_Transmit+0x148>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2274      	movs	r2, #116	; 0x74
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2280      	movs	r2, #128	; 0x80
 8003662:	2100      	movs	r1, #0
 8003664:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2221      	movs	r2, #33	; 0x21
 800366a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800366c:	f7fe fdaa 	bl	80021c4 <HAL_GetTick>
 8003670:	0003      	movs	r3, r0
 8003672:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1dba      	adds	r2, r7, #6
 8003678:	2150      	movs	r1, #80	; 0x50
 800367a:	8812      	ldrh	r2, [r2, #0]
 800367c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1dba      	adds	r2, r7, #6
 8003682:	2152      	movs	r1, #82	; 0x52
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	015b      	lsls	r3, r3, #5
 8003690:	429a      	cmp	r2, r3
 8003692:	d108      	bne.n	80036a6 <HAL_UART_Transmit+0xaa>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	e003      	b.n	80036ae <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2274      	movs	r2, #116	; 0x74
 80036b2:	2100      	movs	r1, #0
 80036b4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80036b6:	e02c      	b.n	8003712 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	0013      	movs	r3, r2
 80036c2:	2200      	movs	r2, #0
 80036c4:	2180      	movs	r1, #128	; 0x80
 80036c6:	f000 fbc1 	bl	8003e4c <UART_WaitOnFlagUntilTimeout>
 80036ca:	1e03      	subs	r3, r0, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e038      	b.n	8003744 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10b      	bne.n	80036f0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	001a      	movs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	05d2      	lsls	r2, r2, #23
 80036e4:	0dd2      	lsrs	r2, r2, #23
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	3302      	adds	r3, #2
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e007      	b.n	8003700 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	781a      	ldrb	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3301      	adds	r3, #1
 80036fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2252      	movs	r2, #82	; 0x52
 8003704:	5a9b      	ldrh	r3, [r3, r2]
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b299      	uxth	r1, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2252      	movs	r2, #82	; 0x52
 8003710:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2252      	movs	r2, #82	; 0x52
 8003716:	5a9b      	ldrh	r3, [r3, r2]
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1cc      	bne.n	80036b8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	0013      	movs	r3, r2
 8003728:	2200      	movs	r2, #0
 800372a:	2140      	movs	r1, #64	; 0x40
 800372c:	f000 fb8e 	bl	8003e4c <UART_WaitOnFlagUntilTimeout>
 8003730:	1e03      	subs	r3, r0, #0
 8003732:	d001      	beq.n	8003738 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e005      	b.n	8003744 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003742:	2302      	movs	r3, #2
  }
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b008      	add	sp, #32
 800374a:	bd80      	pop	{r7, pc}

0800374c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b08e      	sub	sp, #56	; 0x38
 8003750:	af00      	add	r7, sp, #0
 8003752:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003754:	231a      	movs	r3, #26
 8003756:	2218      	movs	r2, #24
 8003758:	189b      	adds	r3, r3, r2
 800375a:	19db      	adds	r3, r3, r7
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	431a      	orrs	r2, r3
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	431a      	orrs	r2, r3
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	4313      	orrs	r3, r2
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4ac6      	ldr	r2, [pc, #792]	; (8003a98 <UART_SetConfig+0x34c>)
 8003780:	4013      	ands	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800378a:	430a      	orrs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4ac1      	ldr	r2, [pc, #772]	; (8003a9c <UART_SetConfig+0x350>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4abb      	ldr	r2, [pc, #748]	; (8003aa0 <UART_SetConfig+0x354>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037bc:	4313      	orrs	r3, r2
 80037be:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	4ab7      	ldr	r2, [pc, #732]	; (8003aa4 <UART_SetConfig+0x358>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	0019      	movs	r1, r3
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4ab3      	ldr	r2, [pc, #716]	; (8003aa8 <UART_SetConfig+0x35c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d131      	bne.n	8003844 <UART_SetConfig+0xf8>
 80037e0:	4bb2      	ldr	r3, [pc, #712]	; (8003aac <UART_SetConfig+0x360>)
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	2203      	movs	r2, #3
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d01d      	beq.n	8003828 <UART_SetConfig+0xdc>
 80037ec:	d823      	bhi.n	8003836 <UART_SetConfig+0xea>
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d00c      	beq.n	800380c <UART_SetConfig+0xc0>
 80037f2:	d820      	bhi.n	8003836 <UART_SetConfig+0xea>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <UART_SetConfig+0xb2>
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d00e      	beq.n	800381a <UART_SetConfig+0xce>
 80037fc:	e01b      	b.n	8003836 <UART_SetConfig+0xea>
 80037fe:	231b      	movs	r3, #27
 8003800:	2218      	movs	r2, #24
 8003802:	189b      	adds	r3, r3, r2
 8003804:	19db      	adds	r3, r3, r7
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e09c      	b.n	8003946 <UART_SetConfig+0x1fa>
 800380c:	231b      	movs	r3, #27
 800380e:	2218      	movs	r2, #24
 8003810:	189b      	adds	r3, r3, r2
 8003812:	19db      	adds	r3, r3, r7
 8003814:	2202      	movs	r2, #2
 8003816:	701a      	strb	r2, [r3, #0]
 8003818:	e095      	b.n	8003946 <UART_SetConfig+0x1fa>
 800381a:	231b      	movs	r3, #27
 800381c:	2218      	movs	r2, #24
 800381e:	189b      	adds	r3, r3, r2
 8003820:	19db      	adds	r3, r3, r7
 8003822:	2204      	movs	r2, #4
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	e08e      	b.n	8003946 <UART_SetConfig+0x1fa>
 8003828:	231b      	movs	r3, #27
 800382a:	2218      	movs	r2, #24
 800382c:	189b      	adds	r3, r3, r2
 800382e:	19db      	adds	r3, r3, r7
 8003830:	2208      	movs	r2, #8
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e087      	b.n	8003946 <UART_SetConfig+0x1fa>
 8003836:	231b      	movs	r3, #27
 8003838:	2218      	movs	r2, #24
 800383a:	189b      	adds	r3, r3, r2
 800383c:	19db      	adds	r3, r3, r7
 800383e:	2210      	movs	r2, #16
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e080      	b.n	8003946 <UART_SetConfig+0x1fa>
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a99      	ldr	r2, [pc, #612]	; (8003ab0 <UART_SetConfig+0x364>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d131      	bne.n	80038b2 <UART_SetConfig+0x166>
 800384e:	4b97      	ldr	r3, [pc, #604]	; (8003aac <UART_SetConfig+0x360>)
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	220c      	movs	r2, #12
 8003854:	4013      	ands	r3, r2
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d01d      	beq.n	8003896 <UART_SetConfig+0x14a>
 800385a:	d823      	bhi.n	80038a4 <UART_SetConfig+0x158>
 800385c:	2b08      	cmp	r3, #8
 800385e:	d00c      	beq.n	800387a <UART_SetConfig+0x12e>
 8003860:	d820      	bhi.n	80038a4 <UART_SetConfig+0x158>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <UART_SetConfig+0x120>
 8003866:	2b04      	cmp	r3, #4
 8003868:	d00e      	beq.n	8003888 <UART_SetConfig+0x13c>
 800386a:	e01b      	b.n	80038a4 <UART_SetConfig+0x158>
 800386c:	231b      	movs	r3, #27
 800386e:	2218      	movs	r2, #24
 8003870:	189b      	adds	r3, r3, r2
 8003872:	19db      	adds	r3, r3, r7
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	e065      	b.n	8003946 <UART_SetConfig+0x1fa>
 800387a:	231b      	movs	r3, #27
 800387c:	2218      	movs	r2, #24
 800387e:	189b      	adds	r3, r3, r2
 8003880:	19db      	adds	r3, r3, r7
 8003882:	2202      	movs	r2, #2
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	e05e      	b.n	8003946 <UART_SetConfig+0x1fa>
 8003888:	231b      	movs	r3, #27
 800388a:	2218      	movs	r2, #24
 800388c:	189b      	adds	r3, r3, r2
 800388e:	19db      	adds	r3, r3, r7
 8003890:	2204      	movs	r2, #4
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	e057      	b.n	8003946 <UART_SetConfig+0x1fa>
 8003896:	231b      	movs	r3, #27
 8003898:	2218      	movs	r2, #24
 800389a:	189b      	adds	r3, r3, r2
 800389c:	19db      	adds	r3, r3, r7
 800389e:	2208      	movs	r2, #8
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e050      	b.n	8003946 <UART_SetConfig+0x1fa>
 80038a4:	231b      	movs	r3, #27
 80038a6:	2218      	movs	r2, #24
 80038a8:	189b      	adds	r3, r3, r2
 80038aa:	19db      	adds	r3, r3, r7
 80038ac:	2210      	movs	r2, #16
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	e049      	b.n	8003946 <UART_SetConfig+0x1fa>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7a      	ldr	r2, [pc, #488]	; (8003aa0 <UART_SetConfig+0x354>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d13e      	bne.n	800393a <UART_SetConfig+0x1ee>
 80038bc:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <UART_SetConfig+0x360>)
 80038be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038c0:	23c0      	movs	r3, #192	; 0xc0
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	4013      	ands	r3, r2
 80038c6:	22c0      	movs	r2, #192	; 0xc0
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d027      	beq.n	800391e <UART_SetConfig+0x1d2>
 80038ce:	22c0      	movs	r2, #192	; 0xc0
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d82a      	bhi.n	800392c <UART_SetConfig+0x1e0>
 80038d6:	2280      	movs	r2, #128	; 0x80
 80038d8:	0112      	lsls	r2, r2, #4
 80038da:	4293      	cmp	r3, r2
 80038dc:	d011      	beq.n	8003902 <UART_SetConfig+0x1b6>
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	0112      	lsls	r2, r2, #4
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d822      	bhi.n	800392c <UART_SetConfig+0x1e0>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <UART_SetConfig+0x1a8>
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	00d2      	lsls	r2, r2, #3
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <UART_SetConfig+0x1c4>
 80038f2:	e01b      	b.n	800392c <UART_SetConfig+0x1e0>
 80038f4:	231b      	movs	r3, #27
 80038f6:	2218      	movs	r2, #24
 80038f8:	189b      	adds	r3, r3, r2
 80038fa:	19db      	adds	r3, r3, r7
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	e021      	b.n	8003946 <UART_SetConfig+0x1fa>
 8003902:	231b      	movs	r3, #27
 8003904:	2218      	movs	r2, #24
 8003906:	189b      	adds	r3, r3, r2
 8003908:	19db      	adds	r3, r3, r7
 800390a:	2202      	movs	r2, #2
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e01a      	b.n	8003946 <UART_SetConfig+0x1fa>
 8003910:	231b      	movs	r3, #27
 8003912:	2218      	movs	r2, #24
 8003914:	189b      	adds	r3, r3, r2
 8003916:	19db      	adds	r3, r3, r7
 8003918:	2204      	movs	r2, #4
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e013      	b.n	8003946 <UART_SetConfig+0x1fa>
 800391e:	231b      	movs	r3, #27
 8003920:	2218      	movs	r2, #24
 8003922:	189b      	adds	r3, r3, r2
 8003924:	19db      	adds	r3, r3, r7
 8003926:	2208      	movs	r2, #8
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e00c      	b.n	8003946 <UART_SetConfig+0x1fa>
 800392c:	231b      	movs	r3, #27
 800392e:	2218      	movs	r2, #24
 8003930:	189b      	adds	r3, r3, r2
 8003932:	19db      	adds	r3, r3, r7
 8003934:	2210      	movs	r2, #16
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	e005      	b.n	8003946 <UART_SetConfig+0x1fa>
 800393a:	231b      	movs	r3, #27
 800393c:	2218      	movs	r2, #24
 800393e:	189b      	adds	r3, r3, r2
 8003940:	19db      	adds	r3, r3, r7
 8003942:	2210      	movs	r2, #16
 8003944:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a55      	ldr	r2, [pc, #340]	; (8003aa0 <UART_SetConfig+0x354>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d000      	beq.n	8003952 <UART_SetConfig+0x206>
 8003950:	e084      	b.n	8003a5c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003952:	231b      	movs	r3, #27
 8003954:	2218      	movs	r2, #24
 8003956:	189b      	adds	r3, r3, r2
 8003958:	19db      	adds	r3, r3, r7
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d01d      	beq.n	800399c <UART_SetConfig+0x250>
 8003960:	dc20      	bgt.n	80039a4 <UART_SetConfig+0x258>
 8003962:	2b04      	cmp	r3, #4
 8003964:	d015      	beq.n	8003992 <UART_SetConfig+0x246>
 8003966:	dc1d      	bgt.n	80039a4 <UART_SetConfig+0x258>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <UART_SetConfig+0x226>
 800396c:	2b02      	cmp	r3, #2
 800396e:	d005      	beq.n	800397c <UART_SetConfig+0x230>
 8003970:	e018      	b.n	80039a4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003972:	f7ff fc5f 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 8003976:	0003      	movs	r3, r0
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800397a:	e01c      	b.n	80039b6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <UART_SetConfig+0x360>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2210      	movs	r2, #16
 8003982:	4013      	ands	r3, r2
 8003984:	d002      	beq.n	800398c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003986:	4b4b      	ldr	r3, [pc, #300]	; (8003ab4 <UART_SetConfig+0x368>)
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800398a:	e014      	b.n	80039b6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800398c:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <UART_SetConfig+0x36c>)
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003990:	e011      	b.n	80039b6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003992:	f7ff fb9f 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8003996:	0003      	movs	r3, r0
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800399a:	e00c      	b.n	80039b6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80039a2:	e008      	b.n	80039b6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80039a8:	231a      	movs	r3, #26
 80039aa:	2218      	movs	r2, #24
 80039ac:	189b      	adds	r3, r3, r2
 80039ae:	19db      	adds	r3, r3, r7
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
        break;
 80039b4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d100      	bne.n	80039be <UART_SetConfig+0x272>
 80039bc:	e133      	b.n	8003c26 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	0013      	movs	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d305      	bcc.n	80039da <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d906      	bls.n	80039e8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80039da:	231a      	movs	r3, #26
 80039dc:	2218      	movs	r2, #24
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	19db      	adds	r3, r3, r7
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e11e      	b.n	8003c26 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	6939      	ldr	r1, [r7, #16]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	000b      	movs	r3, r1
 80039f6:	0e1b      	lsrs	r3, r3, #24
 80039f8:	0010      	movs	r0, r2
 80039fa:	0205      	lsls	r5, r0, #8
 80039fc:	431d      	orrs	r5, r3
 80039fe:	000b      	movs	r3, r1
 8003a00:	021c      	lsls	r4, r3, #8
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68b8      	ldr	r0, [r7, #8]
 8003a10:	68f9      	ldr	r1, [r7, #12]
 8003a12:	1900      	adds	r0, r0, r4
 8003a14:	4169      	adcs	r1, r5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f7fc fc06 	bl	8000234 <__aeabi_uldivmod>
 8003a28:	0002      	movs	r2, r0
 8003a2a:	000b      	movs	r3, r1
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a32:	23c0      	movs	r3, #192	; 0xc0
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d309      	bcc.n	8003a4e <UART_SetConfig+0x302>
 8003a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	035b      	lsls	r3, r3, #13
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d204      	bcs.n	8003a4e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	e0eb      	b.n	8003c26 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8003a4e:	231a      	movs	r3, #26
 8003a50:	2218      	movs	r2, #24
 8003a52:	189b      	adds	r3, r3, r2
 8003a54:	19db      	adds	r3, r3, r7
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e0e4      	b.n	8003c26 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d000      	beq.n	8003a6a <UART_SetConfig+0x31e>
 8003a68:	e086      	b.n	8003b78 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8003a6a:	231b      	movs	r3, #27
 8003a6c:	2218      	movs	r2, #24
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	19db      	adds	r3, r3, r7
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d837      	bhi.n	8003ae8 <UART_SetConfig+0x39c>
 8003a78:	009a      	lsls	r2, r3, #2
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <UART_SetConfig+0x370>)
 8003a7c:	18d3      	adds	r3, r2, r3
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a82:	f7ff fbd7 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 8003a86:	0003      	movs	r3, r0
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a8a:	e036      	b.n	8003afa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a8c:	f7ff fbe8 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8003a90:	0003      	movs	r3, r0
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a94:	e031      	b.n	8003afa <UART_SetConfig+0x3ae>
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	efff69f3 	.word	0xefff69f3
 8003a9c:	ffffcfff 	.word	0xffffcfff
 8003aa0:	40004800 	.word	0x40004800
 8003aa4:	fffff4ff 	.word	0xfffff4ff
 8003aa8:	40013800 	.word	0x40013800
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40004400 	.word	0x40004400
 8003ab4:	003d0900 	.word	0x003d0900
 8003ab8:	00f42400 	.word	0x00f42400
 8003abc:	08005708 	.word	0x08005708
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ac0:	4b60      	ldr	r3, [pc, #384]	; (8003c44 <UART_SetConfig+0x4f8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d002      	beq.n	8003ad0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003aca:	4b5f      	ldr	r3, [pc, #380]	; (8003c48 <UART_SetConfig+0x4fc>)
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ace:	e014      	b.n	8003afa <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003ad0:	4b5e      	ldr	r3, [pc, #376]	; (8003c4c <UART_SetConfig+0x500>)
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ad4:	e011      	b.n	8003afa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad6:	f7ff fafd 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8003ada:	0003      	movs	r3, r0
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ade:	e00c      	b.n	8003afa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ae6:	e008      	b.n	8003afa <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003aec:	231a      	movs	r3, #26
 8003aee:	2218      	movs	r2, #24
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	19db      	adds	r3, r3, r7
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
        break;
 8003af8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d100      	bne.n	8003b02 <UART_SetConfig+0x3b6>
 8003b00:	e091      	b.n	8003c26 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	005a      	lsls	r2, r3, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	18d2      	adds	r2, r2, r3
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	0019      	movs	r1, r3
 8003b14:	0010      	movs	r0, r2
 8003b16:	f7fc fb01 	bl	800011c <__udivsi3>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	d921      	bls.n	8003b6a <UART_SetConfig+0x41e>
 8003b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	025b      	lsls	r3, r3, #9
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d21c      	bcs.n	8003b6a <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	200e      	movs	r0, #14
 8003b36:	2418      	movs	r4, #24
 8003b38:	1903      	adds	r3, r0, r4
 8003b3a:	19db      	adds	r3, r3, r7
 8003b3c:	210f      	movs	r1, #15
 8003b3e:	438a      	bics	r2, r1
 8003b40:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2207      	movs	r2, #7
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b299      	uxth	r1, r3
 8003b4e:	1903      	adds	r3, r0, r4
 8003b50:	19db      	adds	r3, r3, r7
 8003b52:	1902      	adds	r2, r0, r4
 8003b54:	19d2      	adds	r2, r2, r7
 8003b56:	8812      	ldrh	r2, [r2, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	1902      	adds	r2, r0, r4
 8003b62:	19d2      	adds	r2, r2, r7
 8003b64:	8812      	ldrh	r2, [r2, #0]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	e05d      	b.n	8003c26 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8003b6a:	231a      	movs	r3, #26
 8003b6c:	2218      	movs	r2, #24
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	19db      	adds	r3, r3, r7
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	e056      	b.n	8003c26 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b78:	231b      	movs	r3, #27
 8003b7a:	2218      	movs	r2, #24
 8003b7c:	189b      	adds	r3, r3, r2
 8003b7e:	19db      	adds	r3, r3, r7
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d822      	bhi.n	8003bcc <UART_SetConfig+0x480>
 8003b86:	009a      	lsls	r2, r3, #2
 8003b88:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <UART_SetConfig+0x504>)
 8003b8a:	18d3      	adds	r3, r2, r3
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b90:	f7ff fb50 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 8003b94:	0003      	movs	r3, r0
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b98:	e021      	b.n	8003bde <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b9a:	f7ff fb61 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ba2:	e01c      	b.n	8003bde <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ba4:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <UART_SetConfig+0x4f8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2210      	movs	r2, #16
 8003baa:	4013      	ands	r3, r2
 8003bac:	d002      	beq.n	8003bb4 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003bae:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <UART_SetConfig+0x4fc>)
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003bb2:	e014      	b.n	8003bde <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <UART_SetConfig+0x500>)
 8003bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bb8:	e011      	b.n	8003bde <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bba:	f7ff fa8b 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bc2:	e00c      	b.n	8003bde <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bca:	e008      	b.n	8003bde <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003bd0:	231a      	movs	r3, #26
 8003bd2:	2218      	movs	r2, #24
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
        break;
 8003bdc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	085a      	lsrs	r2, r3, #1
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	18d2      	adds	r2, r2, r3
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	0010      	movs	r0, r2
 8003bf6:	f7fc fa91 	bl	800011c <__udivsi3>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	2b0f      	cmp	r3, #15
 8003c04:	d909      	bls.n	8003c1a <UART_SetConfig+0x4ce>
 8003c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c08:	2380      	movs	r3, #128	; 0x80
 8003c0a:	025b      	lsls	r3, r3, #9
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d204      	bcs.n	8003c1a <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c16:	60da      	str	r2, [r3, #12]
 8003c18:	e005      	b.n	8003c26 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8003c1a:	231a      	movs	r3, #26
 8003c1c:	2218      	movs	r2, #24
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	19db      	adds	r3, r3, r7
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c32:	231a      	movs	r3, #26
 8003c34:	2218      	movs	r2, #24
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	19db      	adds	r3, r3, r7
 8003c3a:	781b      	ldrb	r3, [r3, #0]
}
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b00e      	add	sp, #56	; 0x38
 8003c42:	bdb0      	pop	{r4, r5, r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	003d0900 	.word	0x003d0900
 8003c4c:	00f42400 	.word	0x00f42400
 8003c50:	0800572c 	.word	0x0800572c

08003c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	2201      	movs	r2, #1
 8003c62:	4013      	ands	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a4a      	ldr	r2, [pc, #296]	; (8003d98 <UART_AdvFeatureConfig+0x144>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	0019      	movs	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2202      	movs	r2, #2
 8003c84:	4013      	ands	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a43      	ldr	r2, [pc, #268]	; (8003d9c <UART_AdvFeatureConfig+0x148>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a3b      	ldr	r2, [pc, #236]	; (8003da0 <UART_AdvFeatureConfig+0x14c>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d00b      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <UART_AdvFeatureConfig+0x150>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	2210      	movs	r2, #16
 8003cea:	4013      	ands	r3, r2
 8003cec:	d00b      	beq.n	8003d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a2c      	ldr	r2, [pc, #176]	; (8003da8 <UART_AdvFeatureConfig+0x154>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d00b      	beq.n	8003d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4a25      	ldr	r2, [pc, #148]	; (8003dac <UART_AdvFeatureConfig+0x158>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2240      	movs	r2, #64	; 0x40
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d01d      	beq.n	8003d6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <UART_AdvFeatureConfig+0x15c>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	035b      	lsls	r3, r3, #13
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d10b      	bne.n	8003d6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <UART_AdvFeatureConfig+0x160>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	0019      	movs	r1, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2280      	movs	r2, #128	; 0x80
 8003d74:	4013      	ands	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <UART_AdvFeatureConfig+0x164>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	0019      	movs	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	fffdffff 	.word	0xfffdffff
 8003d9c:	fffeffff 	.word	0xfffeffff
 8003da0:	fffbffff 	.word	0xfffbffff
 8003da4:	ffff7fff 	.word	0xffff7fff
 8003da8:	ffffefff 	.word	0xffffefff
 8003dac:	ffffdfff 	.word	0xffffdfff
 8003db0:	ffefffff 	.word	0xffefffff
 8003db4:	ff9fffff 	.word	0xff9fffff
 8003db8:	fff7ffff 	.word	0xfff7ffff

08003dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	2100      	movs	r1, #0
 8003dca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dcc:	f7fe f9fa 	bl	80021c4 <HAL_GetTick>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2208      	movs	r2, #8
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d10c      	bne.n	8003dfc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	0391      	lsls	r1, r2, #14
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <UART_CheckIdleState+0x8c>)
 8003dec:	9200      	str	r2, [sp, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f000 f82c 	bl	8003e4c <UART_WaitOnFlagUntilTimeout>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d001      	beq.n	8003dfc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e021      	b.n	8003e40 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2204      	movs	r2, #4
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d10c      	bne.n	8003e24 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	03d1      	lsls	r1, r2, #15
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4a0d      	ldr	r2, [pc, #52]	; (8003e48 <UART_CheckIdleState+0x8c>)
 8003e14:	9200      	str	r2, [sp, #0]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f000 f818 	bl	8003e4c <UART_WaitOnFlagUntilTimeout>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d001      	beq.n	8003e24 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e00d      	b.n	8003e40 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2274      	movs	r2, #116	; 0x74
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b004      	add	sp, #16
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	01ffffff 	.word	0x01ffffff

08003e4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b094      	sub	sp, #80	; 0x50
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	1dfb      	adds	r3, r7, #7
 8003e5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5c:	e0a3      	b.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e60:	3301      	adds	r3, #1
 8003e62:	d100      	bne.n	8003e66 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003e64:	e09f      	b.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e66:	f7fe f9ad 	bl	80021c4 <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d302      	bcc.n	8003e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d13d      	bne.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
 8003e86:	2301      	movs	r3, #1
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	f383 8810 	msr	PRIMASK, r3
}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	494c      	ldr	r1, [pc, #304]	; (8003fd0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	f383 8810 	msr	PRIMASK, r3
}
 8003eac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eae:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb8:	2301      	movs	r3, #1
 8003eba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	f383 8810 	msr	PRIMASK, r3
}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2101      	movs	r1, #1
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2274      	movs	r2, #116	; 0x74
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e067      	b.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2204      	movs	r2, #4
 8003f00:	4013      	ands	r3, r2
 8003f02:	d050      	beq.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	401a      	ands	r2, r3
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d146      	bne.n	8003fa6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2280      	movs	r2, #128	; 0x80
 8003f1e:	0112      	lsls	r2, r2, #4
 8003f20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f22:	f3ef 8310 	mrs	r3, PRIMASK
 8003f26:	613b      	str	r3, [r7, #16]
  return(result);
 8003f28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f383 8810 	msr	PRIMASK, r3
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4923      	ldr	r1, [pc, #140]	; (8003fd0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003f44:	400a      	ands	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f383 8810 	msr	PRIMASK, r3
}
 8003f52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f54:	f3ef 8310 	mrs	r3, PRIMASK
 8003f58:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f5e:	2301      	movs	r3, #1
 8003f60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f383 8810 	msr	PRIMASK, r3
}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2101      	movs	r1, #1
 8003f76:	438a      	bics	r2, r1
 8003f78:	609a      	str	r2, [r3, #8]
 8003f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	f383 8810 	msr	PRIMASK, r3
}
 8003f84:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2280      	movs	r2, #128	; 0x80
 8003f96:	2120      	movs	r1, #32
 8003f98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2274      	movs	r2, #116	; 0x74
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e010      	b.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	425a      	negs	r2, r3
 8003fb6:	4153      	adcs	r3, r2
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	001a      	movs	r2, r3
 8003fbc:	1dfb      	adds	r3, r7, #7
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d100      	bne.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003fc4:	e74b      	b.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	0018      	movs	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b014      	add	sp, #80	; 0x50
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	fffffe5f 	.word	0xfffffe5f

08003fd4 <__errno>:
 8003fd4:	4b01      	ldr	r3, [pc, #4]	; (8003fdc <__errno+0x8>)
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	4770      	bx	lr
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	20000030 	.word	0x20000030

08003fe0 <__libc_init_array>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	2600      	movs	r6, #0
 8003fe4:	4d0c      	ldr	r5, [pc, #48]	; (8004018 <__libc_init_array+0x38>)
 8003fe6:	4c0d      	ldr	r4, [pc, #52]	; (800401c <__libc_init_array+0x3c>)
 8003fe8:	1b64      	subs	r4, r4, r5
 8003fea:	10a4      	asrs	r4, r4, #2
 8003fec:	42a6      	cmp	r6, r4
 8003fee:	d109      	bne.n	8004004 <__libc_init_array+0x24>
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	f001 f87f 	bl	80050f4 <_init>
 8003ff6:	4d0a      	ldr	r5, [pc, #40]	; (8004020 <__libc_init_array+0x40>)
 8003ff8:	4c0a      	ldr	r4, [pc, #40]	; (8004024 <__libc_init_array+0x44>)
 8003ffa:	1b64      	subs	r4, r4, r5
 8003ffc:	10a4      	asrs	r4, r4, #2
 8003ffe:	42a6      	cmp	r6, r4
 8004000:	d105      	bne.n	800400e <__libc_init_array+0x2e>
 8004002:	bd70      	pop	{r4, r5, r6, pc}
 8004004:	00b3      	lsls	r3, r6, #2
 8004006:	58eb      	ldr	r3, [r5, r3]
 8004008:	4798      	blx	r3
 800400a:	3601      	adds	r6, #1
 800400c:	e7ee      	b.n	8003fec <__libc_init_array+0xc>
 800400e:	00b3      	lsls	r3, r6, #2
 8004010:	58eb      	ldr	r3, [r5, r3]
 8004012:	4798      	blx	r3
 8004014:	3601      	adds	r6, #1
 8004016:	e7f2      	b.n	8003ffe <__libc_init_array+0x1e>
 8004018:	080057f0 	.word	0x080057f0
 800401c:	080057f0 	.word	0x080057f0
 8004020:	080057f0 	.word	0x080057f0
 8004024:	080057f4 	.word	0x080057f4

08004028 <memcpy>:
 8004028:	2300      	movs	r3, #0
 800402a:	b510      	push	{r4, lr}
 800402c:	429a      	cmp	r2, r3
 800402e:	d100      	bne.n	8004032 <memcpy+0xa>
 8004030:	bd10      	pop	{r4, pc}
 8004032:	5ccc      	ldrb	r4, [r1, r3]
 8004034:	54c4      	strb	r4, [r0, r3]
 8004036:	3301      	adds	r3, #1
 8004038:	e7f8      	b.n	800402c <memcpy+0x4>

0800403a <memset>:
 800403a:	0003      	movs	r3, r0
 800403c:	1882      	adds	r2, r0, r2
 800403e:	4293      	cmp	r3, r2
 8004040:	d100      	bne.n	8004044 <memset+0xa>
 8004042:	4770      	bx	lr
 8004044:	7019      	strb	r1, [r3, #0]
 8004046:	3301      	adds	r3, #1
 8004048:	e7f9      	b.n	800403e <memset+0x4>
	...

0800404c <iprintf>:
 800404c:	b40f      	push	{r0, r1, r2, r3}
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <iprintf+0x30>)
 8004050:	b513      	push	{r0, r1, r4, lr}
 8004052:	681c      	ldr	r4, [r3, #0]
 8004054:	2c00      	cmp	r4, #0
 8004056:	d005      	beq.n	8004064 <iprintf+0x18>
 8004058:	69a3      	ldr	r3, [r4, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <iprintf+0x18>
 800405e:	0020      	movs	r0, r4
 8004060:	f000 fa86 	bl	8004570 <__sinit>
 8004064:	ab05      	add	r3, sp, #20
 8004066:	0020      	movs	r0, r4
 8004068:	9a04      	ldr	r2, [sp, #16]
 800406a:	68a1      	ldr	r1, [r4, #8]
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	f000 fc99 	bl	80049a4 <_vfiprintf_r>
 8004072:	bc16      	pop	{r1, r2, r4}
 8004074:	bc08      	pop	{r3}
 8004076:	b004      	add	sp, #16
 8004078:	4718      	bx	r3
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	20000030 	.word	0x20000030

08004080 <_puts_r>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	0005      	movs	r5, r0
 8004084:	000e      	movs	r6, r1
 8004086:	2800      	cmp	r0, #0
 8004088:	d004      	beq.n	8004094 <_puts_r+0x14>
 800408a:	6983      	ldr	r3, [r0, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <_puts_r+0x14>
 8004090:	f000 fa6e 	bl	8004570 <__sinit>
 8004094:	69ab      	ldr	r3, [r5, #24]
 8004096:	68ac      	ldr	r4, [r5, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <_puts_r+0x22>
 800409c:	0028      	movs	r0, r5
 800409e:	f000 fa67 	bl	8004570 <__sinit>
 80040a2:	4b2d      	ldr	r3, [pc, #180]	; (8004158 <_puts_r+0xd8>)
 80040a4:	429c      	cmp	r4, r3
 80040a6:	d122      	bne.n	80040ee <_puts_r+0x6e>
 80040a8:	686c      	ldr	r4, [r5, #4]
 80040aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040ac:	07db      	lsls	r3, r3, #31
 80040ae:	d405      	bmi.n	80040bc <_puts_r+0x3c>
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	059b      	lsls	r3, r3, #22
 80040b4:	d402      	bmi.n	80040bc <_puts_r+0x3c>
 80040b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040b8:	f000 fafb 	bl	80046b2 <__retarget_lock_acquire_recursive>
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	071b      	lsls	r3, r3, #28
 80040c0:	d502      	bpl.n	80040c8 <_puts_r+0x48>
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d129      	bne.n	800411c <_puts_r+0x9c>
 80040c8:	0021      	movs	r1, r4
 80040ca:	0028      	movs	r0, r5
 80040cc:	f000 f8aa 	bl	8004224 <__swsetup_r>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	d023      	beq.n	800411c <_puts_r+0x9c>
 80040d4:	2501      	movs	r5, #1
 80040d6:	426d      	negs	r5, r5
 80040d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040da:	07db      	lsls	r3, r3, #31
 80040dc:	d405      	bmi.n	80040ea <_puts_r+0x6a>
 80040de:	89a3      	ldrh	r3, [r4, #12]
 80040e0:	059b      	lsls	r3, r3, #22
 80040e2:	d402      	bmi.n	80040ea <_puts_r+0x6a>
 80040e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040e6:	f000 fae5 	bl	80046b4 <__retarget_lock_release_recursive>
 80040ea:	0028      	movs	r0, r5
 80040ec:	bd70      	pop	{r4, r5, r6, pc}
 80040ee:	4b1b      	ldr	r3, [pc, #108]	; (800415c <_puts_r+0xdc>)
 80040f0:	429c      	cmp	r4, r3
 80040f2:	d101      	bne.n	80040f8 <_puts_r+0x78>
 80040f4:	68ac      	ldr	r4, [r5, #8]
 80040f6:	e7d8      	b.n	80040aa <_puts_r+0x2a>
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <_puts_r+0xe0>)
 80040fa:	429c      	cmp	r4, r3
 80040fc:	d1d5      	bne.n	80040aa <_puts_r+0x2a>
 80040fe:	68ec      	ldr	r4, [r5, #12]
 8004100:	e7d3      	b.n	80040aa <_puts_r+0x2a>
 8004102:	3601      	adds	r6, #1
 8004104:	60a3      	str	r3, [r4, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	da04      	bge.n	8004114 <_puts_r+0x94>
 800410a:	69a2      	ldr	r2, [r4, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	dc16      	bgt.n	800413e <_puts_r+0xbe>
 8004110:	290a      	cmp	r1, #10
 8004112:	d014      	beq.n	800413e <_puts_r+0xbe>
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	6022      	str	r2, [r4, #0]
 800411a:	7019      	strb	r1, [r3, #0]
 800411c:	68a3      	ldr	r3, [r4, #8]
 800411e:	7831      	ldrb	r1, [r6, #0]
 8004120:	3b01      	subs	r3, #1
 8004122:	2900      	cmp	r1, #0
 8004124:	d1ed      	bne.n	8004102 <_puts_r+0x82>
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	da0f      	bge.n	800414c <_puts_r+0xcc>
 800412c:	0028      	movs	r0, r5
 800412e:	0022      	movs	r2, r4
 8004130:	310a      	adds	r1, #10
 8004132:	f000 f821 	bl	8004178 <__swbuf_r>
 8004136:	250a      	movs	r5, #10
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d1cd      	bne.n	80040d8 <_puts_r+0x58>
 800413c:	e7ca      	b.n	80040d4 <_puts_r+0x54>
 800413e:	0022      	movs	r2, r4
 8004140:	0028      	movs	r0, r5
 8004142:	f000 f819 	bl	8004178 <__swbuf_r>
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	d1e8      	bne.n	800411c <_puts_r+0x9c>
 800414a:	e7c3      	b.n	80040d4 <_puts_r+0x54>
 800414c:	250a      	movs	r5, #10
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	6022      	str	r2, [r4, #0]
 8004154:	701d      	strb	r5, [r3, #0]
 8004156:	e7bf      	b.n	80040d8 <_puts_r+0x58>
 8004158:	08005774 	.word	0x08005774
 800415c:	08005794 	.word	0x08005794
 8004160:	08005754 	.word	0x08005754

08004164 <puts>:
 8004164:	b510      	push	{r4, lr}
 8004166:	4b03      	ldr	r3, [pc, #12]	; (8004174 <puts+0x10>)
 8004168:	0001      	movs	r1, r0
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	f7ff ff88 	bl	8004080 <_puts_r>
 8004170:	bd10      	pop	{r4, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	20000030 	.word	0x20000030

08004178 <__swbuf_r>:
 8004178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417a:	0005      	movs	r5, r0
 800417c:	000e      	movs	r6, r1
 800417e:	0014      	movs	r4, r2
 8004180:	2800      	cmp	r0, #0
 8004182:	d004      	beq.n	800418e <__swbuf_r+0x16>
 8004184:	6983      	ldr	r3, [r0, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <__swbuf_r+0x16>
 800418a:	f000 f9f1 	bl	8004570 <__sinit>
 800418e:	4b22      	ldr	r3, [pc, #136]	; (8004218 <__swbuf_r+0xa0>)
 8004190:	429c      	cmp	r4, r3
 8004192:	d12e      	bne.n	80041f2 <__swbuf_r+0x7a>
 8004194:	686c      	ldr	r4, [r5, #4]
 8004196:	69a3      	ldr	r3, [r4, #24]
 8004198:	60a3      	str	r3, [r4, #8]
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	071b      	lsls	r3, r3, #28
 800419e:	d532      	bpl.n	8004206 <__swbuf_r+0x8e>
 80041a0:	6923      	ldr	r3, [r4, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02f      	beq.n	8004206 <__swbuf_r+0x8e>
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	6922      	ldr	r2, [r4, #16]
 80041aa:	b2f7      	uxtb	r7, r6
 80041ac:	1a98      	subs	r0, r3, r2
 80041ae:	6963      	ldr	r3, [r4, #20]
 80041b0:	b2f6      	uxtb	r6, r6
 80041b2:	4283      	cmp	r3, r0
 80041b4:	dc05      	bgt.n	80041c2 <__swbuf_r+0x4a>
 80041b6:	0021      	movs	r1, r4
 80041b8:	0028      	movs	r0, r5
 80041ba:	f000 f937 	bl	800442c <_fflush_r>
 80041be:	2800      	cmp	r0, #0
 80041c0:	d127      	bne.n	8004212 <__swbuf_r+0x9a>
 80041c2:	68a3      	ldr	r3, [r4, #8]
 80041c4:	3001      	adds	r0, #1
 80041c6:	3b01      	subs	r3, #1
 80041c8:	60a3      	str	r3, [r4, #8]
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	6022      	str	r2, [r4, #0]
 80041d0:	701f      	strb	r7, [r3, #0]
 80041d2:	6963      	ldr	r3, [r4, #20]
 80041d4:	4283      	cmp	r3, r0
 80041d6:	d004      	beq.n	80041e2 <__swbuf_r+0x6a>
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	07db      	lsls	r3, r3, #31
 80041dc:	d507      	bpl.n	80041ee <__swbuf_r+0x76>
 80041de:	2e0a      	cmp	r6, #10
 80041e0:	d105      	bne.n	80041ee <__swbuf_r+0x76>
 80041e2:	0021      	movs	r1, r4
 80041e4:	0028      	movs	r0, r5
 80041e6:	f000 f921 	bl	800442c <_fflush_r>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d111      	bne.n	8004212 <__swbuf_r+0x9a>
 80041ee:	0030      	movs	r0, r6
 80041f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <__swbuf_r+0xa4>)
 80041f4:	429c      	cmp	r4, r3
 80041f6:	d101      	bne.n	80041fc <__swbuf_r+0x84>
 80041f8:	68ac      	ldr	r4, [r5, #8]
 80041fa:	e7cc      	b.n	8004196 <__swbuf_r+0x1e>
 80041fc:	4b08      	ldr	r3, [pc, #32]	; (8004220 <__swbuf_r+0xa8>)
 80041fe:	429c      	cmp	r4, r3
 8004200:	d1c9      	bne.n	8004196 <__swbuf_r+0x1e>
 8004202:	68ec      	ldr	r4, [r5, #12]
 8004204:	e7c7      	b.n	8004196 <__swbuf_r+0x1e>
 8004206:	0021      	movs	r1, r4
 8004208:	0028      	movs	r0, r5
 800420a:	f000 f80b 	bl	8004224 <__swsetup_r>
 800420e:	2800      	cmp	r0, #0
 8004210:	d0c9      	beq.n	80041a6 <__swbuf_r+0x2e>
 8004212:	2601      	movs	r6, #1
 8004214:	4276      	negs	r6, r6
 8004216:	e7ea      	b.n	80041ee <__swbuf_r+0x76>
 8004218:	08005774 	.word	0x08005774
 800421c:	08005794 	.word	0x08005794
 8004220:	08005754 	.word	0x08005754

08004224 <__swsetup_r>:
 8004224:	4b37      	ldr	r3, [pc, #220]	; (8004304 <__swsetup_r+0xe0>)
 8004226:	b570      	push	{r4, r5, r6, lr}
 8004228:	681d      	ldr	r5, [r3, #0]
 800422a:	0006      	movs	r6, r0
 800422c:	000c      	movs	r4, r1
 800422e:	2d00      	cmp	r5, #0
 8004230:	d005      	beq.n	800423e <__swsetup_r+0x1a>
 8004232:	69ab      	ldr	r3, [r5, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <__swsetup_r+0x1a>
 8004238:	0028      	movs	r0, r5
 800423a:	f000 f999 	bl	8004570 <__sinit>
 800423e:	4b32      	ldr	r3, [pc, #200]	; (8004308 <__swsetup_r+0xe4>)
 8004240:	429c      	cmp	r4, r3
 8004242:	d10f      	bne.n	8004264 <__swsetup_r+0x40>
 8004244:	686c      	ldr	r4, [r5, #4]
 8004246:	230c      	movs	r3, #12
 8004248:	5ee2      	ldrsh	r2, [r4, r3]
 800424a:	b293      	uxth	r3, r2
 800424c:	0711      	lsls	r1, r2, #28
 800424e:	d42d      	bmi.n	80042ac <__swsetup_r+0x88>
 8004250:	06d9      	lsls	r1, r3, #27
 8004252:	d411      	bmi.n	8004278 <__swsetup_r+0x54>
 8004254:	2309      	movs	r3, #9
 8004256:	2001      	movs	r0, #1
 8004258:	6033      	str	r3, [r6, #0]
 800425a:	3337      	adds	r3, #55	; 0x37
 800425c:	4313      	orrs	r3, r2
 800425e:	81a3      	strh	r3, [r4, #12]
 8004260:	4240      	negs	r0, r0
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	4b29      	ldr	r3, [pc, #164]	; (800430c <__swsetup_r+0xe8>)
 8004266:	429c      	cmp	r4, r3
 8004268:	d101      	bne.n	800426e <__swsetup_r+0x4a>
 800426a:	68ac      	ldr	r4, [r5, #8]
 800426c:	e7eb      	b.n	8004246 <__swsetup_r+0x22>
 800426e:	4b28      	ldr	r3, [pc, #160]	; (8004310 <__swsetup_r+0xec>)
 8004270:	429c      	cmp	r4, r3
 8004272:	d1e8      	bne.n	8004246 <__swsetup_r+0x22>
 8004274:	68ec      	ldr	r4, [r5, #12]
 8004276:	e7e6      	b.n	8004246 <__swsetup_r+0x22>
 8004278:	075b      	lsls	r3, r3, #29
 800427a:	d513      	bpl.n	80042a4 <__swsetup_r+0x80>
 800427c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800427e:	2900      	cmp	r1, #0
 8004280:	d008      	beq.n	8004294 <__swsetup_r+0x70>
 8004282:	0023      	movs	r3, r4
 8004284:	3344      	adds	r3, #68	; 0x44
 8004286:	4299      	cmp	r1, r3
 8004288:	d002      	beq.n	8004290 <__swsetup_r+0x6c>
 800428a:	0030      	movs	r0, r6
 800428c:	f000 fa80 	bl	8004790 <_free_r>
 8004290:	2300      	movs	r3, #0
 8004292:	6363      	str	r3, [r4, #52]	; 0x34
 8004294:	2224      	movs	r2, #36	; 0x24
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	4393      	bics	r3, r2
 800429a:	81a3      	strh	r3, [r4, #12]
 800429c:	2300      	movs	r3, #0
 800429e:	6063      	str	r3, [r4, #4]
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	2308      	movs	r3, #8
 80042a6:	89a2      	ldrh	r2, [r4, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	81a3      	strh	r3, [r4, #12]
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <__swsetup_r+0xa6>
 80042b2:	21a0      	movs	r1, #160	; 0xa0
 80042b4:	2280      	movs	r2, #128	; 0x80
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	0089      	lsls	r1, r1, #2
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	400b      	ands	r3, r1
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <__swsetup_r+0xa6>
 80042c2:	0021      	movs	r1, r4
 80042c4:	0030      	movs	r0, r6
 80042c6:	f000 fa1f 	bl	8004708 <__smakebuf_r>
 80042ca:	220c      	movs	r2, #12
 80042cc:	5ea3      	ldrsh	r3, [r4, r2]
 80042ce:	2001      	movs	r0, #1
 80042d0:	001a      	movs	r2, r3
 80042d2:	b299      	uxth	r1, r3
 80042d4:	4002      	ands	r2, r0
 80042d6:	4203      	tst	r3, r0
 80042d8:	d00f      	beq.n	80042fa <__swsetup_r+0xd6>
 80042da:	2200      	movs	r2, #0
 80042dc:	60a2      	str	r2, [r4, #8]
 80042de:	6962      	ldr	r2, [r4, #20]
 80042e0:	4252      	negs	r2, r2
 80042e2:	61a2      	str	r2, [r4, #24]
 80042e4:	2000      	movs	r0, #0
 80042e6:	6922      	ldr	r2, [r4, #16]
 80042e8:	4282      	cmp	r2, r0
 80042ea:	d1ba      	bne.n	8004262 <__swsetup_r+0x3e>
 80042ec:	060a      	lsls	r2, r1, #24
 80042ee:	d5b8      	bpl.n	8004262 <__swsetup_r+0x3e>
 80042f0:	2240      	movs	r2, #64	; 0x40
 80042f2:	4313      	orrs	r3, r2
 80042f4:	81a3      	strh	r3, [r4, #12]
 80042f6:	3801      	subs	r0, #1
 80042f8:	e7b3      	b.n	8004262 <__swsetup_r+0x3e>
 80042fa:	0788      	lsls	r0, r1, #30
 80042fc:	d400      	bmi.n	8004300 <__swsetup_r+0xdc>
 80042fe:	6962      	ldr	r2, [r4, #20]
 8004300:	60a2      	str	r2, [r4, #8]
 8004302:	e7ef      	b.n	80042e4 <__swsetup_r+0xc0>
 8004304:	20000030 	.word	0x20000030
 8004308:	08005774 	.word	0x08005774
 800430c:	08005794 	.word	0x08005794
 8004310:	08005754 	.word	0x08005754

08004314 <__sflush_r>:
 8004314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004316:	898b      	ldrh	r3, [r1, #12]
 8004318:	0005      	movs	r5, r0
 800431a:	000c      	movs	r4, r1
 800431c:	071a      	lsls	r2, r3, #28
 800431e:	d45f      	bmi.n	80043e0 <__sflush_r+0xcc>
 8004320:	684a      	ldr	r2, [r1, #4]
 8004322:	2a00      	cmp	r2, #0
 8004324:	dc04      	bgt.n	8004330 <__sflush_r+0x1c>
 8004326:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004328:	2a00      	cmp	r2, #0
 800432a:	dc01      	bgt.n	8004330 <__sflush_r+0x1c>
 800432c:	2000      	movs	r0, #0
 800432e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004330:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004332:	2f00      	cmp	r7, #0
 8004334:	d0fa      	beq.n	800432c <__sflush_r+0x18>
 8004336:	2200      	movs	r2, #0
 8004338:	2180      	movs	r1, #128	; 0x80
 800433a:	682e      	ldr	r6, [r5, #0]
 800433c:	602a      	str	r2, [r5, #0]
 800433e:	001a      	movs	r2, r3
 8004340:	0149      	lsls	r1, r1, #5
 8004342:	400a      	ands	r2, r1
 8004344:	420b      	tst	r3, r1
 8004346:	d034      	beq.n	80043b2 <__sflush_r+0x9e>
 8004348:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	075b      	lsls	r3, r3, #29
 800434e:	d506      	bpl.n	800435e <__sflush_r+0x4a>
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	1ac0      	subs	r0, r0, r3
 8004354:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <__sflush_r+0x4a>
 800435a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800435c:	1ac0      	subs	r0, r0, r3
 800435e:	0002      	movs	r2, r0
 8004360:	6a21      	ldr	r1, [r4, #32]
 8004362:	2300      	movs	r3, #0
 8004364:	0028      	movs	r0, r5
 8004366:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004368:	47b8      	blx	r7
 800436a:	89a1      	ldrh	r1, [r4, #12]
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d106      	bne.n	800437e <__sflush_r+0x6a>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	2b1d      	cmp	r3, #29
 8004374:	d831      	bhi.n	80043da <__sflush_r+0xc6>
 8004376:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <__sflush_r+0x114>)
 8004378:	40da      	lsrs	r2, r3
 800437a:	07d3      	lsls	r3, r2, #31
 800437c:	d52d      	bpl.n	80043da <__sflush_r+0xc6>
 800437e:	2300      	movs	r3, #0
 8004380:	6063      	str	r3, [r4, #4]
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	04cb      	lsls	r3, r1, #19
 8004388:	d505      	bpl.n	8004396 <__sflush_r+0x82>
 800438a:	1c43      	adds	r3, r0, #1
 800438c:	d102      	bne.n	8004394 <__sflush_r+0x80>
 800438e:	682b      	ldr	r3, [r5, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d100      	bne.n	8004396 <__sflush_r+0x82>
 8004394:	6560      	str	r0, [r4, #84]	; 0x54
 8004396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004398:	602e      	str	r6, [r5, #0]
 800439a:	2900      	cmp	r1, #0
 800439c:	d0c6      	beq.n	800432c <__sflush_r+0x18>
 800439e:	0023      	movs	r3, r4
 80043a0:	3344      	adds	r3, #68	; 0x44
 80043a2:	4299      	cmp	r1, r3
 80043a4:	d002      	beq.n	80043ac <__sflush_r+0x98>
 80043a6:	0028      	movs	r0, r5
 80043a8:	f000 f9f2 	bl	8004790 <_free_r>
 80043ac:	2000      	movs	r0, #0
 80043ae:	6360      	str	r0, [r4, #52]	; 0x34
 80043b0:	e7bd      	b.n	800432e <__sflush_r+0x1a>
 80043b2:	2301      	movs	r3, #1
 80043b4:	0028      	movs	r0, r5
 80043b6:	6a21      	ldr	r1, [r4, #32]
 80043b8:	47b8      	blx	r7
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	d1c5      	bne.n	800434a <__sflush_r+0x36>
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0c2      	beq.n	800434a <__sflush_r+0x36>
 80043c4:	2b1d      	cmp	r3, #29
 80043c6:	d001      	beq.n	80043cc <__sflush_r+0xb8>
 80043c8:	2b16      	cmp	r3, #22
 80043ca:	d101      	bne.n	80043d0 <__sflush_r+0xbc>
 80043cc:	602e      	str	r6, [r5, #0]
 80043ce:	e7ad      	b.n	800432c <__sflush_r+0x18>
 80043d0:	2340      	movs	r3, #64	; 0x40
 80043d2:	89a2      	ldrh	r2, [r4, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	81a3      	strh	r3, [r4, #12]
 80043d8:	e7a9      	b.n	800432e <__sflush_r+0x1a>
 80043da:	2340      	movs	r3, #64	; 0x40
 80043dc:	430b      	orrs	r3, r1
 80043de:	e7fa      	b.n	80043d6 <__sflush_r+0xc2>
 80043e0:	690f      	ldr	r7, [r1, #16]
 80043e2:	2f00      	cmp	r7, #0
 80043e4:	d0a2      	beq.n	800432c <__sflush_r+0x18>
 80043e6:	680a      	ldr	r2, [r1, #0]
 80043e8:	600f      	str	r7, [r1, #0]
 80043ea:	1bd2      	subs	r2, r2, r7
 80043ec:	9201      	str	r2, [sp, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	079b      	lsls	r3, r3, #30
 80043f2:	d100      	bne.n	80043f6 <__sflush_r+0xe2>
 80043f4:	694a      	ldr	r2, [r1, #20]
 80043f6:	60a2      	str	r2, [r4, #8]
 80043f8:	9b01      	ldr	r3, [sp, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	dc00      	bgt.n	8004400 <__sflush_r+0xec>
 80043fe:	e795      	b.n	800432c <__sflush_r+0x18>
 8004400:	003a      	movs	r2, r7
 8004402:	0028      	movs	r0, r5
 8004404:	9b01      	ldr	r3, [sp, #4]
 8004406:	6a21      	ldr	r1, [r4, #32]
 8004408:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800440a:	47b0      	blx	r6
 800440c:	2800      	cmp	r0, #0
 800440e:	dc06      	bgt.n	800441e <__sflush_r+0x10a>
 8004410:	2340      	movs	r3, #64	; 0x40
 8004412:	2001      	movs	r0, #1
 8004414:	89a2      	ldrh	r2, [r4, #12]
 8004416:	4240      	negs	r0, r0
 8004418:	4313      	orrs	r3, r2
 800441a:	81a3      	strh	r3, [r4, #12]
 800441c:	e787      	b.n	800432e <__sflush_r+0x1a>
 800441e:	9b01      	ldr	r3, [sp, #4]
 8004420:	183f      	adds	r7, r7, r0
 8004422:	1a1b      	subs	r3, r3, r0
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	e7e7      	b.n	80043f8 <__sflush_r+0xe4>
 8004428:	20400001 	.word	0x20400001

0800442c <_fflush_r>:
 800442c:	690b      	ldr	r3, [r1, #16]
 800442e:	b570      	push	{r4, r5, r6, lr}
 8004430:	0005      	movs	r5, r0
 8004432:	000c      	movs	r4, r1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <_fflush_r+0x12>
 8004438:	2500      	movs	r5, #0
 800443a:	0028      	movs	r0, r5
 800443c:	bd70      	pop	{r4, r5, r6, pc}
 800443e:	2800      	cmp	r0, #0
 8004440:	d004      	beq.n	800444c <_fflush_r+0x20>
 8004442:	6983      	ldr	r3, [r0, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <_fflush_r+0x20>
 8004448:	f000 f892 	bl	8004570 <__sinit>
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <_fflush_r+0x74>)
 800444e:	429c      	cmp	r4, r3
 8004450:	d11b      	bne.n	800448a <_fflush_r+0x5e>
 8004452:	686c      	ldr	r4, [r5, #4]
 8004454:	220c      	movs	r2, #12
 8004456:	5ea3      	ldrsh	r3, [r4, r2]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ed      	beq.n	8004438 <_fflush_r+0xc>
 800445c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800445e:	07d2      	lsls	r2, r2, #31
 8004460:	d404      	bmi.n	800446c <_fflush_r+0x40>
 8004462:	059b      	lsls	r3, r3, #22
 8004464:	d402      	bmi.n	800446c <_fflush_r+0x40>
 8004466:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004468:	f000 f923 	bl	80046b2 <__retarget_lock_acquire_recursive>
 800446c:	0028      	movs	r0, r5
 800446e:	0021      	movs	r1, r4
 8004470:	f7ff ff50 	bl	8004314 <__sflush_r>
 8004474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004476:	0005      	movs	r5, r0
 8004478:	07db      	lsls	r3, r3, #31
 800447a:	d4de      	bmi.n	800443a <_fflush_r+0xe>
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	059b      	lsls	r3, r3, #22
 8004480:	d4db      	bmi.n	800443a <_fflush_r+0xe>
 8004482:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004484:	f000 f916 	bl	80046b4 <__retarget_lock_release_recursive>
 8004488:	e7d7      	b.n	800443a <_fflush_r+0xe>
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <_fflush_r+0x78>)
 800448c:	429c      	cmp	r4, r3
 800448e:	d101      	bne.n	8004494 <_fflush_r+0x68>
 8004490:	68ac      	ldr	r4, [r5, #8]
 8004492:	e7df      	b.n	8004454 <_fflush_r+0x28>
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <_fflush_r+0x7c>)
 8004496:	429c      	cmp	r4, r3
 8004498:	d1dc      	bne.n	8004454 <_fflush_r+0x28>
 800449a:	68ec      	ldr	r4, [r5, #12]
 800449c:	e7da      	b.n	8004454 <_fflush_r+0x28>
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	08005774 	.word	0x08005774
 80044a4:	08005794 	.word	0x08005794
 80044a8:	08005754 	.word	0x08005754

080044ac <std>:
 80044ac:	2300      	movs	r3, #0
 80044ae:	b510      	push	{r4, lr}
 80044b0:	0004      	movs	r4, r0
 80044b2:	6003      	str	r3, [r0, #0]
 80044b4:	6043      	str	r3, [r0, #4]
 80044b6:	6083      	str	r3, [r0, #8]
 80044b8:	8181      	strh	r1, [r0, #12]
 80044ba:	6643      	str	r3, [r0, #100]	; 0x64
 80044bc:	0019      	movs	r1, r3
 80044be:	81c2      	strh	r2, [r0, #14]
 80044c0:	6103      	str	r3, [r0, #16]
 80044c2:	6143      	str	r3, [r0, #20]
 80044c4:	6183      	str	r3, [r0, #24]
 80044c6:	2208      	movs	r2, #8
 80044c8:	305c      	adds	r0, #92	; 0x5c
 80044ca:	f7ff fdb6 	bl	800403a <memset>
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <std+0x38>)
 80044d0:	6224      	str	r4, [r4, #32]
 80044d2:	6263      	str	r3, [r4, #36]	; 0x24
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <std+0x3c>)
 80044d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <std+0x40>)
 80044da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <std+0x44>)
 80044de:	6323      	str	r3, [r4, #48]	; 0x30
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	08004f41 	.word	0x08004f41
 80044e8:	08004f69 	.word	0x08004f69
 80044ec:	08004fa1 	.word	0x08004fa1
 80044f0:	08004fcd 	.word	0x08004fcd

080044f4 <_cleanup_r>:
 80044f4:	b510      	push	{r4, lr}
 80044f6:	4902      	ldr	r1, [pc, #8]	; (8004500 <_cleanup_r+0xc>)
 80044f8:	f000 f8ba 	bl	8004670 <_fwalk_reent>
 80044fc:	bd10      	pop	{r4, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	0800442d 	.word	0x0800442d

08004504 <__sfmoreglue>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	2568      	movs	r5, #104	; 0x68
 8004508:	1e4a      	subs	r2, r1, #1
 800450a:	4355      	muls	r5, r2
 800450c:	000e      	movs	r6, r1
 800450e:	0029      	movs	r1, r5
 8004510:	3174      	adds	r1, #116	; 0x74
 8004512:	f000 f9a9 	bl	8004868 <_malloc_r>
 8004516:	1e04      	subs	r4, r0, #0
 8004518:	d008      	beq.n	800452c <__sfmoreglue+0x28>
 800451a:	2100      	movs	r1, #0
 800451c:	002a      	movs	r2, r5
 800451e:	6001      	str	r1, [r0, #0]
 8004520:	6046      	str	r6, [r0, #4]
 8004522:	300c      	adds	r0, #12
 8004524:	60a0      	str	r0, [r4, #8]
 8004526:	3268      	adds	r2, #104	; 0x68
 8004528:	f7ff fd87 	bl	800403a <memset>
 800452c:	0020      	movs	r0, r4
 800452e:	bd70      	pop	{r4, r5, r6, pc}

08004530 <__sfp_lock_acquire>:
 8004530:	b510      	push	{r4, lr}
 8004532:	4802      	ldr	r0, [pc, #8]	; (800453c <__sfp_lock_acquire+0xc>)
 8004534:	f000 f8bd 	bl	80046b2 <__retarget_lock_acquire_recursive>
 8004538:	bd10      	pop	{r4, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	200003f5 	.word	0x200003f5

08004540 <__sfp_lock_release>:
 8004540:	b510      	push	{r4, lr}
 8004542:	4802      	ldr	r0, [pc, #8]	; (800454c <__sfp_lock_release+0xc>)
 8004544:	f000 f8b6 	bl	80046b4 <__retarget_lock_release_recursive>
 8004548:	bd10      	pop	{r4, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	200003f5 	.word	0x200003f5

08004550 <__sinit_lock_acquire>:
 8004550:	b510      	push	{r4, lr}
 8004552:	4802      	ldr	r0, [pc, #8]	; (800455c <__sinit_lock_acquire+0xc>)
 8004554:	f000 f8ad 	bl	80046b2 <__retarget_lock_acquire_recursive>
 8004558:	bd10      	pop	{r4, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	200003f6 	.word	0x200003f6

08004560 <__sinit_lock_release>:
 8004560:	b510      	push	{r4, lr}
 8004562:	4802      	ldr	r0, [pc, #8]	; (800456c <__sinit_lock_release+0xc>)
 8004564:	f000 f8a6 	bl	80046b4 <__retarget_lock_release_recursive>
 8004568:	bd10      	pop	{r4, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	200003f6 	.word	0x200003f6

08004570 <__sinit>:
 8004570:	b513      	push	{r0, r1, r4, lr}
 8004572:	0004      	movs	r4, r0
 8004574:	f7ff ffec 	bl	8004550 <__sinit_lock_acquire>
 8004578:	69a3      	ldr	r3, [r4, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <__sinit+0x14>
 800457e:	f7ff ffef 	bl	8004560 <__sinit_lock_release>
 8004582:	bd13      	pop	{r0, r1, r4, pc}
 8004584:	64a3      	str	r3, [r4, #72]	; 0x48
 8004586:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004588:	6523      	str	r3, [r4, #80]	; 0x50
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <__sinit+0x68>)
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <__sinit+0x6c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	62a2      	str	r2, [r4, #40]	; 0x28
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	42a3      	cmp	r3, r4
 8004596:	d101      	bne.n	800459c <__sinit+0x2c>
 8004598:	2301      	movs	r3, #1
 800459a:	61a3      	str	r3, [r4, #24]
 800459c:	0020      	movs	r0, r4
 800459e:	f000 f81f 	bl	80045e0 <__sfp>
 80045a2:	6060      	str	r0, [r4, #4]
 80045a4:	0020      	movs	r0, r4
 80045a6:	f000 f81b 	bl	80045e0 <__sfp>
 80045aa:	60a0      	str	r0, [r4, #8]
 80045ac:	0020      	movs	r0, r4
 80045ae:	f000 f817 	bl	80045e0 <__sfp>
 80045b2:	2200      	movs	r2, #0
 80045b4:	2104      	movs	r1, #4
 80045b6:	60e0      	str	r0, [r4, #12]
 80045b8:	6860      	ldr	r0, [r4, #4]
 80045ba:	f7ff ff77 	bl	80044ac <std>
 80045be:	2201      	movs	r2, #1
 80045c0:	2109      	movs	r1, #9
 80045c2:	68a0      	ldr	r0, [r4, #8]
 80045c4:	f7ff ff72 	bl	80044ac <std>
 80045c8:	2202      	movs	r2, #2
 80045ca:	2112      	movs	r1, #18
 80045cc:	68e0      	ldr	r0, [r4, #12]
 80045ce:	f7ff ff6d 	bl	80044ac <std>
 80045d2:	2301      	movs	r3, #1
 80045d4:	61a3      	str	r3, [r4, #24]
 80045d6:	e7d2      	b.n	800457e <__sinit+0xe>
 80045d8:	08005750 	.word	0x08005750
 80045dc:	080044f5 	.word	0x080044f5

080045e0 <__sfp>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	0007      	movs	r7, r0
 80045e4:	f7ff ffa4 	bl	8004530 <__sfp_lock_acquire>
 80045e8:	4b1f      	ldr	r3, [pc, #124]	; (8004668 <__sfp+0x88>)
 80045ea:	681e      	ldr	r6, [r3, #0]
 80045ec:	69b3      	ldr	r3, [r6, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <__sfp+0x18>
 80045f2:	0030      	movs	r0, r6
 80045f4:	f7ff ffbc 	bl	8004570 <__sinit>
 80045f8:	3648      	adds	r6, #72	; 0x48
 80045fa:	68b4      	ldr	r4, [r6, #8]
 80045fc:	6873      	ldr	r3, [r6, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	d504      	bpl.n	800460c <__sfp+0x2c>
 8004602:	6833      	ldr	r3, [r6, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d022      	beq.n	800464e <__sfp+0x6e>
 8004608:	6836      	ldr	r6, [r6, #0]
 800460a:	e7f6      	b.n	80045fa <__sfp+0x1a>
 800460c:	220c      	movs	r2, #12
 800460e:	5ea5      	ldrsh	r5, [r4, r2]
 8004610:	2d00      	cmp	r5, #0
 8004612:	d11a      	bne.n	800464a <__sfp+0x6a>
 8004614:	0020      	movs	r0, r4
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <__sfp+0x8c>)
 8004618:	3058      	adds	r0, #88	; 0x58
 800461a:	60e3      	str	r3, [r4, #12]
 800461c:	6665      	str	r5, [r4, #100]	; 0x64
 800461e:	f000 f847 	bl	80046b0 <__retarget_lock_init_recursive>
 8004622:	f7ff ff8d 	bl	8004540 <__sfp_lock_release>
 8004626:	0020      	movs	r0, r4
 8004628:	2208      	movs	r2, #8
 800462a:	0029      	movs	r1, r5
 800462c:	6025      	str	r5, [r4, #0]
 800462e:	60a5      	str	r5, [r4, #8]
 8004630:	6065      	str	r5, [r4, #4]
 8004632:	6125      	str	r5, [r4, #16]
 8004634:	6165      	str	r5, [r4, #20]
 8004636:	61a5      	str	r5, [r4, #24]
 8004638:	305c      	adds	r0, #92	; 0x5c
 800463a:	f7ff fcfe 	bl	800403a <memset>
 800463e:	6365      	str	r5, [r4, #52]	; 0x34
 8004640:	63a5      	str	r5, [r4, #56]	; 0x38
 8004642:	64a5      	str	r5, [r4, #72]	; 0x48
 8004644:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004646:	0020      	movs	r0, r4
 8004648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800464a:	3468      	adds	r4, #104	; 0x68
 800464c:	e7d7      	b.n	80045fe <__sfp+0x1e>
 800464e:	2104      	movs	r1, #4
 8004650:	0038      	movs	r0, r7
 8004652:	f7ff ff57 	bl	8004504 <__sfmoreglue>
 8004656:	1e04      	subs	r4, r0, #0
 8004658:	6030      	str	r0, [r6, #0]
 800465a:	d1d5      	bne.n	8004608 <__sfp+0x28>
 800465c:	f7ff ff70 	bl	8004540 <__sfp_lock_release>
 8004660:	230c      	movs	r3, #12
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	e7ef      	b.n	8004646 <__sfp+0x66>
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	08005750 	.word	0x08005750
 800466c:	ffff0001 	.word	0xffff0001

08004670 <_fwalk_reent>:
 8004670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004672:	0004      	movs	r4, r0
 8004674:	0006      	movs	r6, r0
 8004676:	2700      	movs	r7, #0
 8004678:	9101      	str	r1, [sp, #4]
 800467a:	3448      	adds	r4, #72	; 0x48
 800467c:	6863      	ldr	r3, [r4, #4]
 800467e:	68a5      	ldr	r5, [r4, #8]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	9b00      	ldr	r3, [sp, #0]
 8004684:	3b01      	subs	r3, #1
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	d504      	bpl.n	8004694 <_fwalk_reent+0x24>
 800468a:	6824      	ldr	r4, [r4, #0]
 800468c:	2c00      	cmp	r4, #0
 800468e:	d1f5      	bne.n	800467c <_fwalk_reent+0xc>
 8004690:	0038      	movs	r0, r7
 8004692:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004694:	89ab      	ldrh	r3, [r5, #12]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d908      	bls.n	80046ac <_fwalk_reent+0x3c>
 800469a:	220e      	movs	r2, #14
 800469c:	5eab      	ldrsh	r3, [r5, r2]
 800469e:	3301      	adds	r3, #1
 80046a0:	d004      	beq.n	80046ac <_fwalk_reent+0x3c>
 80046a2:	0029      	movs	r1, r5
 80046a4:	0030      	movs	r0, r6
 80046a6:	9b01      	ldr	r3, [sp, #4]
 80046a8:	4798      	blx	r3
 80046aa:	4307      	orrs	r7, r0
 80046ac:	3568      	adds	r5, #104	; 0x68
 80046ae:	e7e8      	b.n	8004682 <_fwalk_reent+0x12>

080046b0 <__retarget_lock_init_recursive>:
 80046b0:	4770      	bx	lr

080046b2 <__retarget_lock_acquire_recursive>:
 80046b2:	4770      	bx	lr

080046b4 <__retarget_lock_release_recursive>:
 80046b4:	4770      	bx	lr
	...

080046b8 <__swhatbuf_r>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	000e      	movs	r6, r1
 80046bc:	001d      	movs	r5, r3
 80046be:	230e      	movs	r3, #14
 80046c0:	5ec9      	ldrsh	r1, [r1, r3]
 80046c2:	0014      	movs	r4, r2
 80046c4:	b096      	sub	sp, #88	; 0x58
 80046c6:	2900      	cmp	r1, #0
 80046c8:	da08      	bge.n	80046dc <__swhatbuf_r+0x24>
 80046ca:	220c      	movs	r2, #12
 80046cc:	5eb3      	ldrsh	r3, [r6, r2]
 80046ce:	2200      	movs	r2, #0
 80046d0:	602a      	str	r2, [r5, #0]
 80046d2:	061b      	lsls	r3, r3, #24
 80046d4:	d411      	bmi.n	80046fa <__swhatbuf_r+0x42>
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	e00f      	b.n	80046fc <__swhatbuf_r+0x44>
 80046dc:	466a      	mov	r2, sp
 80046de:	f000 fca1 	bl	8005024 <_fstat_r>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	dbf1      	blt.n	80046ca <__swhatbuf_r+0x12>
 80046e6:	23f0      	movs	r3, #240	; 0xf0
 80046e8:	9901      	ldr	r1, [sp, #4]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	4019      	ands	r1, r3
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <__swhatbuf_r+0x4c>)
 80046f0:	18c9      	adds	r1, r1, r3
 80046f2:	424b      	negs	r3, r1
 80046f4:	4159      	adcs	r1, r3
 80046f6:	6029      	str	r1, [r5, #0]
 80046f8:	e7ed      	b.n	80046d6 <__swhatbuf_r+0x1e>
 80046fa:	2340      	movs	r3, #64	; 0x40
 80046fc:	2000      	movs	r0, #0
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	b016      	add	sp, #88	; 0x58
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	ffffe000 	.word	0xffffe000

08004708 <__smakebuf_r>:
 8004708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800470a:	2602      	movs	r6, #2
 800470c:	898b      	ldrh	r3, [r1, #12]
 800470e:	0005      	movs	r5, r0
 8004710:	000c      	movs	r4, r1
 8004712:	4233      	tst	r3, r6
 8004714:	d006      	beq.n	8004724 <__smakebuf_r+0x1c>
 8004716:	0023      	movs	r3, r4
 8004718:	3347      	adds	r3, #71	; 0x47
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	6123      	str	r3, [r4, #16]
 800471e:	2301      	movs	r3, #1
 8004720:	6163      	str	r3, [r4, #20]
 8004722:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004724:	466a      	mov	r2, sp
 8004726:	ab01      	add	r3, sp, #4
 8004728:	f7ff ffc6 	bl	80046b8 <__swhatbuf_r>
 800472c:	9900      	ldr	r1, [sp, #0]
 800472e:	0007      	movs	r7, r0
 8004730:	0028      	movs	r0, r5
 8004732:	f000 f899 	bl	8004868 <_malloc_r>
 8004736:	2800      	cmp	r0, #0
 8004738:	d108      	bne.n	800474c <__smakebuf_r+0x44>
 800473a:	220c      	movs	r2, #12
 800473c:	5ea3      	ldrsh	r3, [r4, r2]
 800473e:	059a      	lsls	r2, r3, #22
 8004740:	d4ef      	bmi.n	8004722 <__smakebuf_r+0x1a>
 8004742:	2203      	movs	r2, #3
 8004744:	4393      	bics	r3, r2
 8004746:	431e      	orrs	r6, r3
 8004748:	81a6      	strh	r6, [r4, #12]
 800474a:	e7e4      	b.n	8004716 <__smakebuf_r+0xe>
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <__smakebuf_r+0x84>)
 800474e:	62ab      	str	r3, [r5, #40]	; 0x28
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	89a2      	ldrh	r2, [r4, #12]
 8004754:	6020      	str	r0, [r4, #0]
 8004756:	4313      	orrs	r3, r2
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	9b00      	ldr	r3, [sp, #0]
 800475c:	6120      	str	r0, [r4, #16]
 800475e:	6163      	str	r3, [r4, #20]
 8004760:	9b01      	ldr	r3, [sp, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <__smakebuf_r+0x7a>
 8004766:	0028      	movs	r0, r5
 8004768:	230e      	movs	r3, #14
 800476a:	5ee1      	ldrsh	r1, [r4, r3]
 800476c:	f000 fc6c 	bl	8005048 <_isatty_r>
 8004770:	2800      	cmp	r0, #0
 8004772:	d006      	beq.n	8004782 <__smakebuf_r+0x7a>
 8004774:	2203      	movs	r2, #3
 8004776:	89a3      	ldrh	r3, [r4, #12]
 8004778:	4393      	bics	r3, r2
 800477a:	001a      	movs	r2, r3
 800477c:	2301      	movs	r3, #1
 800477e:	4313      	orrs	r3, r2
 8004780:	81a3      	strh	r3, [r4, #12]
 8004782:	89a0      	ldrh	r0, [r4, #12]
 8004784:	4307      	orrs	r7, r0
 8004786:	81a7      	strh	r7, [r4, #12]
 8004788:	e7cb      	b.n	8004722 <__smakebuf_r+0x1a>
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	080044f5 	.word	0x080044f5

08004790 <_free_r>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	0005      	movs	r5, r0
 8004794:	2900      	cmp	r1, #0
 8004796:	d010      	beq.n	80047ba <_free_r+0x2a>
 8004798:	1f0c      	subs	r4, r1, #4
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	da00      	bge.n	80047a2 <_free_r+0x12>
 80047a0:	18e4      	adds	r4, r4, r3
 80047a2:	0028      	movs	r0, r5
 80047a4:	f000 fc82 	bl	80050ac <__malloc_lock>
 80047a8:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <_free_r+0x90>)
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <_free_r+0x2c>
 80047b0:	6063      	str	r3, [r4, #4]
 80047b2:	6014      	str	r4, [r2, #0]
 80047b4:	0028      	movs	r0, r5
 80047b6:	f000 fc81 	bl	80050bc <__malloc_unlock>
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	42a3      	cmp	r3, r4
 80047be:	d908      	bls.n	80047d2 <_free_r+0x42>
 80047c0:	6821      	ldr	r1, [r4, #0]
 80047c2:	1860      	adds	r0, r4, r1
 80047c4:	4283      	cmp	r3, r0
 80047c6:	d1f3      	bne.n	80047b0 <_free_r+0x20>
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	1841      	adds	r1, r0, r1
 80047ce:	6021      	str	r1, [r4, #0]
 80047d0:	e7ee      	b.n	80047b0 <_free_r+0x20>
 80047d2:	001a      	movs	r2, r3
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <_free_r+0x4e>
 80047da:	42a3      	cmp	r3, r4
 80047dc:	d9f9      	bls.n	80047d2 <_free_r+0x42>
 80047de:	6811      	ldr	r1, [r2, #0]
 80047e0:	1850      	adds	r0, r2, r1
 80047e2:	42a0      	cmp	r0, r4
 80047e4:	d10b      	bne.n	80047fe <_free_r+0x6e>
 80047e6:	6820      	ldr	r0, [r4, #0]
 80047e8:	1809      	adds	r1, r1, r0
 80047ea:	1850      	adds	r0, r2, r1
 80047ec:	6011      	str	r1, [r2, #0]
 80047ee:	4283      	cmp	r3, r0
 80047f0:	d1e0      	bne.n	80047b4 <_free_r+0x24>
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	1841      	adds	r1, r0, r1
 80047f8:	6011      	str	r1, [r2, #0]
 80047fa:	6053      	str	r3, [r2, #4]
 80047fc:	e7da      	b.n	80047b4 <_free_r+0x24>
 80047fe:	42a0      	cmp	r0, r4
 8004800:	d902      	bls.n	8004808 <_free_r+0x78>
 8004802:	230c      	movs	r3, #12
 8004804:	602b      	str	r3, [r5, #0]
 8004806:	e7d5      	b.n	80047b4 <_free_r+0x24>
 8004808:	6821      	ldr	r1, [r4, #0]
 800480a:	1860      	adds	r0, r4, r1
 800480c:	4283      	cmp	r3, r0
 800480e:	d103      	bne.n	8004818 <_free_r+0x88>
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	1841      	adds	r1, r0, r1
 8004816:	6021      	str	r1, [r4, #0]
 8004818:	6063      	str	r3, [r4, #4]
 800481a:	6054      	str	r4, [r2, #4]
 800481c:	e7ca      	b.n	80047b4 <_free_r+0x24>
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	200003f8 	.word	0x200003f8

08004824 <sbrk_aligned>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	4e0f      	ldr	r6, [pc, #60]	; (8004864 <sbrk_aligned+0x40>)
 8004828:	000d      	movs	r5, r1
 800482a:	6831      	ldr	r1, [r6, #0]
 800482c:	0004      	movs	r4, r0
 800482e:	2900      	cmp	r1, #0
 8004830:	d102      	bne.n	8004838 <sbrk_aligned+0x14>
 8004832:	f000 fb73 	bl	8004f1c <_sbrk_r>
 8004836:	6030      	str	r0, [r6, #0]
 8004838:	0029      	movs	r1, r5
 800483a:	0020      	movs	r0, r4
 800483c:	f000 fb6e 	bl	8004f1c <_sbrk_r>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d00a      	beq.n	800485a <sbrk_aligned+0x36>
 8004844:	2303      	movs	r3, #3
 8004846:	1cc5      	adds	r5, r0, #3
 8004848:	439d      	bics	r5, r3
 800484a:	42a8      	cmp	r0, r5
 800484c:	d007      	beq.n	800485e <sbrk_aligned+0x3a>
 800484e:	1a29      	subs	r1, r5, r0
 8004850:	0020      	movs	r0, r4
 8004852:	f000 fb63 	bl	8004f1c <_sbrk_r>
 8004856:	1c43      	adds	r3, r0, #1
 8004858:	d101      	bne.n	800485e <sbrk_aligned+0x3a>
 800485a:	2501      	movs	r5, #1
 800485c:	426d      	negs	r5, r5
 800485e:	0028      	movs	r0, r5
 8004860:	bd70      	pop	{r4, r5, r6, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	200003fc 	.word	0x200003fc

08004868 <_malloc_r>:
 8004868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800486a:	2203      	movs	r2, #3
 800486c:	1ccb      	adds	r3, r1, #3
 800486e:	4393      	bics	r3, r2
 8004870:	3308      	adds	r3, #8
 8004872:	0006      	movs	r6, r0
 8004874:	001f      	movs	r7, r3
 8004876:	2b0c      	cmp	r3, #12
 8004878:	d232      	bcs.n	80048e0 <_malloc_r+0x78>
 800487a:	270c      	movs	r7, #12
 800487c:	42b9      	cmp	r1, r7
 800487e:	d831      	bhi.n	80048e4 <_malloc_r+0x7c>
 8004880:	0030      	movs	r0, r6
 8004882:	f000 fc13 	bl	80050ac <__malloc_lock>
 8004886:	4d32      	ldr	r5, [pc, #200]	; (8004950 <_malloc_r+0xe8>)
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	001c      	movs	r4, r3
 800488c:	2c00      	cmp	r4, #0
 800488e:	d12e      	bne.n	80048ee <_malloc_r+0x86>
 8004890:	0039      	movs	r1, r7
 8004892:	0030      	movs	r0, r6
 8004894:	f7ff ffc6 	bl	8004824 <sbrk_aligned>
 8004898:	0004      	movs	r4, r0
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	d11e      	bne.n	80048dc <_malloc_r+0x74>
 800489e:	682c      	ldr	r4, [r5, #0]
 80048a0:	0025      	movs	r5, r4
 80048a2:	2d00      	cmp	r5, #0
 80048a4:	d14a      	bne.n	800493c <_malloc_r+0xd4>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	0029      	movs	r1, r5
 80048aa:	18e3      	adds	r3, r4, r3
 80048ac:	0030      	movs	r0, r6
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	f000 fb34 	bl	8004f1c <_sbrk_r>
 80048b4:	9b01      	ldr	r3, [sp, #4]
 80048b6:	4283      	cmp	r3, r0
 80048b8:	d143      	bne.n	8004942 <_malloc_r+0xda>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	3703      	adds	r7, #3
 80048be:	1aff      	subs	r7, r7, r3
 80048c0:	2303      	movs	r3, #3
 80048c2:	439f      	bics	r7, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	2f0c      	cmp	r7, #12
 80048c8:	d200      	bcs.n	80048cc <_malloc_r+0x64>
 80048ca:	270c      	movs	r7, #12
 80048cc:	0039      	movs	r1, r7
 80048ce:	0030      	movs	r0, r6
 80048d0:	f7ff ffa8 	bl	8004824 <sbrk_aligned>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d034      	beq.n	8004942 <_malloc_r+0xda>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	19df      	adds	r7, r3, r7
 80048dc:	6027      	str	r7, [r4, #0]
 80048de:	e013      	b.n	8004908 <_malloc_r+0xa0>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dacb      	bge.n	800487c <_malloc_r+0x14>
 80048e4:	230c      	movs	r3, #12
 80048e6:	2500      	movs	r5, #0
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	0028      	movs	r0, r5
 80048ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048ee:	6822      	ldr	r2, [r4, #0]
 80048f0:	1bd1      	subs	r1, r2, r7
 80048f2:	d420      	bmi.n	8004936 <_malloc_r+0xce>
 80048f4:	290b      	cmp	r1, #11
 80048f6:	d917      	bls.n	8004928 <_malloc_r+0xc0>
 80048f8:	19e2      	adds	r2, r4, r7
 80048fa:	6027      	str	r7, [r4, #0]
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	d111      	bne.n	8004924 <_malloc_r+0xbc>
 8004900:	602a      	str	r2, [r5, #0]
 8004902:	6863      	ldr	r3, [r4, #4]
 8004904:	6011      	str	r1, [r2, #0]
 8004906:	6053      	str	r3, [r2, #4]
 8004908:	0030      	movs	r0, r6
 800490a:	0025      	movs	r5, r4
 800490c:	f000 fbd6 	bl	80050bc <__malloc_unlock>
 8004910:	2207      	movs	r2, #7
 8004912:	350b      	adds	r5, #11
 8004914:	1d23      	adds	r3, r4, #4
 8004916:	4395      	bics	r5, r2
 8004918:	1aea      	subs	r2, r5, r3
 800491a:	429d      	cmp	r5, r3
 800491c:	d0e5      	beq.n	80048ea <_malloc_r+0x82>
 800491e:	1b5b      	subs	r3, r3, r5
 8004920:	50a3      	str	r3, [r4, r2]
 8004922:	e7e2      	b.n	80048ea <_malloc_r+0x82>
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	e7ec      	b.n	8004902 <_malloc_r+0x9a>
 8004928:	6862      	ldr	r2, [r4, #4]
 800492a:	42a3      	cmp	r3, r4
 800492c:	d101      	bne.n	8004932 <_malloc_r+0xca>
 800492e:	602a      	str	r2, [r5, #0]
 8004930:	e7ea      	b.n	8004908 <_malloc_r+0xa0>
 8004932:	605a      	str	r2, [r3, #4]
 8004934:	e7e8      	b.n	8004908 <_malloc_r+0xa0>
 8004936:	0023      	movs	r3, r4
 8004938:	6864      	ldr	r4, [r4, #4]
 800493a:	e7a7      	b.n	800488c <_malloc_r+0x24>
 800493c:	002c      	movs	r4, r5
 800493e:	686d      	ldr	r5, [r5, #4]
 8004940:	e7af      	b.n	80048a2 <_malloc_r+0x3a>
 8004942:	230c      	movs	r3, #12
 8004944:	0030      	movs	r0, r6
 8004946:	6033      	str	r3, [r6, #0]
 8004948:	f000 fbb8 	bl	80050bc <__malloc_unlock>
 800494c:	e7cd      	b.n	80048ea <_malloc_r+0x82>
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	200003f8 	.word	0x200003f8

08004954 <__sfputc_r>:
 8004954:	6893      	ldr	r3, [r2, #8]
 8004956:	b510      	push	{r4, lr}
 8004958:	3b01      	subs	r3, #1
 800495a:	6093      	str	r3, [r2, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da04      	bge.n	800496a <__sfputc_r+0x16>
 8004960:	6994      	ldr	r4, [r2, #24]
 8004962:	42a3      	cmp	r3, r4
 8004964:	db07      	blt.n	8004976 <__sfputc_r+0x22>
 8004966:	290a      	cmp	r1, #10
 8004968:	d005      	beq.n	8004976 <__sfputc_r+0x22>
 800496a:	6813      	ldr	r3, [r2, #0]
 800496c:	1c58      	adds	r0, r3, #1
 800496e:	6010      	str	r0, [r2, #0]
 8004970:	7019      	strb	r1, [r3, #0]
 8004972:	0008      	movs	r0, r1
 8004974:	bd10      	pop	{r4, pc}
 8004976:	f7ff fbff 	bl	8004178 <__swbuf_r>
 800497a:	0001      	movs	r1, r0
 800497c:	e7f9      	b.n	8004972 <__sfputc_r+0x1e>

0800497e <__sfputs_r>:
 800497e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004980:	0006      	movs	r6, r0
 8004982:	000f      	movs	r7, r1
 8004984:	0014      	movs	r4, r2
 8004986:	18d5      	adds	r5, r2, r3
 8004988:	42ac      	cmp	r4, r5
 800498a:	d101      	bne.n	8004990 <__sfputs_r+0x12>
 800498c:	2000      	movs	r0, #0
 800498e:	e007      	b.n	80049a0 <__sfputs_r+0x22>
 8004990:	7821      	ldrb	r1, [r4, #0]
 8004992:	003a      	movs	r2, r7
 8004994:	0030      	movs	r0, r6
 8004996:	f7ff ffdd 	bl	8004954 <__sfputc_r>
 800499a:	3401      	adds	r4, #1
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d1f3      	bne.n	8004988 <__sfputs_r+0xa>
 80049a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049a4 <_vfiprintf_r>:
 80049a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a6:	b0a1      	sub	sp, #132	; 0x84
 80049a8:	0006      	movs	r6, r0
 80049aa:	000c      	movs	r4, r1
 80049ac:	001f      	movs	r7, r3
 80049ae:	9203      	str	r2, [sp, #12]
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d004      	beq.n	80049be <_vfiprintf_r+0x1a>
 80049b4:	6983      	ldr	r3, [r0, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <_vfiprintf_r+0x1a>
 80049ba:	f7ff fdd9 	bl	8004570 <__sinit>
 80049be:	4b8e      	ldr	r3, [pc, #568]	; (8004bf8 <_vfiprintf_r+0x254>)
 80049c0:	429c      	cmp	r4, r3
 80049c2:	d11c      	bne.n	80049fe <_vfiprintf_r+0x5a>
 80049c4:	6874      	ldr	r4, [r6, #4]
 80049c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049c8:	07db      	lsls	r3, r3, #31
 80049ca:	d405      	bmi.n	80049d8 <_vfiprintf_r+0x34>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	059b      	lsls	r3, r3, #22
 80049d0:	d402      	bmi.n	80049d8 <_vfiprintf_r+0x34>
 80049d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d4:	f7ff fe6d 	bl	80046b2 <__retarget_lock_acquire_recursive>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	071b      	lsls	r3, r3, #28
 80049dc:	d502      	bpl.n	80049e4 <_vfiprintf_r+0x40>
 80049de:	6923      	ldr	r3, [r4, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d11d      	bne.n	8004a20 <_vfiprintf_r+0x7c>
 80049e4:	0021      	movs	r1, r4
 80049e6:	0030      	movs	r0, r6
 80049e8:	f7ff fc1c 	bl	8004224 <__swsetup_r>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d017      	beq.n	8004a20 <_vfiprintf_r+0x7c>
 80049f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049f2:	07db      	lsls	r3, r3, #31
 80049f4:	d50d      	bpl.n	8004a12 <_vfiprintf_r+0x6e>
 80049f6:	2001      	movs	r0, #1
 80049f8:	4240      	negs	r0, r0
 80049fa:	b021      	add	sp, #132	; 0x84
 80049fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fe:	4b7f      	ldr	r3, [pc, #508]	; (8004bfc <_vfiprintf_r+0x258>)
 8004a00:	429c      	cmp	r4, r3
 8004a02:	d101      	bne.n	8004a08 <_vfiprintf_r+0x64>
 8004a04:	68b4      	ldr	r4, [r6, #8]
 8004a06:	e7de      	b.n	80049c6 <_vfiprintf_r+0x22>
 8004a08:	4b7d      	ldr	r3, [pc, #500]	; (8004c00 <_vfiprintf_r+0x25c>)
 8004a0a:	429c      	cmp	r4, r3
 8004a0c:	d1db      	bne.n	80049c6 <_vfiprintf_r+0x22>
 8004a0e:	68f4      	ldr	r4, [r6, #12]
 8004a10:	e7d9      	b.n	80049c6 <_vfiprintf_r+0x22>
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	059b      	lsls	r3, r3, #22
 8004a16:	d4ee      	bmi.n	80049f6 <_vfiprintf_r+0x52>
 8004a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a1a:	f7ff fe4b 	bl	80046b4 <__retarget_lock_release_recursive>
 8004a1e:	e7ea      	b.n	80049f6 <_vfiprintf_r+0x52>
 8004a20:	2300      	movs	r3, #0
 8004a22:	ad08      	add	r5, sp, #32
 8004a24:	616b      	str	r3, [r5, #20]
 8004a26:	3320      	adds	r3, #32
 8004a28:	766b      	strb	r3, [r5, #25]
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	76ab      	strb	r3, [r5, #26]
 8004a2e:	9707      	str	r7, [sp, #28]
 8004a30:	9f03      	ldr	r7, [sp, #12]
 8004a32:	783b      	ldrb	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <_vfiprintf_r+0x98>
 8004a38:	2b25      	cmp	r3, #37	; 0x25
 8004a3a:	d14e      	bne.n	8004ada <_vfiprintf_r+0x136>
 8004a3c:	9b03      	ldr	r3, [sp, #12]
 8004a3e:	1afb      	subs	r3, r7, r3
 8004a40:	9305      	str	r3, [sp, #20]
 8004a42:	9b03      	ldr	r3, [sp, #12]
 8004a44:	429f      	cmp	r7, r3
 8004a46:	d00d      	beq.n	8004a64 <_vfiprintf_r+0xc0>
 8004a48:	9b05      	ldr	r3, [sp, #20]
 8004a4a:	0021      	movs	r1, r4
 8004a4c:	0030      	movs	r0, r6
 8004a4e:	9a03      	ldr	r2, [sp, #12]
 8004a50:	f7ff ff95 	bl	800497e <__sfputs_r>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d100      	bne.n	8004a5a <_vfiprintf_r+0xb6>
 8004a58:	e0b5      	b.n	8004bc6 <_vfiprintf_r+0x222>
 8004a5a:	696a      	ldr	r2, [r5, #20]
 8004a5c:	9b05      	ldr	r3, [sp, #20]
 8004a5e:	4694      	mov	ip, r2
 8004a60:	4463      	add	r3, ip
 8004a62:	616b      	str	r3, [r5, #20]
 8004a64:	783b      	ldrb	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d100      	bne.n	8004a6c <_vfiprintf_r+0xc8>
 8004a6a:	e0ac      	b.n	8004bc6 <_vfiprintf_r+0x222>
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	1c7b      	adds	r3, r7, #1
 8004a70:	9303      	str	r3, [sp, #12]
 8004a72:	2300      	movs	r3, #0
 8004a74:	4252      	negs	r2, r2
 8004a76:	606a      	str	r2, [r5, #4]
 8004a78:	a904      	add	r1, sp, #16
 8004a7a:	3254      	adds	r2, #84	; 0x54
 8004a7c:	1852      	adds	r2, r2, r1
 8004a7e:	602b      	str	r3, [r5, #0]
 8004a80:	60eb      	str	r3, [r5, #12]
 8004a82:	60ab      	str	r3, [r5, #8]
 8004a84:	7013      	strb	r3, [r2, #0]
 8004a86:	65ab      	str	r3, [r5, #88]	; 0x58
 8004a88:	9b03      	ldr	r3, [sp, #12]
 8004a8a:	2205      	movs	r2, #5
 8004a8c:	7819      	ldrb	r1, [r3, #0]
 8004a8e:	485d      	ldr	r0, [pc, #372]	; (8004c04 <_vfiprintf_r+0x260>)
 8004a90:	f000 fb00 	bl	8005094 <memchr>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	1c5f      	adds	r7, r3, #1
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d120      	bne.n	8004ade <_vfiprintf_r+0x13a>
 8004a9c:	682a      	ldr	r2, [r5, #0]
 8004a9e:	06d3      	lsls	r3, r2, #27
 8004aa0:	d504      	bpl.n	8004aac <_vfiprintf_r+0x108>
 8004aa2:	2353      	movs	r3, #83	; 0x53
 8004aa4:	a904      	add	r1, sp, #16
 8004aa6:	185b      	adds	r3, r3, r1
 8004aa8:	2120      	movs	r1, #32
 8004aaa:	7019      	strb	r1, [r3, #0]
 8004aac:	0713      	lsls	r3, r2, #28
 8004aae:	d504      	bpl.n	8004aba <_vfiprintf_r+0x116>
 8004ab0:	2353      	movs	r3, #83	; 0x53
 8004ab2:	a904      	add	r1, sp, #16
 8004ab4:	185b      	adds	r3, r3, r1
 8004ab6:	212b      	movs	r1, #43	; 0x2b
 8004ab8:	7019      	strb	r1, [r3, #0]
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac0:	d016      	beq.n	8004af0 <_vfiprintf_r+0x14c>
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	68eb      	ldr	r3, [r5, #12]
 8004ac6:	9f03      	ldr	r7, [sp, #12]
 8004ac8:	783a      	ldrb	r2, [r7, #0]
 8004aca:	1c78      	adds	r0, r7, #1
 8004acc:	3a30      	subs	r2, #48	; 0x30
 8004ace:	4684      	mov	ip, r0
 8004ad0:	2a09      	cmp	r2, #9
 8004ad2:	d94f      	bls.n	8004b74 <_vfiprintf_r+0x1d0>
 8004ad4:	2900      	cmp	r1, #0
 8004ad6:	d111      	bne.n	8004afc <_vfiprintf_r+0x158>
 8004ad8:	e017      	b.n	8004b0a <_vfiprintf_r+0x166>
 8004ada:	3701      	adds	r7, #1
 8004adc:	e7a9      	b.n	8004a32 <_vfiprintf_r+0x8e>
 8004ade:	4b49      	ldr	r3, [pc, #292]	; (8004c04 <_vfiprintf_r+0x260>)
 8004ae0:	682a      	ldr	r2, [r5, #0]
 8004ae2:	1ac0      	subs	r0, r0, r3
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4083      	lsls	r3, r0
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	602b      	str	r3, [r5, #0]
 8004aec:	9703      	str	r7, [sp, #12]
 8004aee:	e7cb      	b.n	8004a88 <_vfiprintf_r+0xe4>
 8004af0:	9b07      	ldr	r3, [sp, #28]
 8004af2:	1d19      	adds	r1, r3, #4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	9107      	str	r1, [sp, #28]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	db01      	blt.n	8004b00 <_vfiprintf_r+0x15c>
 8004afc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004afe:	e004      	b.n	8004b0a <_vfiprintf_r+0x166>
 8004b00:	425b      	negs	r3, r3
 8004b02:	60eb      	str	r3, [r5, #12]
 8004b04:	2302      	movs	r3, #2
 8004b06:	4313      	orrs	r3, r2
 8004b08:	602b      	str	r3, [r5, #0]
 8004b0a:	783b      	ldrb	r3, [r7, #0]
 8004b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b0e:	d10a      	bne.n	8004b26 <_vfiprintf_r+0x182>
 8004b10:	787b      	ldrb	r3, [r7, #1]
 8004b12:	2b2a      	cmp	r3, #42	; 0x2a
 8004b14:	d137      	bne.n	8004b86 <_vfiprintf_r+0x1e2>
 8004b16:	9b07      	ldr	r3, [sp, #28]
 8004b18:	3702      	adds	r7, #2
 8004b1a:	1d1a      	adds	r2, r3, #4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	9207      	str	r2, [sp, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	db2d      	blt.n	8004b80 <_vfiprintf_r+0x1dc>
 8004b24:	9309      	str	r3, [sp, #36]	; 0x24
 8004b26:	2203      	movs	r2, #3
 8004b28:	7839      	ldrb	r1, [r7, #0]
 8004b2a:	4837      	ldr	r0, [pc, #220]	; (8004c08 <_vfiprintf_r+0x264>)
 8004b2c:	f000 fab2 	bl	8005094 <memchr>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d007      	beq.n	8004b44 <_vfiprintf_r+0x1a0>
 8004b34:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <_vfiprintf_r+0x264>)
 8004b36:	682a      	ldr	r2, [r5, #0]
 8004b38:	1ac0      	subs	r0, r0, r3
 8004b3a:	2340      	movs	r3, #64	; 0x40
 8004b3c:	4083      	lsls	r3, r0
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	3701      	adds	r7, #1
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	7839      	ldrb	r1, [r7, #0]
 8004b46:	1c7b      	adds	r3, r7, #1
 8004b48:	2206      	movs	r2, #6
 8004b4a:	4830      	ldr	r0, [pc, #192]	; (8004c0c <_vfiprintf_r+0x268>)
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	7629      	strb	r1, [r5, #24]
 8004b50:	f000 faa0 	bl	8005094 <memchr>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d045      	beq.n	8004be4 <_vfiprintf_r+0x240>
 8004b58:	4b2d      	ldr	r3, [pc, #180]	; (8004c10 <_vfiprintf_r+0x26c>)
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d127      	bne.n	8004bae <_vfiprintf_r+0x20a>
 8004b5e:	2207      	movs	r2, #7
 8004b60:	9b07      	ldr	r3, [sp, #28]
 8004b62:	3307      	adds	r3, #7
 8004b64:	4393      	bics	r3, r2
 8004b66:	3308      	adds	r3, #8
 8004b68:	9307      	str	r3, [sp, #28]
 8004b6a:	696b      	ldr	r3, [r5, #20]
 8004b6c:	9a04      	ldr	r2, [sp, #16]
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	616b      	str	r3, [r5, #20]
 8004b72:	e75d      	b.n	8004a30 <_vfiprintf_r+0x8c>
 8004b74:	210a      	movs	r1, #10
 8004b76:	434b      	muls	r3, r1
 8004b78:	4667      	mov	r7, ip
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	3909      	subs	r1, #9
 8004b7e:	e7a3      	b.n	8004ac8 <_vfiprintf_r+0x124>
 8004b80:	2301      	movs	r3, #1
 8004b82:	425b      	negs	r3, r3
 8004b84:	e7ce      	b.n	8004b24 <_vfiprintf_r+0x180>
 8004b86:	2300      	movs	r3, #0
 8004b88:	001a      	movs	r2, r3
 8004b8a:	3701      	adds	r7, #1
 8004b8c:	606b      	str	r3, [r5, #4]
 8004b8e:	7839      	ldrb	r1, [r7, #0]
 8004b90:	1c78      	adds	r0, r7, #1
 8004b92:	3930      	subs	r1, #48	; 0x30
 8004b94:	4684      	mov	ip, r0
 8004b96:	2909      	cmp	r1, #9
 8004b98:	d903      	bls.n	8004ba2 <_vfiprintf_r+0x1fe>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0c3      	beq.n	8004b26 <_vfiprintf_r+0x182>
 8004b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8004ba0:	e7c1      	b.n	8004b26 <_vfiprintf_r+0x182>
 8004ba2:	230a      	movs	r3, #10
 8004ba4:	435a      	muls	r2, r3
 8004ba6:	4667      	mov	r7, ip
 8004ba8:	1852      	adds	r2, r2, r1
 8004baa:	3b09      	subs	r3, #9
 8004bac:	e7ef      	b.n	8004b8e <_vfiprintf_r+0x1ea>
 8004bae:	ab07      	add	r3, sp, #28
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	0022      	movs	r2, r4
 8004bb4:	0029      	movs	r1, r5
 8004bb6:	0030      	movs	r0, r6
 8004bb8:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <_vfiprintf_r+0x270>)
 8004bba:	e000      	b.n	8004bbe <_vfiprintf_r+0x21a>
 8004bbc:	bf00      	nop
 8004bbe:	9004      	str	r0, [sp, #16]
 8004bc0:	9b04      	ldr	r3, [sp, #16]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	d1d1      	bne.n	8004b6a <_vfiprintf_r+0x1c6>
 8004bc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bc8:	07db      	lsls	r3, r3, #31
 8004bca:	d405      	bmi.n	8004bd8 <_vfiprintf_r+0x234>
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	059b      	lsls	r3, r3, #22
 8004bd0:	d402      	bmi.n	8004bd8 <_vfiprintf_r+0x234>
 8004bd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bd4:	f7ff fd6e 	bl	80046b4 <__retarget_lock_release_recursive>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	065b      	lsls	r3, r3, #25
 8004bdc:	d500      	bpl.n	8004be0 <_vfiprintf_r+0x23c>
 8004bde:	e70a      	b.n	80049f6 <_vfiprintf_r+0x52>
 8004be0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004be2:	e70a      	b.n	80049fa <_vfiprintf_r+0x56>
 8004be4:	ab07      	add	r3, sp, #28
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	0022      	movs	r2, r4
 8004bea:	0029      	movs	r1, r5
 8004bec:	0030      	movs	r0, r6
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <_vfiprintf_r+0x270>)
 8004bf0:	f000 f882 	bl	8004cf8 <_printf_i>
 8004bf4:	e7e3      	b.n	8004bbe <_vfiprintf_r+0x21a>
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	08005774 	.word	0x08005774
 8004bfc:	08005794 	.word	0x08005794
 8004c00:	08005754 	.word	0x08005754
 8004c04:	080057b4 	.word	0x080057b4
 8004c08:	080057ba 	.word	0x080057ba
 8004c0c:	080057be 	.word	0x080057be
 8004c10:	00000000 	.word	0x00000000
 8004c14:	0800497f 	.word	0x0800497f

08004c18 <_printf_common>:
 8004c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c1a:	0015      	movs	r5, r2
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	688a      	ldr	r2, [r1, #8]
 8004c20:	690b      	ldr	r3, [r1, #16]
 8004c22:	000c      	movs	r4, r1
 8004c24:	9000      	str	r0, [sp, #0]
 8004c26:	4293      	cmp	r3, r2
 8004c28:	da00      	bge.n	8004c2c <_printf_common+0x14>
 8004c2a:	0013      	movs	r3, r2
 8004c2c:	0022      	movs	r2, r4
 8004c2e:	602b      	str	r3, [r5, #0]
 8004c30:	3243      	adds	r2, #67	; 0x43
 8004c32:	7812      	ldrb	r2, [r2, #0]
 8004c34:	2a00      	cmp	r2, #0
 8004c36:	d001      	beq.n	8004c3c <_printf_common+0x24>
 8004c38:	3301      	adds	r3, #1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	069b      	lsls	r3, r3, #26
 8004c40:	d502      	bpl.n	8004c48 <_printf_common+0x30>
 8004c42:	682b      	ldr	r3, [r5, #0]
 8004c44:	3302      	adds	r3, #2
 8004c46:	602b      	str	r3, [r5, #0]
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	2306      	movs	r3, #6
 8004c4c:	0017      	movs	r7, r2
 8004c4e:	401f      	ands	r7, r3
 8004c50:	421a      	tst	r2, r3
 8004c52:	d027      	beq.n	8004ca4 <_printf_common+0x8c>
 8004c54:	0023      	movs	r3, r4
 8004c56:	3343      	adds	r3, #67	; 0x43
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	1e5a      	subs	r2, r3, #1
 8004c5c:	4193      	sbcs	r3, r2
 8004c5e:	6822      	ldr	r2, [r4, #0]
 8004c60:	0692      	lsls	r2, r2, #26
 8004c62:	d430      	bmi.n	8004cc6 <_printf_common+0xae>
 8004c64:	0022      	movs	r2, r4
 8004c66:	9901      	ldr	r1, [sp, #4]
 8004c68:	9800      	ldr	r0, [sp, #0]
 8004c6a:	9e08      	ldr	r6, [sp, #32]
 8004c6c:	3243      	adds	r2, #67	; 0x43
 8004c6e:	47b0      	blx	r6
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d025      	beq.n	8004cc0 <_printf_common+0xa8>
 8004c74:	2306      	movs	r3, #6
 8004c76:	6820      	ldr	r0, [r4, #0]
 8004c78:	682a      	ldr	r2, [r5, #0]
 8004c7a:	68e1      	ldr	r1, [r4, #12]
 8004c7c:	2500      	movs	r5, #0
 8004c7e:	4003      	ands	r3, r0
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d103      	bne.n	8004c8c <_printf_common+0x74>
 8004c84:	1a8d      	subs	r5, r1, r2
 8004c86:	43eb      	mvns	r3, r5
 8004c88:	17db      	asrs	r3, r3, #31
 8004c8a:	401d      	ands	r5, r3
 8004c8c:	68a3      	ldr	r3, [r4, #8]
 8004c8e:	6922      	ldr	r2, [r4, #16]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	dd01      	ble.n	8004c98 <_printf_common+0x80>
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	18ed      	adds	r5, r5, r3
 8004c98:	2700      	movs	r7, #0
 8004c9a:	42bd      	cmp	r5, r7
 8004c9c:	d120      	bne.n	8004ce0 <_printf_common+0xc8>
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e010      	b.n	8004cc4 <_printf_common+0xac>
 8004ca2:	3701      	adds	r7, #1
 8004ca4:	68e3      	ldr	r3, [r4, #12]
 8004ca6:	682a      	ldr	r2, [r5, #0]
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	42bb      	cmp	r3, r7
 8004cac:	ddd2      	ble.n	8004c54 <_printf_common+0x3c>
 8004cae:	0022      	movs	r2, r4
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	9901      	ldr	r1, [sp, #4]
 8004cb4:	9800      	ldr	r0, [sp, #0]
 8004cb6:	9e08      	ldr	r6, [sp, #32]
 8004cb8:	3219      	adds	r2, #25
 8004cba:	47b0      	blx	r6
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d1f0      	bne.n	8004ca2 <_printf_common+0x8a>
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	4240      	negs	r0, r0
 8004cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cc6:	2030      	movs	r0, #48	; 0x30
 8004cc8:	18e1      	adds	r1, r4, r3
 8004cca:	3143      	adds	r1, #67	; 0x43
 8004ccc:	7008      	strb	r0, [r1, #0]
 8004cce:	0021      	movs	r1, r4
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	3145      	adds	r1, #69	; 0x45
 8004cd4:	7809      	ldrb	r1, [r1, #0]
 8004cd6:	18a2      	adds	r2, r4, r2
 8004cd8:	3243      	adds	r2, #67	; 0x43
 8004cda:	3302      	adds	r3, #2
 8004cdc:	7011      	strb	r1, [r2, #0]
 8004cde:	e7c1      	b.n	8004c64 <_printf_common+0x4c>
 8004ce0:	0022      	movs	r2, r4
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	9901      	ldr	r1, [sp, #4]
 8004ce6:	9800      	ldr	r0, [sp, #0]
 8004ce8:	9e08      	ldr	r6, [sp, #32]
 8004cea:	321a      	adds	r2, #26
 8004cec:	47b0      	blx	r6
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d0e6      	beq.n	8004cc0 <_printf_common+0xa8>
 8004cf2:	3701      	adds	r7, #1
 8004cf4:	e7d1      	b.n	8004c9a <_printf_common+0x82>
	...

08004cf8 <_printf_i>:
 8004cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cfa:	b08b      	sub	sp, #44	; 0x2c
 8004cfc:	9206      	str	r2, [sp, #24]
 8004cfe:	000a      	movs	r2, r1
 8004d00:	3243      	adds	r2, #67	; 0x43
 8004d02:	9307      	str	r3, [sp, #28]
 8004d04:	9005      	str	r0, [sp, #20]
 8004d06:	9204      	str	r2, [sp, #16]
 8004d08:	7e0a      	ldrb	r2, [r1, #24]
 8004d0a:	000c      	movs	r4, r1
 8004d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d0e:	2a78      	cmp	r2, #120	; 0x78
 8004d10:	d807      	bhi.n	8004d22 <_printf_i+0x2a>
 8004d12:	2a62      	cmp	r2, #98	; 0x62
 8004d14:	d809      	bhi.n	8004d2a <_printf_i+0x32>
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	d100      	bne.n	8004d1c <_printf_i+0x24>
 8004d1a:	e0c1      	b.n	8004ea0 <_printf_i+0x1a8>
 8004d1c:	2a58      	cmp	r2, #88	; 0x58
 8004d1e:	d100      	bne.n	8004d22 <_printf_i+0x2a>
 8004d20:	e08c      	b.n	8004e3c <_printf_i+0x144>
 8004d22:	0026      	movs	r6, r4
 8004d24:	3642      	adds	r6, #66	; 0x42
 8004d26:	7032      	strb	r2, [r6, #0]
 8004d28:	e022      	b.n	8004d70 <_printf_i+0x78>
 8004d2a:	0010      	movs	r0, r2
 8004d2c:	3863      	subs	r0, #99	; 0x63
 8004d2e:	2815      	cmp	r0, #21
 8004d30:	d8f7      	bhi.n	8004d22 <_printf_i+0x2a>
 8004d32:	f7fb f9e9 	bl	8000108 <__gnu_thumb1_case_shi>
 8004d36:	0016      	.short	0x0016
 8004d38:	fff6001f 	.word	0xfff6001f
 8004d3c:	fff6fff6 	.word	0xfff6fff6
 8004d40:	001ffff6 	.word	0x001ffff6
 8004d44:	fff6fff6 	.word	0xfff6fff6
 8004d48:	fff6fff6 	.word	0xfff6fff6
 8004d4c:	003600a8 	.word	0x003600a8
 8004d50:	fff6009a 	.word	0xfff6009a
 8004d54:	00b9fff6 	.word	0x00b9fff6
 8004d58:	0036fff6 	.word	0x0036fff6
 8004d5c:	fff6fff6 	.word	0xfff6fff6
 8004d60:	009e      	.short	0x009e
 8004d62:	0026      	movs	r6, r4
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	3642      	adds	r6, #66	; 0x42
 8004d68:	1d11      	adds	r1, r2, #4
 8004d6a:	6019      	str	r1, [r3, #0]
 8004d6c:	6813      	ldr	r3, [r2, #0]
 8004d6e:	7033      	strb	r3, [r6, #0]
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0a7      	b.n	8004ec4 <_printf_i+0x1cc>
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	6819      	ldr	r1, [r3, #0]
 8004d78:	1d0a      	adds	r2, r1, #4
 8004d7a:	0605      	lsls	r5, r0, #24
 8004d7c:	d50b      	bpl.n	8004d96 <_printf_i+0x9e>
 8004d7e:	680d      	ldr	r5, [r1, #0]
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	2d00      	cmp	r5, #0
 8004d84:	da03      	bge.n	8004d8e <_printf_i+0x96>
 8004d86:	232d      	movs	r3, #45	; 0x2d
 8004d88:	9a04      	ldr	r2, [sp, #16]
 8004d8a:	426d      	negs	r5, r5
 8004d8c:	7013      	strb	r3, [r2, #0]
 8004d8e:	4b61      	ldr	r3, [pc, #388]	; (8004f14 <_printf_i+0x21c>)
 8004d90:	270a      	movs	r7, #10
 8004d92:	9303      	str	r3, [sp, #12]
 8004d94:	e01b      	b.n	8004dce <_printf_i+0xd6>
 8004d96:	680d      	ldr	r5, [r1, #0]
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	0641      	lsls	r1, r0, #25
 8004d9c:	d5f1      	bpl.n	8004d82 <_printf_i+0x8a>
 8004d9e:	b22d      	sxth	r5, r5
 8004da0:	e7ef      	b.n	8004d82 <_printf_i+0x8a>
 8004da2:	680d      	ldr	r5, [r1, #0]
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	1d08      	adds	r0, r1, #4
 8004da8:	6018      	str	r0, [r3, #0]
 8004daa:	062e      	lsls	r6, r5, #24
 8004dac:	d501      	bpl.n	8004db2 <_printf_i+0xba>
 8004dae:	680d      	ldr	r5, [r1, #0]
 8004db0:	e003      	b.n	8004dba <_printf_i+0xc2>
 8004db2:	066d      	lsls	r5, r5, #25
 8004db4:	d5fb      	bpl.n	8004dae <_printf_i+0xb6>
 8004db6:	680d      	ldr	r5, [r1, #0]
 8004db8:	b2ad      	uxth	r5, r5
 8004dba:	4b56      	ldr	r3, [pc, #344]	; (8004f14 <_printf_i+0x21c>)
 8004dbc:	2708      	movs	r7, #8
 8004dbe:	9303      	str	r3, [sp, #12]
 8004dc0:	2a6f      	cmp	r2, #111	; 0x6f
 8004dc2:	d000      	beq.n	8004dc6 <_printf_i+0xce>
 8004dc4:	3702      	adds	r7, #2
 8004dc6:	0023      	movs	r3, r4
 8004dc8:	2200      	movs	r2, #0
 8004dca:	3343      	adds	r3, #67	; 0x43
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	6863      	ldr	r3, [r4, #4]
 8004dd0:	60a3      	str	r3, [r4, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	db03      	blt.n	8004dde <_printf_i+0xe6>
 8004dd6:	2204      	movs	r2, #4
 8004dd8:	6821      	ldr	r1, [r4, #0]
 8004dda:	4391      	bics	r1, r2
 8004ddc:	6021      	str	r1, [r4, #0]
 8004dde:	2d00      	cmp	r5, #0
 8004de0:	d102      	bne.n	8004de8 <_printf_i+0xf0>
 8004de2:	9e04      	ldr	r6, [sp, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <_printf_i+0x10a>
 8004de8:	9e04      	ldr	r6, [sp, #16]
 8004dea:	0028      	movs	r0, r5
 8004dec:	0039      	movs	r1, r7
 8004dee:	f7fb fa1b 	bl	8000228 <__aeabi_uidivmod>
 8004df2:	9b03      	ldr	r3, [sp, #12]
 8004df4:	3e01      	subs	r6, #1
 8004df6:	5c5b      	ldrb	r3, [r3, r1]
 8004df8:	7033      	strb	r3, [r6, #0]
 8004dfa:	002b      	movs	r3, r5
 8004dfc:	0005      	movs	r5, r0
 8004dfe:	429f      	cmp	r7, r3
 8004e00:	d9f3      	bls.n	8004dea <_printf_i+0xf2>
 8004e02:	2f08      	cmp	r7, #8
 8004e04:	d109      	bne.n	8004e1a <_printf_i+0x122>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	07db      	lsls	r3, r3, #31
 8004e0a:	d506      	bpl.n	8004e1a <_printf_i+0x122>
 8004e0c:	6863      	ldr	r3, [r4, #4]
 8004e0e:	6922      	ldr	r2, [r4, #16]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	dc02      	bgt.n	8004e1a <_printf_i+0x122>
 8004e14:	2330      	movs	r3, #48	; 0x30
 8004e16:	3e01      	subs	r6, #1
 8004e18:	7033      	strb	r3, [r6, #0]
 8004e1a:	9b04      	ldr	r3, [sp, #16]
 8004e1c:	1b9b      	subs	r3, r3, r6
 8004e1e:	6123      	str	r3, [r4, #16]
 8004e20:	9b07      	ldr	r3, [sp, #28]
 8004e22:	0021      	movs	r1, r4
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	9805      	ldr	r0, [sp, #20]
 8004e28:	9b06      	ldr	r3, [sp, #24]
 8004e2a:	aa09      	add	r2, sp, #36	; 0x24
 8004e2c:	f7ff fef4 	bl	8004c18 <_printf_common>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d14c      	bne.n	8004ece <_printf_i+0x1d6>
 8004e34:	2001      	movs	r0, #1
 8004e36:	4240      	negs	r0, r0
 8004e38:	b00b      	add	sp, #44	; 0x2c
 8004e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3c:	3145      	adds	r1, #69	; 0x45
 8004e3e:	700a      	strb	r2, [r1, #0]
 8004e40:	4a34      	ldr	r2, [pc, #208]	; (8004f14 <_printf_i+0x21c>)
 8004e42:	9203      	str	r2, [sp, #12]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	6821      	ldr	r1, [r4, #0]
 8004e48:	ca20      	ldmia	r2!, {r5}
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	0608      	lsls	r0, r1, #24
 8004e4e:	d516      	bpl.n	8004e7e <_printf_i+0x186>
 8004e50:	07cb      	lsls	r3, r1, #31
 8004e52:	d502      	bpl.n	8004e5a <_printf_i+0x162>
 8004e54:	2320      	movs	r3, #32
 8004e56:	4319      	orrs	r1, r3
 8004e58:	6021      	str	r1, [r4, #0]
 8004e5a:	2710      	movs	r7, #16
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	d1b2      	bne.n	8004dc6 <_printf_i+0xce>
 8004e60:	2320      	movs	r3, #32
 8004e62:	6822      	ldr	r2, [r4, #0]
 8004e64:	439a      	bics	r2, r3
 8004e66:	6022      	str	r2, [r4, #0]
 8004e68:	e7ad      	b.n	8004dc6 <_printf_i+0xce>
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	6809      	ldr	r1, [r1, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	6022      	str	r2, [r4, #0]
 8004e72:	0022      	movs	r2, r4
 8004e74:	2178      	movs	r1, #120	; 0x78
 8004e76:	3245      	adds	r2, #69	; 0x45
 8004e78:	7011      	strb	r1, [r2, #0]
 8004e7a:	4a27      	ldr	r2, [pc, #156]	; (8004f18 <_printf_i+0x220>)
 8004e7c:	e7e1      	b.n	8004e42 <_printf_i+0x14a>
 8004e7e:	0648      	lsls	r0, r1, #25
 8004e80:	d5e6      	bpl.n	8004e50 <_printf_i+0x158>
 8004e82:	b2ad      	uxth	r5, r5
 8004e84:	e7e4      	b.n	8004e50 <_printf_i+0x158>
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	680d      	ldr	r5, [r1, #0]
 8004e8a:	1d10      	adds	r0, r2, #4
 8004e8c:	6949      	ldr	r1, [r1, #20]
 8004e8e:	6018      	str	r0, [r3, #0]
 8004e90:	6813      	ldr	r3, [r2, #0]
 8004e92:	062e      	lsls	r6, r5, #24
 8004e94:	d501      	bpl.n	8004e9a <_printf_i+0x1a2>
 8004e96:	6019      	str	r1, [r3, #0]
 8004e98:	e002      	b.n	8004ea0 <_printf_i+0x1a8>
 8004e9a:	066d      	lsls	r5, r5, #25
 8004e9c:	d5fb      	bpl.n	8004e96 <_printf_i+0x19e>
 8004e9e:	8019      	strh	r1, [r3, #0]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	9e04      	ldr	r6, [sp, #16]
 8004ea4:	6123      	str	r3, [r4, #16]
 8004ea6:	e7bb      	b.n	8004e20 <_printf_i+0x128>
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	1d11      	adds	r1, r2, #4
 8004eac:	6019      	str	r1, [r3, #0]
 8004eae:	6816      	ldr	r6, [r2, #0]
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	0030      	movs	r0, r6
 8004eb4:	6862      	ldr	r2, [r4, #4]
 8004eb6:	f000 f8ed 	bl	8005094 <memchr>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	d001      	beq.n	8004ec2 <_printf_i+0x1ca>
 8004ebe:	1b80      	subs	r0, r0, r6
 8004ec0:	6060      	str	r0, [r4, #4]
 8004ec2:	6863      	ldr	r3, [r4, #4]
 8004ec4:	6123      	str	r3, [r4, #16]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9a04      	ldr	r2, [sp, #16]
 8004eca:	7013      	strb	r3, [r2, #0]
 8004ecc:	e7a8      	b.n	8004e20 <_printf_i+0x128>
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	0032      	movs	r2, r6
 8004ed2:	9906      	ldr	r1, [sp, #24]
 8004ed4:	9805      	ldr	r0, [sp, #20]
 8004ed6:	9d07      	ldr	r5, [sp, #28]
 8004ed8:	47a8      	blx	r5
 8004eda:	1c43      	adds	r3, r0, #1
 8004edc:	d0aa      	beq.n	8004e34 <_printf_i+0x13c>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	079b      	lsls	r3, r3, #30
 8004ee2:	d415      	bmi.n	8004f10 <_printf_i+0x218>
 8004ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee6:	68e0      	ldr	r0, [r4, #12]
 8004ee8:	4298      	cmp	r0, r3
 8004eea:	daa5      	bge.n	8004e38 <_printf_i+0x140>
 8004eec:	0018      	movs	r0, r3
 8004eee:	e7a3      	b.n	8004e38 <_printf_i+0x140>
 8004ef0:	0022      	movs	r2, r4
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	9906      	ldr	r1, [sp, #24]
 8004ef6:	9805      	ldr	r0, [sp, #20]
 8004ef8:	9e07      	ldr	r6, [sp, #28]
 8004efa:	3219      	adds	r2, #25
 8004efc:	47b0      	blx	r6
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	d098      	beq.n	8004e34 <_printf_i+0x13c>
 8004f02:	3501      	adds	r5, #1
 8004f04:	68e3      	ldr	r3, [r4, #12]
 8004f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	42ab      	cmp	r3, r5
 8004f0c:	dcf0      	bgt.n	8004ef0 <_printf_i+0x1f8>
 8004f0e:	e7e9      	b.n	8004ee4 <_printf_i+0x1ec>
 8004f10:	2500      	movs	r5, #0
 8004f12:	e7f7      	b.n	8004f04 <_printf_i+0x20c>
 8004f14:	080057c5 	.word	0x080057c5
 8004f18:	080057d6 	.word	0x080057d6

08004f1c <_sbrk_r>:
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	b570      	push	{r4, r5, r6, lr}
 8004f20:	4d06      	ldr	r5, [pc, #24]	; (8004f3c <_sbrk_r+0x20>)
 8004f22:	0004      	movs	r4, r0
 8004f24:	0008      	movs	r0, r1
 8004f26:	602b      	str	r3, [r5, #0]
 8004f28:	f7fc fef0 	bl	8001d0c <_sbrk>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d103      	bne.n	8004f38 <_sbrk_r+0x1c>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d000      	beq.n	8004f38 <_sbrk_r+0x1c>
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	bd70      	pop	{r4, r5, r6, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	20000400 	.word	0x20000400

08004f40 <__sread>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	000c      	movs	r4, r1
 8004f44:	250e      	movs	r5, #14
 8004f46:	5f49      	ldrsh	r1, [r1, r5]
 8004f48:	f000 f8c0 	bl	80050cc <_read_r>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	db03      	blt.n	8004f58 <__sread+0x18>
 8004f50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f52:	181b      	adds	r3, r3, r0
 8004f54:	6563      	str	r3, [r4, #84]	; 0x54
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	89a3      	ldrh	r3, [r4, #12]
 8004f5a:	4a02      	ldr	r2, [pc, #8]	; (8004f64 <__sread+0x24>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	81a3      	strh	r3, [r4, #12]
 8004f60:	e7f9      	b.n	8004f56 <__sread+0x16>
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	ffffefff 	.word	0xffffefff

08004f68 <__swrite>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	001f      	movs	r7, r3
 8004f6c:	898b      	ldrh	r3, [r1, #12]
 8004f6e:	0005      	movs	r5, r0
 8004f70:	000c      	movs	r4, r1
 8004f72:	0016      	movs	r6, r2
 8004f74:	05db      	lsls	r3, r3, #23
 8004f76:	d505      	bpl.n	8004f84 <__swrite+0x1c>
 8004f78:	230e      	movs	r3, #14
 8004f7a:	5ec9      	ldrsh	r1, [r1, r3]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2302      	movs	r3, #2
 8004f80:	f000 f874 	bl	800506c <_lseek_r>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	4a05      	ldr	r2, [pc, #20]	; (8004f9c <__swrite+0x34>)
 8004f88:	0028      	movs	r0, r5
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	0032      	movs	r2, r6
 8004f90:	230e      	movs	r3, #14
 8004f92:	5ee1      	ldrsh	r1, [r4, r3]
 8004f94:	003b      	movs	r3, r7
 8004f96:	f000 f81f 	bl	8004fd8 <_write_r>
 8004f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9c:	ffffefff 	.word	0xffffefff

08004fa0 <__sseek>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	000c      	movs	r4, r1
 8004fa4:	250e      	movs	r5, #14
 8004fa6:	5f49      	ldrsh	r1, [r1, r5]
 8004fa8:	f000 f860 	bl	800506c <_lseek_r>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	1c42      	adds	r2, r0, #1
 8004fb0:	d103      	bne.n	8004fba <__sseek+0x1a>
 8004fb2:	4a05      	ldr	r2, [pc, #20]	; (8004fc8 <__sseek+0x28>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
 8004fba:	2280      	movs	r2, #128	; 0x80
 8004fbc:	0152      	lsls	r2, r2, #5
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	81a3      	strh	r3, [r4, #12]
 8004fc2:	6560      	str	r0, [r4, #84]	; 0x54
 8004fc4:	e7f8      	b.n	8004fb8 <__sseek+0x18>
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	ffffefff 	.word	0xffffefff

08004fcc <__sclose>:
 8004fcc:	b510      	push	{r4, lr}
 8004fce:	230e      	movs	r3, #14
 8004fd0:	5ec9      	ldrsh	r1, [r1, r3]
 8004fd2:	f000 f815 	bl	8005000 <_close_r>
 8004fd6:	bd10      	pop	{r4, pc}

08004fd8 <_write_r>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	0004      	movs	r4, r0
 8004fdc:	0008      	movs	r0, r1
 8004fde:	0011      	movs	r1, r2
 8004fe0:	001a      	movs	r2, r3
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	4d05      	ldr	r5, [pc, #20]	; (8004ffc <_write_r+0x24>)
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	f7fc fe47 	bl	8001c7a <_write>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d103      	bne.n	8004ff8 <_write_r+0x20>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d000      	beq.n	8004ff8 <_write_r+0x20>
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	20000400 	.word	0x20000400

08005000 <_close_r>:
 8005000:	2300      	movs	r3, #0
 8005002:	b570      	push	{r4, r5, r6, lr}
 8005004:	4d06      	ldr	r5, [pc, #24]	; (8005020 <_close_r+0x20>)
 8005006:	0004      	movs	r4, r0
 8005008:	0008      	movs	r0, r1
 800500a:	602b      	str	r3, [r5, #0]
 800500c:	f7fc fe51 	bl	8001cb2 <_close>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d103      	bne.n	800501c <_close_r+0x1c>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d000      	beq.n	800501c <_close_r+0x1c>
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	bd70      	pop	{r4, r5, r6, pc}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	20000400 	.word	0x20000400

08005024 <_fstat_r>:
 8005024:	2300      	movs	r3, #0
 8005026:	b570      	push	{r4, r5, r6, lr}
 8005028:	4d06      	ldr	r5, [pc, #24]	; (8005044 <_fstat_r+0x20>)
 800502a:	0004      	movs	r4, r0
 800502c:	0008      	movs	r0, r1
 800502e:	0011      	movs	r1, r2
 8005030:	602b      	str	r3, [r5, #0]
 8005032:	f7fc fe48 	bl	8001cc6 <_fstat>
 8005036:	1c43      	adds	r3, r0, #1
 8005038:	d103      	bne.n	8005042 <_fstat_r+0x1e>
 800503a:	682b      	ldr	r3, [r5, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d000      	beq.n	8005042 <_fstat_r+0x1e>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	20000400 	.word	0x20000400

08005048 <_isatty_r>:
 8005048:	2300      	movs	r3, #0
 800504a:	b570      	push	{r4, r5, r6, lr}
 800504c:	4d06      	ldr	r5, [pc, #24]	; (8005068 <_isatty_r+0x20>)
 800504e:	0004      	movs	r4, r0
 8005050:	0008      	movs	r0, r1
 8005052:	602b      	str	r3, [r5, #0]
 8005054:	f7fc fe45 	bl	8001ce2 <_isatty>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d103      	bne.n	8005064 <_isatty_r+0x1c>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d000      	beq.n	8005064 <_isatty_r+0x1c>
 8005062:	6023      	str	r3, [r4, #0]
 8005064:	bd70      	pop	{r4, r5, r6, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	20000400 	.word	0x20000400

0800506c <_lseek_r>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	0004      	movs	r4, r0
 8005070:	0008      	movs	r0, r1
 8005072:	0011      	movs	r1, r2
 8005074:	001a      	movs	r2, r3
 8005076:	2300      	movs	r3, #0
 8005078:	4d05      	ldr	r5, [pc, #20]	; (8005090 <_lseek_r+0x24>)
 800507a:	602b      	str	r3, [r5, #0]
 800507c:	f7fc fe3a 	bl	8001cf4 <_lseek>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d103      	bne.n	800508c <_lseek_r+0x20>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d000      	beq.n	800508c <_lseek_r+0x20>
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	bd70      	pop	{r4, r5, r6, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	20000400 	.word	0x20000400

08005094 <memchr>:
 8005094:	b2c9      	uxtb	r1, r1
 8005096:	1882      	adds	r2, r0, r2
 8005098:	4290      	cmp	r0, r2
 800509a:	d101      	bne.n	80050a0 <memchr+0xc>
 800509c:	2000      	movs	r0, #0
 800509e:	4770      	bx	lr
 80050a0:	7803      	ldrb	r3, [r0, #0]
 80050a2:	428b      	cmp	r3, r1
 80050a4:	d0fb      	beq.n	800509e <memchr+0xa>
 80050a6:	3001      	adds	r0, #1
 80050a8:	e7f6      	b.n	8005098 <memchr+0x4>
	...

080050ac <__malloc_lock>:
 80050ac:	b510      	push	{r4, lr}
 80050ae:	4802      	ldr	r0, [pc, #8]	; (80050b8 <__malloc_lock+0xc>)
 80050b0:	f7ff faff 	bl	80046b2 <__retarget_lock_acquire_recursive>
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	200003f4 	.word	0x200003f4

080050bc <__malloc_unlock>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	4802      	ldr	r0, [pc, #8]	; (80050c8 <__malloc_unlock+0xc>)
 80050c0:	f7ff faf8 	bl	80046b4 <__retarget_lock_release_recursive>
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	200003f4 	.word	0x200003f4

080050cc <_read_r>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	0004      	movs	r4, r0
 80050d0:	0008      	movs	r0, r1
 80050d2:	0011      	movs	r1, r2
 80050d4:	001a      	movs	r2, r3
 80050d6:	2300      	movs	r3, #0
 80050d8:	4d05      	ldr	r5, [pc, #20]	; (80050f0 <_read_r+0x24>)
 80050da:	602b      	str	r3, [r5, #0]
 80050dc:	f7fc fdb0 	bl	8001c40 <_read>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d103      	bne.n	80050ec <_read_r+0x20>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d000      	beq.n	80050ec <_read_r+0x20>
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	46c0      	nop			; (mov r8, r8)
 80050f0:	20000400 	.word	0x20000400

080050f4 <_init>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr

08005100 <_fini>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr
