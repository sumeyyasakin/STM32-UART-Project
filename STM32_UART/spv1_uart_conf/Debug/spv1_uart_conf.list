
spv1_uart_conf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f4  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005578  08005578  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005578  08005578  00015578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005580  08005580  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000074  080055fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  080055fc  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1b5  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b50  00000000  00000000  0002a251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014851  00000000  00000000  0002cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aca4  00000000  00000000  00041591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079327  00000000  00000000  0004c235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c555c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c0  00000000  00000000  000c55ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b6c 	.word	0x08004b6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004b6c 	.word	0x08004b6c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	0002      	movs	r2, r0
 80004c4:	6039      	str	r1, [r7, #0]
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b7f      	cmp	r3, #127	; 0x7f
 80004d0:	d828      	bhi.n	8000524 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d2:	4a2f      	ldr	r2, [pc, #188]	; (8000590 <__NVIC_SetPriority+0xd4>)
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b25b      	sxtb	r3, r3
 80004da:	089b      	lsrs	r3, r3, #2
 80004dc:	33c0      	adds	r3, #192	; 0xc0
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	589b      	ldr	r3, [r3, r2]
 80004e2:	1dfa      	adds	r2, r7, #7
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	0011      	movs	r1, r2
 80004e8:	2203      	movs	r2, #3
 80004ea:	400a      	ands	r2, r1
 80004ec:	00d2      	lsls	r2, r2, #3
 80004ee:	21ff      	movs	r1, #255	; 0xff
 80004f0:	4091      	lsls	r1, r2
 80004f2:	000a      	movs	r2, r1
 80004f4:	43d2      	mvns	r2, r2
 80004f6:	401a      	ands	r2, r3
 80004f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	019b      	lsls	r3, r3, #6
 80004fe:	22ff      	movs	r2, #255	; 0xff
 8000500:	401a      	ands	r2, r3
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	0018      	movs	r0, r3
 8000508:	2303      	movs	r3, #3
 800050a:	4003      	ands	r3, r0
 800050c:	00db      	lsls	r3, r3, #3
 800050e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000510:	481f      	ldr	r0, [pc, #124]	; (8000590 <__NVIC_SetPriority+0xd4>)
 8000512:	1dfb      	adds	r3, r7, #7
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b25b      	sxtb	r3, r3
 8000518:	089b      	lsrs	r3, r3, #2
 800051a:	430a      	orrs	r2, r1
 800051c:	33c0      	adds	r3, #192	; 0xc0
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000522:	e031      	b.n	8000588 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000524:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <__NVIC_SetPriority+0xd8>)
 8000526:	1dfb      	adds	r3, r7, #7
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	0019      	movs	r1, r3
 800052c:	230f      	movs	r3, #15
 800052e:	400b      	ands	r3, r1
 8000530:	3b08      	subs	r3, #8
 8000532:	089b      	lsrs	r3, r3, #2
 8000534:	3306      	adds	r3, #6
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	18d3      	adds	r3, r2, r3
 800053a:	3304      	adds	r3, #4
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1dfa      	adds	r2, r7, #7
 8000540:	7812      	ldrb	r2, [r2, #0]
 8000542:	0011      	movs	r1, r2
 8000544:	2203      	movs	r2, #3
 8000546:	400a      	ands	r2, r1
 8000548:	00d2      	lsls	r2, r2, #3
 800054a:	21ff      	movs	r1, #255	; 0xff
 800054c:	4091      	lsls	r1, r2
 800054e:	000a      	movs	r2, r1
 8000550:	43d2      	mvns	r2, r2
 8000552:	401a      	ands	r2, r3
 8000554:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	019b      	lsls	r3, r3, #6
 800055a:	22ff      	movs	r2, #255	; 0xff
 800055c:	401a      	ands	r2, r3
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	0018      	movs	r0, r3
 8000564:	2303      	movs	r3, #3
 8000566:	4003      	ands	r3, r0
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <__NVIC_SetPriority+0xd8>)
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	001c      	movs	r4, r3
 8000574:	230f      	movs	r3, #15
 8000576:	4023      	ands	r3, r4
 8000578:	3b08      	subs	r3, #8
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	430a      	orrs	r2, r1
 800057e:	3306      	adds	r3, #6
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	18c3      	adds	r3, r0, r3
 8000584:	3304      	adds	r3, #4
 8000586:	601a      	str	r2, [r3, #0]
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b003      	add	sp, #12
 800058e:	bd90      	pop	{r4, r7, pc}
 8000590:	e000e100 	.word	0xe000e100
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1e5a      	subs	r2, r3, #1
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	045b      	lsls	r3, r3, #17
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d301      	bcc.n	80005b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ac:	2301      	movs	r3, #1
 80005ae:	e010      	b.n	80005d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <SysTick_Config+0x44>)
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	3a01      	subs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005b8:	2301      	movs	r3, #1
 80005ba:	425b      	negs	r3, r3
 80005bc:	2103      	movs	r1, #3
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ff7c 	bl	80004bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <SysTick_Config+0x44>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <SysTick_Config+0x44>)
 80005cc:	2207      	movs	r2, #7
 80005ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	0018      	movs	r0, r3
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	e000e010 	.word	0xe000e010

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f001 fae0 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f80e 	bl	8000608 <SystemClock_Config>
  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_USART2_UART_Init();
  //MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  UART_Init();
 80005ec:	f001 f9da 	bl	80019a4 <UART_Init>
  systick_init();
 80005f0:	f000 f88e 	bl	8000710 <systick_init>

  comp_spv1_serial_init();
 80005f4:	f000 f8a6 	bl	8000744 <comp_spv1_serial_init>

  Tx_Frame(SerialCommand);
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <main+0x24>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 f981 	bl	8000904 <Tx_Frame>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x22>
 8000604:	20000000 	.word	0x20000000

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b09d      	sub	sp, #116	; 0x74
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	2438      	movs	r4, #56	; 0x38
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	2338      	movs	r3, #56	; 0x38
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f003 fa4b 	bl	8003ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061e:	2324      	movs	r3, #36	; 0x24
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	0018      	movs	r0, r3
 8000624:	2314      	movs	r3, #20
 8000626:	001a      	movs	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	f003 fa43 	bl	8003ab4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062e:	003b      	movs	r3, r7
 8000630:	0018      	movs	r0, r3
 8000632:	2324      	movs	r3, #36	; 0x24
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f003 fa3c 	bl	8003ab4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <SystemClock_Config+0xd0>)
 8000642:	401a      	ands	r2, r3
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <SystemClock_Config+0xcc>)
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	0109      	lsls	r1, r1, #4
 800064a:	430a      	orrs	r2, r1
 800064c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064e:	0021      	movs	r1, r4
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2202      	movs	r2, #2
 8000654:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2210      	movs	r2, #16
 8000660:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	187b      	adds	r3, r7, r1
 800066a:	0018      	movs	r0, r3
 800066c:	f001 fd6c 	bl	8002148 <HAL_RCC_OscConfig>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000674:	f000 f860 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	2124      	movs	r1, #36	; 0x24
 800067a:	187b      	adds	r3, r7, r1
 800067c:	220f      	movs	r2, #15
 800067e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2201      	movs	r2, #1
 8000684:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f002 f917 	bl	80028d0 <HAL_RCC_ClockConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006a6:	f000 f847 	bl	8000738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2203      	movs	r2, #3
 80006ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006bc:	003b      	movs	r3, r7
 80006be:	0018      	movs	r0, r3
 80006c0:	f002 fb2a 	bl	8002d18 <HAL_RCCEx_PeriphCLKConfig>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c8:	f000 f836 	bl	8000738 <Error_Handler>
  }
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b01d      	add	sp, #116	; 0x74
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	40007000 	.word	0x40007000
 80006d8:	ffffe7ff 	.word	0xffffe7ff

080006dc <SysTick_Handler>:
//}

/* USER CODE BEGIN 4 */

void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Serial.RxSerialTimeOut--;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <SysTick_Handler+0x30>)
 80006e2:	88db      	ldrh	r3, [r3, #6]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <SysTick_Handler+0x30>)
 80006ec:	80da      	strh	r2, [r3, #6]

	if(Serial.RxSerialTimeOut == 0)
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <SysTick_Handler+0x30>)
 80006f0:	88db      	ldrh	r3, [r3, #6]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d105      	bne.n	8000704 <SysTick_Handler+0x28>
	{
		Serial.rxFlag = SERIAL_FLAG_RX_IN_PROGRESS;
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <SysTick_Handler+0x30>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	711a      	strb	r2, [r3, #4]
		Serial.RxState = RXSTATE_SOF;
 80006fe:	4b03      	ldr	r3, [pc, #12]	; (800070c <SysTick_Handler+0x30>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
 // HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000090 	.word	0x20000090

08000710 <systick_init>:

void systick_init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	// Update SystemCoreClock value
	  SystemCoreClockUpdate();
 8000714:	f001 f87c 	bl	8001810 <SystemCoreClockUpdate>
	  SysTick_Config(SystemCoreClock / 1000); // Generate interrupt each 1 ms
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <systick_init+0x24>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	22fa      	movs	r2, #250	; 0xfa
 800071e:	0091      	lsls	r1, r2, #2
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff fcfb 	bl	800011c <__udivsi3>
 8000726:	0003      	movs	r3, r0
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff ff35 	bl	8000598 <SysTick_Config>

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000004 	.word	0x20000004

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
//  __disable_irq();
//  while (1)
//  {
//  }
  /* USER CODE END Error_Handler_Debug */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <comp_spv1_serial_init>:
0x03 = 57600 bps
0x04 = 115200bps*/


void comp_spv1_serial_init()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    RxFrame.NodeAddress = 0x00;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <comp_spv1_serial_init+0x28>)
 800074a:	2200      	movs	r2, #0
 800074c:	709a      	strb	r2, [r3, #2]
  	Serial.RxState = RXSTATE_SOF;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <comp_spv1_serial_init+0x2c>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  	RxFrame.Checksum = 0;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <comp_spv1_serial_init+0x28>)
 8000756:	2200      	movs	r2, #0
 8000758:	711a      	strb	r2, [r3, #4]
  	Serial.ReceivedDataCount = 0;
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <comp_spv1_serial_init+0x2c>)
 800075c:	2200      	movs	r2, #0
 800075e:	805a      	strh	r2, [r3, #2]
  	Serial.rxFlag = 0 ;
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <comp_spv1_serial_init+0x2c>)
 8000762:	2200      	movs	r2, #0
 8000764:	711a      	strb	r2, [r3, #4]
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000009c 	.word	0x2000009c
 8000770:	20000090 	.word	0x20000090

08000774 <spv1_uart_rx_event>:

 void spv1_uart_rx_event (uint8_t rx_data[MAX_DATA_COUNT])
 {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
     Serial.RxSerialTimeOut = MAX_TIMEOUT;
 800077c:	4b5e      	ldr	r3, [pc, #376]	; (80008f8 <spv1_uart_rx_event+0x184>)
 800077e:	2205      	movs	r2, #5
 8000780:	80da      	strh	r2, [r3, #6]
     Serial.rxFlag = SERIAL_FLAG_RX_IN_PROGRESS;
 8000782:	4b5d      	ldr	r3, [pc, #372]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000784:	2201      	movs	r2, #1
 8000786:	711a      	strb	r2, [r3, #4]

      switch (Serial.RxState)
 8000788:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <spv1_uart_rx_event+0x184>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b06      	cmp	r3, #6
 8000790:	d900      	bls.n	8000794 <spv1_uart_rx_event+0x20>
 8000792:	e0a5      	b.n	80008e0 <spv1_uart_rx_event+0x16c>
 8000794:	009a      	lsls	r2, r3, #2
 8000796:	4b59      	ldr	r3, [pc, #356]	; (80008fc <spv1_uart_rx_event+0x188>)
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	469f      	mov	pc, r3
      {
            case RXSTATE_SOF:
            {
                if(rx_data == SERIAL_HEADER_BYTE)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2bff      	cmp	r3, #255	; 0xff
 80007a2:	d000      	beq.n	80007a6 <spv1_uart_rx_event+0x32>
 80007a4:	e0a0      	b.n	80008e8 <spv1_uart_rx_event+0x174>
                {
                     RxFrame.HeaderByte = rx_data;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b55      	ldr	r3, [pc, #340]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007ac:	701a      	strb	r2, [r3, #0]
                     RxFrame.Checksum = 0;
 80007ae:	4b54      	ldr	r3, [pc, #336]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	711a      	strb	r2, [r3, #4]
                     Serial.ReceivedDataCount = 0;
 80007b4:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	805a      	strh	r2, [r3, #2]
                     Serial.RxState = RXSTATE_ADDRESS;
 80007ba:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
                }
             break;
 80007c0:	e092      	b.n	80008e8 <spv1_uart_rx_event+0x174>
            }

            case RXSTATE_ADDRESS:
            {
                 if((rx_data == 0) || (rx_data == RxFrame.NodeAddress))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d006      	beq.n	80007d6 <spv1_uart_rx_event+0x62>
 80007c8:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007ca:	789b      	ldrb	r3, [r3, #2]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	001a      	movs	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d10b      	bne.n	80007ee <spv1_uart_rx_event+0x7a>
                 {
                 	 RxFrame.NodeAddress = rx_data;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b49      	ldr	r3, [pc, #292]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007dc:	709a      	strb	r2, [r3, #2]
                 	 RxFrame.Checksum = rx_data;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b47      	ldr	r3, [pc, #284]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007e4:	711a      	strb	r2, [r3, #4]
                      Serial.RxState = RXSTATE_DATACOUNT_LSB;
 80007e6:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80007e8:	2203      	movs	r2, #3
 80007ea:	701a      	strb	r2, [r3, #0]
                 else
                 {
                    Serial.RxState = RXSTATE_SOF;
                 }

             break;
 80007ec:	e07f      	b.n	80008ee <spv1_uart_rx_event+0x17a>
                    Serial.RxState = RXSTATE_SOF;
 80007ee:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
             break;
 80007f4:	e07b      	b.n	80008ee <spv1_uart_rx_event+0x17a>
            }
            case RXSTATE_DATACOUNT_LSB:
            {
         	   RxFrame.DataLength = rx_data;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b41      	ldr	r3, [pc, #260]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80007fc:	705a      	strb	r2, [r3, #1]
                if((RxFrame.DataLength > MAX_DATA_COUNT + 1) ||(RxFrame.DataLength == 0))
 80007fe:	4b40      	ldr	r3, [pc, #256]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d103      	bne.n	8000814 <spv1_uart_rx_event+0xa0>
                {
                  Serial.RxState = RXSTATE_SOF;
 800080c:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <spv1_uart_rx_event+0x184>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
                else
                {
             	 RxFrame.Checksum += rx_data;
                  Serial.RxState = RXSTATE_COMMAND;
                }
              break;
 8000812:	e06c      	b.n	80008ee <spv1_uart_rx_event+0x17a>
             	 RxFrame.Checksum += rx_data;
 8000814:	4b3a      	ldr	r3, [pc, #232]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000816:	791b      	ldrb	r3, [r3, #4]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	001a      	movs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	189b      	adds	r3, r3, r2
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b37      	ldr	r3, [pc, #220]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000824:	711a      	strb	r2, [r3, #4]
                  Serial.RxState = RXSTATE_COMMAND;
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000828:	2204      	movs	r2, #4
 800082a:	701a      	strb	r2, [r3, #0]
              break;
 800082c:	e05f      	b.n	80008ee <spv1_uart_rx_event+0x17a>
             }
            case RXSTATE_COMMAND:
            {

         	   RxFrame.CommandByte = rx_data;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b33      	ldr	r3, [pc, #204]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000834:	70da      	strb	r2, [r3, #3]
                Serial.ReceivedDataCount =0;
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000838:	2200      	movs	r2, #0
 800083a:	805a      	strh	r2, [r3, #2]
                RxFrame.Checksum += rx_data;
 800083c:	4b30      	ldr	r3, [pc, #192]	; (8000900 <spv1_uart_rx_event+0x18c>)
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	001a      	movs	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	189b      	adds	r3, r3, r2
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <spv1_uart_rx_event+0x18c>)
 800084c:	711a      	strb	r2, [r3, #4]

                if (RxFrame.DataLength == 1)
 800084e:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000850:	785b      	ldrb	r3, [r3, #1]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b01      	cmp	r3, #1
 8000856:	d103      	bne.n	8000860 <spv1_uart_rx_event+0xec>
                {
                  Serial.RxState = RXSTATE_CHECKSUM;
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <spv1_uart_rx_event+0x184>)
 800085a:	2206      	movs	r2, #6
 800085c:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                   Serial.RxState = RXSTATE_DATA;
                }
              break ;
 800085e:	e046      	b.n	80008ee <spv1_uart_rx_event+0x17a>
                   Serial.RxState = RXSTATE_DATA;
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000862:	2205      	movs	r2, #5
 8000864:	701a      	strb	r2, [r3, #0]
              break ;
 8000866:	e042      	b.n	80008ee <spv1_uart_rx_event+0x17a>
             }
             case RXSTATE_DATA:
             {
             	RxFrame.RxDataBuffer[Serial.ReceivedDataCount ++]= rx_data;
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <spv1_uart_rx_event+0x184>)
 800086c:	885b      	ldrh	r3, [r3, #2]
 800086e:	b29b      	uxth	r3, r3
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	b291      	uxth	r1, r2
 8000874:	4a20      	ldr	r2, [pc, #128]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000876:	8051      	strh	r1, [r2, #2]
 8000878:	0019      	movs	r1, r3
 800087a:	b2c2      	uxtb	r2, r0
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <spv1_uart_rx_event+0x18c>)
 800087e:	185b      	adds	r3, r3, r1
 8000880:	715a      	strb	r2, [r3, #5]
             	RxFrame.Checksum += rx_data;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	001a      	movs	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	189b      	adds	r3, r3, r2
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <spv1_uart_rx_event+0x18c>)
 8000892:	711a      	strb	r2, [r3, #4]

                if(Serial.ReceivedDataCount == RxFrame.DataLength-1)
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <spv1_uart_rx_event+0x184>)
 8000896:	885b      	ldrh	r3, [r3, #2]
 8000898:	b29b      	uxth	r3, r3
 800089a:	001a      	movs	r2, r3
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <spv1_uart_rx_event+0x18c>)
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	3b01      	subs	r3, #1
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d121      	bne.n	80008ec <spv1_uart_rx_event+0x178>
                {

                  Serial.RxState = RXSTATE_CHECKSUM;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80008aa:	2206      	movs	r2, #6
 80008ac:	701a      	strb	r2, [r3, #0]
                }

              break;
 80008ae:	e01d      	b.n	80008ec <spv1_uart_rx_event+0x178>
             }
             case RXSTATE_CHECKSUM:
             {
                  if (RxFrame.Checksum == rx_data)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	001a      	movs	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d10c      	bne.n	80008d8 <spv1_uart_rx_event+0x164>
                  {
                    Serial.RxState = RXSTATE_SOF;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
                    Serial.rxFlag = SERIAL_FLAG_COMMAND_READY;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	711a      	strb	r2, [r3, #4]
                    spv1_uart_command_parser(RxFrame.CommandByte);
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <spv1_uart_rx_event+0x18c>)
 80008cc:	78db      	ldrb	r3, [r3, #3]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fe03 	bl	80014dc <spv1_uart_command_parser>
                  else
                  {
                    Serial.RxState = RXSTATE_SOF;
                  }

              break;
 80008d6:	e00a      	b.n	80008ee <spv1_uart_rx_event+0x17a>
                    Serial.RxState = RXSTATE_SOF;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
              break;
 80008de:	e006      	b.n	80008ee <spv1_uart_rx_event+0x17a>
             }

             default:
             {
                Serial.RxState = RXSTATE_SOF;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <spv1_uart_rx_event+0x184>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]

              break ;
 80008e6:	e002      	b.n	80008ee <spv1_uart_rx_event+0x17a>
             break;
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	e000      	b.n	80008ee <spv1_uart_rx_event+0x17a>
              break;
 80008ec:	46c0      	nop			; (mov r8, r8)
             }
        }
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	20000090 	.word	0x20000090
 80008fc:	080052d0 	.word	0x080052d0
 8000900:	2000009c 	.word	0x2000009c

08000904 <Tx_Frame>:


void Tx_Frame (uint8_t SerialCommand)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b0a7      	sub	sp, #156	; 0x9c
 8000908:	af00      	add	r7, sp, #0
 800090a:	0002      	movs	r2, r0
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	701a      	strb	r2, [r3, #0]
	switch(SerialCommand)
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2bb0      	cmp	r3, #176	; 0xb0
 8000916:	dc0b      	bgt.n	8000930 <Tx_Frame+0x2c>
 8000918:	2b80      	cmp	r3, #128	; 0x80
 800091a:	da00      	bge.n	800091e <Tx_Frame+0x1a>
 800091c:	e20f      	b.n	8000d3e <Tx_Frame+0x43a>
 800091e:	3b80      	subs	r3, #128	; 0x80
 8000920:	2b30      	cmp	r3, #48	; 0x30
 8000922:	d900      	bls.n	8000926 <Tx_Frame+0x22>
 8000924:	e20b      	b.n	8000d3e <Tx_Frame+0x43a>
 8000926:	009a      	lsls	r2, r3, #2
 8000928:	4be5      	ldr	r3, [pc, #916]	; (8000cc0 <Tx_Frame+0x3bc>)
 800092a:	18d3      	adds	r3, r2, r3
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	469f      	mov	pc, r3
 8000930:	2bd8      	cmp	r3, #216	; 0xd8
 8000932:	d100      	bne.n	8000936 <Tx_Frame+0x32>
 8000934:	e1cc      	b.n	8000cd0 <Tx_Frame+0x3cc>

		break;
	  }

	}
}
 8000936:	e202      	b.n	8000d3e <Tx_Frame+0x43a>
		  uint8_t reset_checksum = 0;
 8000938:	2397      	movs	r3, #151	; 0x97
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
		  Buf_Reset[0] = 0xFF;
 8000940:	2148      	movs	r1, #72	; 0x48
 8000942:	187b      	adds	r3, r7, r1
 8000944:	22ff      	movs	r2, #255	; 0xff
 8000946:	701a      	strb	r2, [r3, #0]
		  Buf_Reset[1] = 0x00;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	705a      	strb	r2, [r3, #1]
		  Buf_Reset[2] = 0x01;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2201      	movs	r2, #1
 8000952:	709a      	strb	r2, [r3, #2]
		  Buf_Reset[3] = CMD_RESET;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	70da      	strb	r2, [r3, #3]
		  for(int i = 1 ; i < sizeof(Buf_Reset) - 1 ; i++)
 800095a:	2301      	movs	r3, #1
 800095c:	2290      	movs	r2, #144	; 0x90
 800095e:	18ba      	adds	r2, r7, r2
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e011      	b.n	8000988 <Tx_Frame+0x84>
			  reset_checksum = Buf_Reset[i] + reset_checksum;
 8000964:	2348      	movs	r3, #72	; 0x48
 8000966:	18fa      	adds	r2, r7, r3
 8000968:	2090      	movs	r0, #144	; 0x90
 800096a:	183b      	adds	r3, r7, r0
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	7819      	ldrb	r1, [r3, #0]
 8000972:	2297      	movs	r2, #151	; 0x97
 8000974:	18bb      	adds	r3, r7, r2
 8000976:	18ba      	adds	r2, r7, r2
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	188a      	adds	r2, r1, r2
 800097c:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Reset) - 1 ; i++)
 800097e:	183b      	adds	r3, r7, r0
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	183a      	adds	r2, r7, r0
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	2390      	movs	r3, #144	; 0x90
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d9e8      	bls.n	8000964 <Tx_Frame+0x60>
		  Buf_Reset[4] = reset_checksum;
 8000992:	2148      	movs	r1, #72	; 0x48
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2497      	movs	r4, #151	; 0x97
 8000998:	193a      	adds	r2, r7, r4
 800099a:	7812      	ldrb	r2, [r2, #0]
 800099c:	711a      	strb	r2, [r3, #4]
		  UART_driver_send_data(Buf_Reset , sizeof(Buf_Reset));
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2105      	movs	r1, #5
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 f8c0 	bl	8001b28 <UART_driver_send_data>
	      reset_checksum = 0;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
		break;
 80009ae:	e1c6      	b.n	8000d3e <Tx_Frame+0x43a>
		   uint8_t get_firmware_version_checksum = 0;
 80009b0:	238f      	movs	r3, #143	; 0x8f
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
		   Buf_Get_Firmware_Version[0] = 0xFF;
 80009b8:	2140      	movs	r1, #64	; 0x40
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	22ff      	movs	r2, #255	; 0xff
 80009be:	701a      	strb	r2, [r3, #0]
		   Buf_Get_Firmware_Version[1] = 0x00;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	705a      	strb	r2, [r3, #1]
		   Buf_Get_Firmware_Version[2] = 0x01;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2201      	movs	r2, #1
 80009ca:	709a      	strb	r2, [r3, #2]
		   Buf_Get_Firmware_Version[3] = CMD_GET_FIRMWARE_VERSION;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2281      	movs	r2, #129	; 0x81
 80009d0:	70da      	strb	r2, [r3, #3]
		   for(int i = 1 ; i < sizeof(Buf_Get_Firmware_Version) - 1 ; i++)
 80009d2:	2301      	movs	r3, #1
 80009d4:	2288      	movs	r2, #136	; 0x88
 80009d6:	18ba      	adds	r2, r7, r2
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e011      	b.n	8000a00 <Tx_Frame+0xfc>
		  	  get_firmware_version_checksum = Buf_Get_Firmware_Version[i] + get_firmware_version_checksum;
 80009dc:	2340      	movs	r3, #64	; 0x40
 80009de:	18fa      	adds	r2, r7, r3
 80009e0:	2088      	movs	r0, #136	; 0x88
 80009e2:	183b      	adds	r3, r7, r0
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	18d3      	adds	r3, r2, r3
 80009e8:	7819      	ldrb	r1, [r3, #0]
 80009ea:	228f      	movs	r2, #143	; 0x8f
 80009ec:	18bb      	adds	r3, r7, r2
 80009ee:	18ba      	adds	r2, r7, r2
 80009f0:	7812      	ldrb	r2, [r2, #0]
 80009f2:	188a      	adds	r2, r1, r2
 80009f4:	701a      	strb	r2, [r3, #0]
		   for(int i = 1 ; i < sizeof(Buf_Get_Firmware_Version) - 1 ; i++)
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	183a      	adds	r2, r7, r0
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	2388      	movs	r3, #136	; 0x88
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d9e8      	bls.n	80009dc <Tx_Frame+0xd8>
		   Buf_Get_Firmware_Version[4] = get_firmware_version_checksum;
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	248f      	movs	r4, #143	; 0x8f
 8000a10:	193a      	adds	r2, r7, r4
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	711a      	strb	r2, [r3, #4]
		   UART_driver_send_data(Buf_Get_Firmware_Version , sizeof(Buf_Get_Firmware_Version));
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2105      	movs	r1, #5
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f001 f884 	bl	8001b28 <UART_driver_send_data>
		   get_firmware_version_checksum = 0;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
        break;
 8000a26:	e18a      	b.n	8000d3e <Tx_Frame+0x43a>
		  uint8_t antenna_power_checksum = 0;
 8000a28:	2387      	movs	r3, #135	; 0x87
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
		  Buf_Antenna_Power[0] = 0xFF;
 8000a30:	2138      	movs	r1, #56	; 0x38
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	22ff      	movs	r2, #255	; 0xff
 8000a36:	701a      	strb	r2, [r3, #0]
		  Buf_Antenna_Power[1] = 0x00;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	705a      	strb	r2, [r3, #1]
		  Buf_Antenna_Power[2] = 0x02;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2202      	movs	r2, #2
 8000a42:	709a      	strb	r2, [r3, #2]
		  Buf_Antenna_Power[3] = CMD_ANTENNA_POWER;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2290      	movs	r2, #144	; 0x90
 8000a48:	70da      	strb	r2, [r3, #3]
		  Buf_Antenna_Power[4] = antenna_power_status;
 8000a4a:	4b9e      	ldr	r3, [pc, #632]	; (8000cc4 <Tx_Frame+0x3c0>)
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	711a      	strb	r2, [r3, #4]
		  for(int i = 1 ; i < sizeof(Buf_Antenna_Power) - 1 ; i++)
 8000a52:	2301      	movs	r3, #1
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	18ba      	adds	r2, r7, r2
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	e011      	b.n	8000a80 <Tx_Frame+0x17c>
			  antenna_power_checksum = Buf_Antenna_Power[i] + antenna_power_checksum;
 8000a5c:	2338      	movs	r3, #56	; 0x38
 8000a5e:	18fa      	adds	r2, r7, r3
 8000a60:	2080      	movs	r0, #128	; 0x80
 8000a62:	183b      	adds	r3, r7, r0
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	18d3      	adds	r3, r2, r3
 8000a68:	7819      	ldrb	r1, [r3, #0]
 8000a6a:	2287      	movs	r2, #135	; 0x87
 8000a6c:	18bb      	adds	r3, r7, r2
 8000a6e:	18ba      	adds	r2, r7, r2
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	188a      	adds	r2, r1, r2
 8000a74:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Antenna_Power) - 1 ; i++)
 8000a76:	183b      	adds	r3, r7, r0
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	183a      	adds	r2, r7, r0
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d9e8      	bls.n	8000a5c <Tx_Frame+0x158>
		  Buf_Antenna_Power[5] = antenna_power_checksum;
 8000a8a:	2138      	movs	r1, #56	; 0x38
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2487      	movs	r4, #135	; 0x87
 8000a90:	193a      	adds	r2, r7, r4
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	715a      	strb	r2, [r3, #5]
		  UART_driver_send_data(Buf_Antenna_Power, sizeof(Buf_Antenna_Power));
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2106      	movs	r1, #6
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 f844 	bl	8001b28 <UART_driver_send_data>
		  antenna_power_checksum = 0;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
		 break;
 8000aa6:	e14a      	b.n	8000d3e <Tx_Frame+0x43a>
		  uint8_t read_input_checksum = 0;
 8000aa8:	237f      	movs	r3, #127	; 0x7f
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
		  Buf_Read_Input[0] = 0xFF;
 8000ab0:	2130      	movs	r1, #48	; 0x30
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	22ff      	movs	r2, #255	; 0xff
 8000ab6:	701a      	strb	r2, [r3, #0]
		  Buf_Read_Input[1] = 0x00;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2200      	movs	r2, #0
 8000abc:	705a      	strb	r2, [r3, #1]
		  Buf_Read_Input[2] = 0x01;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	709a      	strb	r2, [r3, #2]
		  Buf_Read_Input[3] = CMD_READ_INPUT;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2291      	movs	r2, #145	; 0x91
 8000ac8:	70da      	strb	r2, [r3, #3]
		  for(int i = 1 ; i < sizeof(Buf_Read_Input) - 1 ; i++)
 8000aca:	2301      	movs	r3, #1
 8000acc:	67bb      	str	r3, [r7, #120]	; 0x78
 8000ace:	e00d      	b.n	8000aec <Tx_Frame+0x1e8>
			  read_input_checksum = Buf_Read_Input[i] + read_input_checksum;
 8000ad0:	2330      	movs	r3, #48	; 0x30
 8000ad2:	18fa      	adds	r2, r7, r3
 8000ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ad6:	18d3      	adds	r3, r2, r3
 8000ad8:	7819      	ldrb	r1, [r3, #0]
 8000ada:	227f      	movs	r2, #127	; 0x7f
 8000adc:	18bb      	adds	r3, r7, r2
 8000ade:	18ba      	adds	r2, r7, r2
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	188a      	adds	r2, r1, r2
 8000ae4:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Read_Input) - 1 ; i++)
 8000ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ae8:	3301      	adds	r3, #1
 8000aea:	67bb      	str	r3, [r7, #120]	; 0x78
 8000aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d9ee      	bls.n	8000ad0 <Tx_Frame+0x1cc>
		  Buf_Read_Input[4] = read_input_checksum;
 8000af2:	2130      	movs	r1, #48	; 0x30
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	247f      	movs	r4, #127	; 0x7f
 8000af8:	193a      	adds	r2, r7, r4
 8000afa:	7812      	ldrb	r2, [r2, #0]
 8000afc:	711a      	strb	r2, [r3, #4]
		  UART_driver_send_data(Buf_Read_Input, sizeof(Buf_Read_Input));
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2105      	movs	r1, #5
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 f810 	bl	8001b28 <UART_driver_send_data>
		  read_input_checksum = 0;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
		 break;
 8000b0e:	e116      	b.n	8000d3e <Tx_Frame+0x43a>
		  uint8_t write_output_checksum = 0;
 8000b10:	2377      	movs	r3, #119	; 0x77
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		  Buf_Write_Output[0] = 0xFF;
 8000b18:	2128      	movs	r1, #40	; 0x28
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	22ff      	movs	r2, #255	; 0xff
 8000b1e:	701a      	strb	r2, [r3, #0]
		  Buf_Write_Output[1] = 0x00;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2200      	movs	r2, #0
 8000b24:	705a      	strb	r2, [r3, #1]
	      Buf_Write_Output[2] = 0x02;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2202      	movs	r2, #2
 8000b2a:	709a      	strb	r2, [r3, #2]
	      Buf_Write_Output[3] = CMD_WRITE_OUTPUT;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2292      	movs	r2, #146	; 0x92
 8000b30:	70da      	strb	r2, [r3, #3]
	      Buf_Write_Output[4] = write_output_status;
 8000b32:	4b65      	ldr	r3, [pc, #404]	; (8000cc8 <Tx_Frame+0x3c4>)
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	711a      	strb	r2, [r3, #4]
	      for(int i = 1 ; i < sizeof(Buf_Write_Output) - 1 ; i++)
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	673b      	str	r3, [r7, #112]	; 0x70
 8000b3e:	e00d      	b.n	8000b5c <Tx_Frame+0x258>
	    	  write_output_checksum = Buf_Write_Output[i] + write_output_checksum;
 8000b40:	2328      	movs	r3, #40	; 0x28
 8000b42:	18fa      	adds	r2, r7, r3
 8000b44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b46:	18d3      	adds	r3, r2, r3
 8000b48:	7819      	ldrb	r1, [r3, #0]
 8000b4a:	2277      	movs	r2, #119	; 0x77
 8000b4c:	18bb      	adds	r3, r7, r2
 8000b4e:	18ba      	adds	r2, r7, r2
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	188a      	adds	r2, r1, r2
 8000b54:	701a      	strb	r2, [r3, #0]
	      for(int i = 1 ; i < sizeof(Buf_Write_Output) - 1 ; i++)
 8000b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b58:	3301      	adds	r3, #1
 8000b5a:	673b      	str	r3, [r7, #112]	; 0x70
 8000b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d9ee      	bls.n	8000b40 <Tx_Frame+0x23c>
	      Buf_Write_Output[5] = write_output_checksum;
 8000b62:	2128      	movs	r1, #40	; 0x28
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2477      	movs	r4, #119	; 0x77
 8000b68:	193a      	adds	r2, r7, r4
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	715a      	strb	r2, [r3, #5]
	      UART_driver_send_data(Buf_Write_Output, sizeof(Buf_Write_Output));
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2106      	movs	r1, #6
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 ffd8 	bl	8001b28 <UART_driver_send_data>
	      write_output_checksum = 0;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
	      break;
 8000b7e:	e0de      	b.n	8000d3e <Tx_Frame+0x43a>
		  uint8_t set_baudrate_checksum = 0;
 8000b80:	236f      	movs	r3, #111	; 0x6f
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
		  Buf_Set_BaudRate[0] = 0xFF;
 8000b88:	2120      	movs	r1, #32
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	22ff      	movs	r2, #255	; 0xff
 8000b8e:	701a      	strb	r2, [r3, #0]
		  Buf_Set_BaudRate[1] = 0x00;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	705a      	strb	r2, [r3, #1]
		  Buf_Set_BaudRate[2] = 0x02;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2202      	movs	r2, #2
 8000b9a:	709a      	strb	r2, [r3, #2]
		  Buf_Set_BaudRate[3] = CMD_SET_BAUD_RATE;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2294      	movs	r2, #148	; 0x94
 8000ba0:	70da      	strb	r2, [r3, #3]
		  Buf_Set_BaudRate[4] = set_baudrate_status;
 8000ba2:	4b4a      	ldr	r3, [pc, #296]	; (8000ccc <Tx_Frame+0x3c8>)
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	711a      	strb	r2, [r3, #4]
		  for(int i = 1 ; i < sizeof(Buf_Set_BaudRate) - 1 ; i++)
 8000baa:	2301      	movs	r3, #1
 8000bac:	66bb      	str	r3, [r7, #104]	; 0x68
 8000bae:	e00d      	b.n	8000bcc <Tx_Frame+0x2c8>
			  set_baudrate_checksum = Buf_Set_BaudRate[i] + set_baudrate_checksum;
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	18fa      	adds	r2, r7, r3
 8000bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	7819      	ldrb	r1, [r3, #0]
 8000bba:	226f      	movs	r2, #111	; 0x6f
 8000bbc:	18bb      	adds	r3, r7, r2
 8000bbe:	18ba      	adds	r2, r7, r2
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	188a      	adds	r2, r1, r2
 8000bc4:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Set_BaudRate) - 1 ; i++)
 8000bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bc8:	3301      	adds	r3, #1
 8000bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8000bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d9ee      	bls.n	8000bb0 <Tx_Frame+0x2ac>
		  Buf_Set_BaudRate[5] = set_baudrate_checksum;
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	246f      	movs	r4, #111	; 0x6f
 8000bd8:	193a      	adds	r2, r7, r4
 8000bda:	7812      	ldrb	r2, [r2, #0]
 8000bdc:	715a      	strb	r2, [r3, #5]
		  UART_driver_send_data(Buf_Set_BaudRate, sizeof(Buf_Set_BaudRate));
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2106      	movs	r1, #6
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 ffa0 	bl	8001b28 <UART_driver_send_data>
		  set_baudrate_checksum = 0;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
		break;
 8000bee:	e0a6      	b.n	8000d3e <Tx_Frame+0x43a>
		  uint8_t get_i2c_address_checksum = 0;
 8000bf0:	2367      	movs	r3, #103	; 0x67
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
		  Buf_Get_I2C_Address[0] = 0xFF;
 8000bf8:	2118      	movs	r1, #24
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	22ff      	movs	r2, #255	; 0xff
 8000bfe:	701a      	strb	r2, [r3, #0]
		  Buf_Get_I2C_Address[1] = 0x00;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	705a      	strb	r2, [r3, #1]
		  Buf_Get_I2C_Address[2] = 0x01;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2201      	movs	r2, #1
 8000c0a:	709a      	strb	r2, [r3, #2]
		  Buf_Get_I2C_Address[3] = CMD_GET_I2C_ADDRESS;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	229c      	movs	r2, #156	; 0x9c
 8000c10:	70da      	strb	r2, [r3, #3]
		  for(int i = 1 ; i < sizeof(Buf_Get_I2C_Address) - 1 ; i++)
 8000c12:	2301      	movs	r3, #1
 8000c14:	663b      	str	r3, [r7, #96]	; 0x60
 8000c16:	e00d      	b.n	8000c34 <Tx_Frame+0x330>
			  get_i2c_address_checksum = Buf_Get_I2C_Address[i] + get_i2c_address_checksum;
 8000c18:	2318      	movs	r3, #24
 8000c1a:	18fa      	adds	r2, r7, r3
 8000c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c1e:	18d3      	adds	r3, r2, r3
 8000c20:	7819      	ldrb	r1, [r3, #0]
 8000c22:	2267      	movs	r2, #103	; 0x67
 8000c24:	18bb      	adds	r3, r7, r2
 8000c26:	18ba      	adds	r2, r7, r2
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	188a      	adds	r2, r1, r2
 8000c2c:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Get_I2C_Address) - 1 ; i++)
 8000c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c30:	3301      	adds	r3, #1
 8000c32:	663b      	str	r3, [r7, #96]	; 0x60
 8000c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d9ee      	bls.n	8000c18 <Tx_Frame+0x314>
		  Buf_Get_I2C_Address[4] = get_i2c_address_checksum;
 8000c3a:	2118      	movs	r1, #24
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2467      	movs	r4, #103	; 0x67
 8000c40:	193a      	adds	r2, r7, r4
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	711a      	strb	r2, [r3, #4]
		  UART_driver_send_data(Buf_Get_I2C_Address, sizeof(Buf_Get_I2C_Address));
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2105      	movs	r1, #5
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 ff6c 	bl	8001b28 <UART_driver_send_data>
		  get_i2c_address_checksum = 0;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
		  break;
 8000c56:	e072      	b.n	8000d3e <Tx_Frame+0x43a>
		  uint8_t poll_buffer_checksum = 0;
 8000c58:	235f      	movs	r3, #95	; 0x5f
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
		  Buf_Poll_Buffer[0] = 0xFF;
 8000c60:	2110      	movs	r1, #16
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	22ff      	movs	r2, #255	; 0xff
 8000c66:	701a      	strb	r2, [r3, #0]
		  Buf_Poll_Buffer[1] = 0x00;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	705a      	strb	r2, [r3, #1]
		  Buf_Poll_Buffer[2] = 0x01;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2201      	movs	r2, #1
 8000c72:	709a      	strb	r2, [r3, #2]
		  Buf_Poll_Buffer[3] = CMD_POLL_BUFFER;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	22b0      	movs	r2, #176	; 0xb0
 8000c78:	70da      	strb	r2, [r3, #3]
		  for(int i = 1 ; i < sizeof(Buf_Poll_Buffer) - 1 ; i++)
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c7e:	e00d      	b.n	8000c9c <Tx_Frame+0x398>
			  poll_buffer_checksum = Buf_Poll_Buffer[i] + poll_buffer_checksum;
 8000c80:	2310      	movs	r3, #16
 8000c82:	18fa      	adds	r2, r7, r3
 8000c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c86:	18d3      	adds	r3, r2, r3
 8000c88:	7819      	ldrb	r1, [r3, #0]
 8000c8a:	225f      	movs	r2, #95	; 0x5f
 8000c8c:	18bb      	adds	r3, r7, r2
 8000c8e:	18ba      	adds	r2, r7, r2
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	188a      	adds	r2, r1, r2
 8000c94:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Poll_Buffer) - 1 ; i++)
 8000c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c98:	3301      	adds	r3, #1
 8000c9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d9ee      	bls.n	8000c80 <Tx_Frame+0x37c>
		  Buf_Poll_Buffer[4] = poll_buffer_checksum;
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	245f      	movs	r4, #95	; 0x5f
 8000ca8:	193a      	adds	r2, r7, r4
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	711a      	strb	r2, [r3, #4]
		  UART_driver_send_data(Buf_Poll_Buffer, sizeof(Buf_Poll_Buffer));
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 ff38 	bl	8001b28 <UART_driver_send_data>
		  poll_buffer_checksum = 0;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
		  break;
 8000cbe:	e03e      	b.n	8000d3e <Tx_Frame+0x43a>
 8000cc0:	080052ec 	.word	0x080052ec
 8000cc4:	20000001 	.word	0x20000001
 8000cc8:	20000002 	.word	0x20000002
 8000ccc:	20000003 	.word	0x20000003
		  uint8_t get_app_config_checksum = 0;
 8000cd0:	2357      	movs	r3, #87	; 0x57
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
		  Buf_Get_App_Config[0] = 0xFF;
 8000cd8:	2108      	movs	r1, #8
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	22ff      	movs	r2, #255	; 0xff
 8000cde:	701a      	strb	r2, [r3, #0]
		  Buf_Get_App_Config[1] = 0x00;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	705a      	strb	r2, [r3, #1]
		  Buf_Get_App_Config[2] = 0x02;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2202      	movs	r2, #2
 8000cea:	709a      	strb	r2, [r3, #2]
		  Buf_Get_App_Config[3] = CMD_GET_APP_CONFIG;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	22d8      	movs	r2, #216	; 0xd8
 8000cf0:	70da      	strb	r2, [r3, #3]
		  Buf_Get_App_Config[4] = 0x01;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	711a      	strb	r2, [r3, #4]
		  for(int i = 1 ; i < sizeof(Buf_Get_App_Config) - 1 ; i++)
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8000cfc:	e00d      	b.n	8000d1a <Tx_Frame+0x416>
			  get_app_config_checksum = Buf_Get_App_Config[i] + get_app_config_checksum;
 8000cfe:	2308      	movs	r3, #8
 8000d00:	18fa      	adds	r2, r7, r3
 8000d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	7819      	ldrb	r1, [r3, #0]
 8000d08:	2257      	movs	r2, #87	; 0x57
 8000d0a:	18bb      	adds	r3, r7, r2
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	7812      	ldrb	r2, [r2, #0]
 8000d10:	188a      	adds	r2, r1, r2
 8000d12:	701a      	strb	r2, [r3, #0]
		  for(int i = 1 ; i < sizeof(Buf_Get_App_Config) - 1 ; i++)
 8000d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d16:	3301      	adds	r3, #1
 8000d18:	653b      	str	r3, [r7, #80]	; 0x50
 8000d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d9ee      	bls.n	8000cfe <Tx_Frame+0x3fa>
		  Buf_Get_App_Config[5] = get_app_config_checksum;
 8000d20:	2108      	movs	r1, #8
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2457      	movs	r4, #87	; 0x57
 8000d26:	193a      	adds	r2, r7, r4
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	715a      	strb	r2, [r3, #5]
		  UART_driver_send_data(Buf_Get_App_Config, sizeof(Buf_Get_App_Config));
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2106      	movs	r1, #6
 8000d30:	0018      	movs	r0, r3
 8000d32:	f000 fef9 	bl	8001b28 <UART_driver_send_data>
		  get_app_config_checksum = 0;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
		break;
 8000d3c:	46c0      	nop			; (mov r8, r8)
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b027      	add	sp, #156	; 0x9c
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)

08000d48 <func_reset>:



void func_reset()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 	for(int j = 0 ; j < RxFrame.DataLength - 1 ; j++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	e00e      	b.n	8000d72 <func_reset+0x2a>
 	{
 	    printf("%c\n", RxFrame.RxDataBuffer[j]);
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <func_reset+0x44>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	3305      	adds	r3, #5
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	001a      	movs	r2, r3
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <func_reset+0x48>)
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f002 feac 	bl	8003ac4 <iprintf>
 	for(int j = 0 ; j < RxFrame.DataLength - 1 ; j++)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <func_reset+0x44>)
 8000d74:	785b      	ldrb	r3, [r3, #1]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbe9      	blt.n	8000d54 <func_reset+0xc>
 	}
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	08004b84 	.word	0x08004b84

08000d94 <func_get_firmware_version>:

void func_get_firmware_version()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

	printf("%\n", RxFrame.RxDataBuffer[0]);
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <func_get_firmware_version+0x54>)
 8000d9c:	795b      	ldrb	r3, [r3, #5]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	001a      	movs	r2, r3
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <func_get_firmware_version+0x58>)
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f002 fe8c 	bl	8003ac4 <iprintf>
	 for(int j = 0 ; j < RxFrame.DataLength - 1 ; j++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	e00e      	b.n	8000dd0 <func_get_firmware_version+0x3c>
	 {
	  	printf("%c\n", RxFrame.RxDataBuffer[j]);
 8000db2:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <func_get_firmware_version+0x54>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	18d3      	adds	r3, r2, r3
 8000db8:	3305      	adds	r3, #5
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <func_get_firmware_version+0x5c>)
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f002 fe7d 	bl	8003ac4 <iprintf>
	 for(int j = 0 ; j < RxFrame.DataLength - 1 ; j++)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <func_get_firmware_version+0x54>)
 8000dd2:	785b      	ldrb	r3, [r3, #1]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dbe9      	blt.n	8000db2 <func_get_firmware_version+0x1e>

	 }
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000009c 	.word	0x2000009c
 8000dec:	08004b88 	.word	0x08004b88
 8000df0:	08004b84 	.word	0x08004b84

08000df4 <func_antenna_power>:

void func_antenna_power()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	 if(RxFrame.RxDataBuffer[0] == 0x00)
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <func_antenna_power+0x40>)
 8000dfa:	795b      	ldrb	r3, [r3, #5]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d103      	bne.n	8000e0a <func_antenna_power+0x16>
	 {
		 printf("%s\n", "RF field is switched Off..");
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <func_antenna_power+0x44>)
 8000e04:	0018      	movs	r0, r3
 8000e06:	f002 fee9 	bl	8003bdc <puts>
	 }

	 if(RxFrame.RxDataBuffer[0] == 0x01)
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <func_antenna_power+0x40>)
 8000e0c:	795b      	ldrb	r3, [r3, #5]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d103      	bne.n	8000e1c <func_antenna_power+0x28>
	 {
		 printf("%s\n" , "RF field is switched on.");
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <func_antenna_power+0x48>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f002 fee0 	bl	8003bdc <puts>
	 }

	 if(RxFrame.RxDataBuffer[0] == 0x02)
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <func_antenna_power+0x40>)
 8000e1e:	795b      	ldrb	r3, [r3, #5]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d103      	bne.n	8000e2e <func_antenna_power+0x3a>
	 {
		 printf("%s\n" ,"RF field was reset.");
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <func_antenna_power+0x4c>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 fed7 	bl	8003bdc <puts>
	 }
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000009c 	.word	0x2000009c
 8000e38:	08004b8c 	.word	0x08004b8c
 8000e3c:	08004ba8 	.word	0x08004ba8
 8000e40:	08004bc4 	.word	0x08004bc4

08000e44 <func_read_input>:

void func_read_input ()
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	/*for (int i = 0 ; i < RxFrame.DataLength ; i++)
	{
		printf("%x\n" , RxFrame.RxDataBuffer[i]);
	}*/
	if(RxFrame.RxDataBuffer[0] & 1)
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <func_read_input+0x4c>)
 8000e4a:	795b      	ldrb	r3, [r3, #5]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	001a      	movs	r2, r3
 8000e50:	2301      	movs	r3, #1
 8000e52:	4013      	ands	r3, r2
 8000e54:	d004      	beq.n	8000e60 <func_read_input+0x1c>
	{
		printf("%s\n" , "IN1 = High");
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <func_read_input+0x50>)
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f002 febf 	bl	8003bdc <puts>
 8000e5e:	e003      	b.n	8000e68 <func_read_input+0x24>
	}
	else
	{
		printf("%s\n" , "IN1 = Low");
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <func_read_input+0x54>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f002 feba 	bl	8003bdc <puts>
	}
	if(RxFrame.RxDataBuffer[0] & 2)
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <func_read_input+0x4c>)
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2302      	movs	r3, #2
 8000e72:	4013      	ands	r3, r2
 8000e74:	d004      	beq.n	8000e80 <func_read_input+0x3c>
	{
		printf("%s\n" , "IN2 = High");
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <func_read_input+0x58>)
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f002 feaf 	bl	8003bdc <puts>
	else
    {
		printf("%s\n" , "IN2 = Low");
	}

}
 8000e7e:	e003      	b.n	8000e88 <func_read_input+0x44>
		printf("%s\n" , "IN2 = Low");
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <func_read_input+0x5c>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f002 feaa 	bl	8003bdc <puts>
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	2000009c 	.word	0x2000009c
 8000e94:	08004bd8 	.word	0x08004bd8
 8000e98:	08004be4 	.word	0x08004be4
 8000e9c:	08004bf0 	.word	0x08004bf0
 8000ea0:	08004bfc 	.word	0x08004bfc

08000ea4 <func_write_output>:

void func_write_output ()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	if(RxFrame.RxDataBuffer[0] & 1)
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <func_write_output+0x4c>)
 8000eaa:	795b      	ldrb	r3, [r3, #5]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d004      	beq.n	8000ec0 <func_write_output+0x1c>
	{
		printf("%s\n","Output 1: High");
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <func_write_output+0x50>)
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f002 fe8f 	bl	8003bdc <puts>
 8000ebe:	e003      	b.n	8000ec8 <func_write_output+0x24>
	}
	else
	{
		printf("%s\n", "Output 1: Low");
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <func_write_output+0x54>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f002 fe8a 	bl	8003bdc <puts>
	}
	if(RxFrame.RxDataBuffer[0] & 2)
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <func_write_output+0x4c>)
 8000eca:	795b      	ldrb	r3, [r3, #5]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	001a      	movs	r2, r3
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d004      	beq.n	8000ee0 <func_write_output+0x3c>
	{
		printf("%s\n" ,"Output 2: High");
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <func_write_output+0x58>)
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f002 fe7f 	bl	8003bdc <puts>
	}
	else
	{
		printf("%s\n","Output 2: Low");
	}
}
 8000ede:	e003      	b.n	8000ee8 <func_write_output+0x44>
		printf("%s\n","Output 2: Low");
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <func_write_output+0x5c>)
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f002 fe7a 	bl	8003bdc <puts>
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	2000009c 	.word	0x2000009c
 8000ef4:	08004c08 	.word	0x08004c08
 8000ef8:	08004c18 	.word	0x08004c18
 8000efc:	08004c28 	.word	0x08004c28
 8000f00:	08004c38 	.word	0x08004c38

08000f04 <func_get_I2C_address>:
	}

}

void func_get_I2C_address()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	printf("%s %x\n", "I2C Slave Addres of the reader is", RxFrame.RxDataBuffer[0]);
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <func_get_I2C_address+0x1c>)
 8000f0a:	795b      	ldrb	r3, [r3, #5]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	001a      	movs	r2, r3
 8000f10:	4904      	ldr	r1, [pc, #16]	; (8000f24 <func_get_I2C_address+0x20>)
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <func_get_I2C_address+0x24>)
 8000f14:	0018      	movs	r0, r3
 8000f16:	f002 fdd5 	bl	8003ac4 <iprintf>
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000009c 	.word	0x2000009c
 8000f24:	08004d78 	.word	0x08004d78
 8000f28:	08004d9c 	.word	0x08004d9c

08000f2c <func_poll_buffer>:


void func_poll_buffer()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
	if(RxFrame.RxDataBuffer[0] == 0x4E)
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <func_poll_buffer+0x94>)
 8000f34:	795b      	ldrb	r3, [r3, #5]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b4e      	cmp	r3, #78	; 0x4e
 8000f3a:	d104      	bne.n	8000f46 <func_poll_buffer+0x1a>
	{
		printf("%s\n", "Status Code: 0x4E(‘N’)No Card UID found in polling buffer");
 8000f3c:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <func_poll_buffer+0x98>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f002 fe4c 	bl	8003bdc <puts>
			printf("%x\n" , RxFrame.RxDataBuffer[uidlength - i]);
		}
		printf("%s %x\n", "Tag_Type is ", RxFrame.RxDataBuffer[0]);

	}
}
 8000f44:	e038      	b.n	8000fb8 <func_poll_buffer+0x8c>
	else if ((RxFrame.DataLength == 6) || (RxFrame.DataLength == 9))
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <func_poll_buffer+0x94>)
 8000f48:	785b      	ldrb	r3, [r3, #1]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b06      	cmp	r3, #6
 8000f4e:	d004      	beq.n	8000f5a <func_poll_buffer+0x2e>
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <func_poll_buffer+0x94>)
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b09      	cmp	r3, #9
 8000f58:	d12e      	bne.n	8000fb8 <func_poll_buffer+0x8c>
		int uidlength = RxFrame.DataLength - 2 ;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <func_poll_buffer+0x94>)
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	3b02      	subs	r3, #2
 8000f62:	603b      	str	r3, [r7, #0]
		printf("%x %s\n" , uidlength , "-byte Card UID found in the polling buffer");
 8000f64:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <func_poll_buffer+0x9c>)
 8000f66:	6839      	ldr	r1, [r7, #0]
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <func_poll_buffer+0xa0>)
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f002 fdaa 	bl	8003ac4 <iprintf>
		printf("%s\n" , ", UID is");
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <func_poll_buffer+0xa4>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f002 fe32 	bl	8003bdc <puts>
		for(int i = 0 ; i < uidlength ; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	e00f      	b.n	8000f9e <func_poll_buffer+0x72>
			printf("%x\n" , RxFrame.RxDataBuffer[uidlength - i]);
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <func_poll_buffer+0x94>)
 8000f86:	18d3      	adds	r3, r2, r3
 8000f88:	795b      	ldrb	r3, [r3, #5]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <func_poll_buffer+0xa8>)
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f002 fd96 	bl	8003ac4 <iprintf>
		for(int i = 0 ; i < uidlength ; i++)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dbeb      	blt.n	8000f7e <func_poll_buffer+0x52>
		printf("%s %x\n", "Tag_Type is ", RxFrame.RxDataBuffer[0]);
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <func_poll_buffer+0x94>)
 8000fa8:	795b      	ldrb	r3, [r3, #5]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	001a      	movs	r2, r3
 8000fae:	490a      	ldr	r1, [pc, #40]	; (8000fd8 <func_poll_buffer+0xac>)
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <func_poll_buffer+0xb0>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fd86 	bl	8003ac4 <iprintf>
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000009c 	.word	0x2000009c
 8000fc4:	08004da4 	.word	0x08004da4
 8000fc8:	08004de4 	.word	0x08004de4
 8000fcc:	08004e10 	.word	0x08004e10
 8000fd0:	08004e18 	.word	0x08004e18
 8000fd4:	08004e24 	.word	0x08004e24
 8000fd8:	08004e28 	.word	0x08004e28
 8000fdc:	08004d9c 	.word	0x08004d9c

08000fe0 <func_get_app_config>:

void func_get_app_config()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
	if(RxFrame.RxDataBuffer[0] == 0x02)
 8000fe6:	4bd2      	ldr	r3, [pc, #840]	; (8001330 <func_get_app_config+0x350>)
 8000fe8:	795b      	ldrb	r3, [r3, #5]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d103      	bne.n	8000ff8 <func_get_app_config+0x18>
	{
		printf("%s\n", "Id = 2");
 8000ff0:	4bd0      	ldr	r3, [pc, #832]	; (8001334 <func_get_app_config+0x354>)
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f002 fdf2 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[1] & 1)
 8000ff8:	4bcd      	ldr	r3, [pc, #820]	; (8001330 <func_get_app_config+0x350>)
 8000ffa:	799b      	ldrb	r3, [r3, #6]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	001a      	movs	r2, r3
 8001000:	2301      	movs	r3, #1
 8001002:	4013      	ands	r3, r2
 8001004:	d004      	beq.n	8001010 <func_get_app_config+0x30>
	{
		printf("%s\n" , "Auto Mode: Enabled");
 8001006:	4bcc      	ldr	r3, [pc, #816]	; (8001338 <func_get_app_config+0x358>)
 8001008:	0018      	movs	r0, r3
 800100a:	f002 fde7 	bl	8003bdc <puts>
 800100e:	e003      	b.n	8001018 <func_get_app_config+0x38>
	}
	else
	{
		printf("%s\n", "Auto Mode: Disabled");
 8001010:	4bca      	ldr	r3, [pc, #808]	; (800133c <func_get_app_config+0x35c>)
 8001012:	0018      	movs	r0, r3
 8001014:	f002 fde2 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[1] & 2)
 8001018:	4bc5      	ldr	r3, [pc, #788]	; (8001330 <func_get_app_config+0x350>)
 800101a:	799b      	ldrb	r3, [r3, #6]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	001a      	movs	r2, r3
 8001020:	2302      	movs	r3, #2
 8001022:	4013      	ands	r3, r2
 8001024:	d004      	beq.n	8001030 <func_get_app_config+0x50>
	{
		printf("%s\n", "SendFirmwareVersionOnStartup: True");
 8001026:	4bc6      	ldr	r3, [pc, #792]	; (8001340 <func_get_app_config+0x360>)
 8001028:	0018      	movs	r0, r3
 800102a:	f002 fdd7 	bl	8003bdc <puts>
 800102e:	e003      	b.n	8001038 <func_get_app_config+0x58>
	}
	else
	{
		printf("%s\n", "SendFirmwareVersionOnStartup: False");
 8001030:	4bc4      	ldr	r3, [pc, #784]	; (8001344 <func_get_app_config+0x364>)
 8001032:	0018      	movs	r0, r3
 8001034:	f002 fdd2 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[1] & 4)
 8001038:	4bbd      	ldr	r3, [pc, #756]	; (8001330 <func_get_app_config+0x350>)
 800103a:	799b      	ldrb	r3, [r3, #6]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	001a      	movs	r2, r3
 8001040:	2304      	movs	r3, #4
 8001042:	4013      	ands	r3, r2
 8001044:	d004      	beq.n	8001050 <func_get_app_config+0x70>
	{
		printf("%s\n", "SeekForTagOnStartUp: True");
 8001046:	4bc0      	ldr	r3, [pc, #768]	; (8001348 <func_get_app_config+0x368>)
 8001048:	0018      	movs	r0, r3
 800104a:	f002 fdc7 	bl	8003bdc <puts>
 800104e:	e003      	b.n	8001058 <func_get_app_config+0x78>
	}
	else
	{
		printf("%s\n" ,"SeekForTagOnStartUp: False");
 8001050:	4bbe      	ldr	r3, [pc, #760]	; (800134c <func_get_app_config+0x36c>)
 8001052:	0018      	movs	r0, r3
 8001054:	f002 fdc2 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[1] & 8)
 8001058:	4bb5      	ldr	r3, [pc, #724]	; (8001330 <func_get_app_config+0x350>)
 800105a:	799b      	ldrb	r3, [r3, #6]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	001a      	movs	r2, r3
 8001060:	2308      	movs	r3, #8
 8001062:	4013      	ands	r3, r2
 8001064:	d004      	beq.n	8001070 <func_get_app_config+0x90>
	{
		printf("%s\n","RS485: Enabled");
 8001066:	4bba      	ldr	r3, [pc, #744]	; (8001350 <func_get_app_config+0x370>)
 8001068:	0018      	movs	r0, r3
 800106a:	f002 fdb7 	bl	8003bdc <puts>
 800106e:	e003      	b.n	8001078 <func_get_app_config+0x98>
	}
	else
	{
		printf("%s\n", "RS485: Disabled");
 8001070:	4bb8      	ldr	r3, [pc, #736]	; (8001354 <func_get_app_config+0x374>)
 8001072:	0018      	movs	r0, r3
 8001074:	f002 fdb2 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[1] & 0b00010000)
 8001078:	4bad      	ldr	r3, [pc, #692]	; (8001330 <func_get_app_config+0x350>)
 800107a:	799b      	ldrb	r3, [r3, #6]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	001a      	movs	r2, r3
 8001080:	2310      	movs	r3, #16
 8001082:	4013      	ands	r3, r2
 8001084:	d004      	beq.n	8001090 <func_get_app_config+0xb0>
	{
		printf("%s\n", "RS485 Mode: Only Master");
 8001086:	4bb4      	ldr	r3, [pc, #720]	; (8001358 <func_get_app_config+0x378>)
 8001088:	0018      	movs	r0, r3
 800108a:	f002 fda7 	bl	8003bdc <puts>
 800108e:	e003      	b.n	8001098 <func_get_app_config+0xb8>
	}
	else
	{
		printf("%s\n", "RS485 Mode: Bidirectional");
 8001090:	4bb2      	ldr	r3, [pc, #712]	; (800135c <func_get_app_config+0x37c>)
 8001092:	0018      	movs	r0, r3
 8001094:	f002 fda2 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[1] & 0b00100000)
 8001098:	4ba5      	ldr	r3, [pc, #660]	; (8001330 <func_get_app_config+0x350>)
 800109a:	799b      	ldrb	r3, [r3, #6]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	001a      	movs	r2, r3
 80010a0:	2320      	movs	r3, #32
 80010a2:	4013      	ands	r3, r2
 80010a4:	d004      	beq.n	80010b0 <func_get_app_config+0xd0>
	{
		printf("%s\n", "I2C: Enabled");
 80010a6:	4bae      	ldr	r3, [pc, #696]	; (8001360 <func_get_app_config+0x380>)
 80010a8:	0018      	movs	r0, r3
 80010aa:	f002 fd97 	bl	8003bdc <puts>
 80010ae:	e003      	b.n	80010b8 <func_get_app_config+0xd8>
	}
	else
	{
		printf("%s\n", "I2C: Disabled");
 80010b0:	4bac      	ldr	r3, [pc, #688]	; (8001364 <func_get_app_config+0x384>)
 80010b2:	0018      	movs	r0, r3
 80010b4:	f002 fd92 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[1] & 0b01000000)
 80010b8:	4b9d      	ldr	r3, [pc, #628]	; (8001330 <func_get_app_config+0x350>)
 80010ba:	799b      	ldrb	r3, [r3, #6]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	001a      	movs	r2, r3
 80010c0:	2340      	movs	r3, #64	; 0x40
 80010c2:	4013      	ands	r3, r2
 80010c4:	d004      	beq.n	80010d0 <func_get_app_config+0xf0>
	{
		printf("%s\n", "Beep OnStartup: Enabled");
 80010c6:	4ba8      	ldr	r3, [pc, #672]	; (8001368 <func_get_app_config+0x388>)
 80010c8:	0018      	movs	r0, r3
 80010ca:	f002 fd87 	bl	8003bdc <puts>
 80010ce:	e003      	b.n	80010d8 <func_get_app_config+0xf8>
	}
	else
	{
		printf("%s\n", "Beep OnStartup: Disabled");
 80010d0:	4ba6      	ldr	r3, [pc, #664]	; (800136c <func_get_app_config+0x38c>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f002 fd82 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[1] & 0b10000000)
 80010d8:	4b95      	ldr	r3, [pc, #596]	; (8001330 <func_get_app_config+0x350>)
 80010da:	799b      	ldrb	r3, [r3, #6]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da04      	bge.n	80010ee <func_get_app_config+0x10e>
	{
		printf("%s\n", "Beep OnSeekForTagFound: Enabled");
 80010e4:	4ba2      	ldr	r3, [pc, #648]	; (8001370 <func_get_app_config+0x390>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f002 fd78 	bl	8003bdc <puts>
 80010ec:	e003      	b.n	80010f6 <func_get_app_config+0x116>
	}
	else
	{
		printf("%s\n", "Beep OnSeekForTagFound: Disabled");
 80010ee:	4ba1      	ldr	r3, [pc, #644]	; (8001374 <func_get_app_config+0x394>)
 80010f0:	0018      	movs	r0, r3
 80010f2:	f002 fd73 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[2] == 0x01)
 80010f6:	4b8e      	ldr	r3, [pc, #568]	; (8001330 <func_get_app_config+0x350>)
 80010f8:	79db      	ldrb	r3, [r3, #7]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d108      	bne.n	8001112 <func_get_app_config+0x132>
	{
		printf("%s %x\n", "Serial Node Adress: ", RxFrame.RxDataBuffer[2]);
 8001100:	4b8b      	ldr	r3, [pc, #556]	; (8001330 <func_get_app_config+0x350>)
 8001102:	79db      	ldrb	r3, [r3, #7]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	001a      	movs	r2, r3
 8001108:	499b      	ldr	r1, [pc, #620]	; (8001378 <func_get_app_config+0x398>)
 800110a:	4b9c      	ldr	r3, [pc, #624]	; (800137c <func_get_app_config+0x39c>)
 800110c:	0018      	movs	r0, r3
 800110e:	f002 fcd9 	bl	8003ac4 <iprintf>
	}

	if(RxFrame.RxDataBuffer[3] & 1)
 8001112:	4b87      	ldr	r3, [pc, #540]	; (8001330 <func_get_app_config+0x350>)
 8001114:	7a1b      	ldrb	r3, [r3, #8]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	001a      	movs	r2, r3
 800111a:	2301      	movs	r3, #1
 800111c:	4013      	ands	r3, r2
 800111e:	d004      	beq.n	800112a <func_get_app_config+0x14a>
	{
		printf("%s\n" ,"Auto Mode Output: ASCII");
 8001120:	4b97      	ldr	r3, [pc, #604]	; (8001380 <func_get_app_config+0x3a0>)
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fd5a 	bl	8003bdc <puts>
 8001128:	e003      	b.n	8001132 <func_get_app_config+0x152>
	}
	else
	{
		printf("%s\n", "Auto Mode Output: Protocol");
 800112a:	4b96      	ldr	r3, [pc, #600]	; (8001384 <func_get_app_config+0x3a4>)
 800112c:	0018      	movs	r0, r3
 800112e:	f002 fd55 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[3] & 2)
 8001132:	4b7f      	ldr	r3, [pc, #508]	; (8001330 <func_get_app_config+0x350>)
 8001134:	7a1b      	ldrb	r3, [r3, #8]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	001a      	movs	r2, r3
 800113a:	2302      	movs	r3, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d004      	beq.n	800114a <func_get_app_config+0x16a>
	{
		printf("%s\n", "ASCII Reverse Card UID: True");
 8001140:	4b91      	ldr	r3, [pc, #580]	; (8001388 <func_get_app_config+0x3a8>)
 8001142:	0018      	movs	r0, r3
 8001144:	f002 fd4a 	bl	8003bdc <puts>
 8001148:	e003      	b.n	8001152 <func_get_app_config+0x172>
	}
	else
	{
		printf("%s\n" ,"ASCII Reverse Card UID: False");
 800114a:	4b90      	ldr	r3, [pc, #576]	; (800138c <func_get_app_config+0x3ac>)
 800114c:	0018      	movs	r0, r3
 800114e:	f002 fd45 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[3] & 4)
 8001152:	4b77      	ldr	r3, [pc, #476]	; (8001330 <func_get_app_config+0x350>)
 8001154:	7a1b      	ldrb	r3, [r3, #8]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	001a      	movs	r2, r3
 800115a:	2304      	movs	r3, #4
 800115c:	4013      	ands	r3, r2
 800115e:	d004      	beq.n	800116a <func_get_app_config+0x18a>
	{
		printf("%s\n" ,"AutoBeepOnTagFound: True");
 8001160:	4b8b      	ldr	r3, [pc, #556]	; (8001390 <func_get_app_config+0x3b0>)
 8001162:	0018      	movs	r0, r3
 8001164:	f002 fd3a 	bl	8003bdc <puts>
 8001168:	e003      	b.n	8001172 <func_get_app_config+0x192>
	}
	else
	{
		printf("%s\n" ,"AutoBeepOnTagFound: False");
 800116a:	4b8a      	ldr	r3, [pc, #552]	; (8001394 <func_get_app_config+0x3b4>)
 800116c:	0018      	movs	r0, r3
 800116e:	f002 fd35 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[3] & 8)
 8001172:	4b6f      	ldr	r3, [pc, #444]	; (8001330 <func_get_app_config+0x350>)
 8001174:	7a1b      	ldrb	r3, [r3, #8]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	001a      	movs	r2, r3
 800117a:	2308      	movs	r3, #8
 800117c:	4013      	ands	r3, r2
 800117e:	d004      	beq.n	800118a <func_get_app_config+0x1aa>
	{
		printf("%s\n" ,"ASCII CR: True");
 8001180:	4b85      	ldr	r3, [pc, #532]	; (8001398 <func_get_app_config+0x3b8>)
 8001182:	0018      	movs	r0, r3
 8001184:	f002 fd2a 	bl	8003bdc <puts>
 8001188:	e003      	b.n	8001192 <func_get_app_config+0x1b2>
	}
	else
	{
		printf("%s\n" ,"ASCII CR: False");
 800118a:	4b84      	ldr	r3, [pc, #528]	; (800139c <func_get_app_config+0x3bc>)
 800118c:	0018      	movs	r0, r3
 800118e:	f002 fd25 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[3] & 0b00010000)
 8001192:	4b67      	ldr	r3, [pc, #412]	; (8001330 <func_get_app_config+0x350>)
 8001194:	7a1b      	ldrb	r3, [r3, #8]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	001a      	movs	r2, r3
 800119a:	2310      	movs	r3, #16
 800119c:	4013      	ands	r3, r2
 800119e:	d004      	beq.n	80011aa <func_get_app_config+0x1ca>
	{
		printf("%s\n" ,"ASCII LF: True");
 80011a0:	4b7f      	ldr	r3, [pc, #508]	; (80013a0 <func_get_app_config+0x3c0>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f002 fd1a 	bl	8003bdc <puts>
 80011a8:	e003      	b.n	80011b2 <func_get_app_config+0x1d2>
	}
	else
	{
		printf("%s\n" ,"ASCII LF: False");
 80011aa:	4b7e      	ldr	r3, [pc, #504]	; (80013a4 <func_get_app_config+0x3c4>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f002 fd15 	bl	8003bdc <puts>
	}

	if(RxFrame.RxDataBuffer[4] == 0x00)
 80011b2:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <func_get_app_config+0x350>)
 80011b4:	7a5b      	ldrb	r3, [r3, #9]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d108      	bne.n	80011ce <func_get_app_config+0x1ee>
	{
		printf("%s %x %s\n", "Baudrate" , RxFrame.RxDataBuffer[4], " (9600bps)");
 80011bc:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <func_get_app_config+0x350>)
 80011be:	7a5b      	ldrb	r3, [r3, #9]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	001a      	movs	r2, r3
 80011c4:	4b78      	ldr	r3, [pc, #480]	; (80013a8 <func_get_app_config+0x3c8>)
 80011c6:	4979      	ldr	r1, [pc, #484]	; (80013ac <func_get_app_config+0x3cc>)
 80011c8:	4879      	ldr	r0, [pc, #484]	; (80013b0 <func_get_app_config+0x3d0>)
 80011ca:	f002 fc7b 	bl	8003ac4 <iprintf>
	}
	if(RxFrame.RxDataBuffer[4] == 0x01)
 80011ce:	4b58      	ldr	r3, [pc, #352]	; (8001330 <func_get_app_config+0x350>)
 80011d0:	7a5b      	ldrb	r3, [r3, #9]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d108      	bne.n	80011ea <func_get_app_config+0x20a>
	{
		printf("%s %x %s\n", "Baudrate" , RxFrame.RxDataBuffer[4], " (19200bps)");
 80011d8:	4b55      	ldr	r3, [pc, #340]	; (8001330 <func_get_app_config+0x350>)
 80011da:	7a5b      	ldrb	r3, [r3, #9]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	001a      	movs	r2, r3
 80011e0:	4b74      	ldr	r3, [pc, #464]	; (80013b4 <func_get_app_config+0x3d4>)
 80011e2:	4972      	ldr	r1, [pc, #456]	; (80013ac <func_get_app_config+0x3cc>)
 80011e4:	4872      	ldr	r0, [pc, #456]	; (80013b0 <func_get_app_config+0x3d0>)
 80011e6:	f002 fc6d 	bl	8003ac4 <iprintf>
	}
	if(RxFrame.RxDataBuffer[4] == 0x02)
 80011ea:	4b51      	ldr	r3, [pc, #324]	; (8001330 <func_get_app_config+0x350>)
 80011ec:	7a5b      	ldrb	r3, [r3, #9]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d108      	bne.n	8001206 <func_get_app_config+0x226>
	{
		printf("%s %x %s\n", "Baudrate" , RxFrame.RxDataBuffer[4], " (38400bps)");
 80011f4:	4b4e      	ldr	r3, [pc, #312]	; (8001330 <func_get_app_config+0x350>)
 80011f6:	7a5b      	ldrb	r3, [r3, #9]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	001a      	movs	r2, r3
 80011fc:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <func_get_app_config+0x3d8>)
 80011fe:	496b      	ldr	r1, [pc, #428]	; (80013ac <func_get_app_config+0x3cc>)
 8001200:	486b      	ldr	r0, [pc, #428]	; (80013b0 <func_get_app_config+0x3d0>)
 8001202:	f002 fc5f 	bl	8003ac4 <iprintf>
	}
	if(RxFrame.RxDataBuffer[4] == 0x03)
 8001206:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <func_get_app_config+0x350>)
 8001208:	7a5b      	ldrb	r3, [r3, #9]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b03      	cmp	r3, #3
 800120e:	d108      	bne.n	8001222 <func_get_app_config+0x242>
	{
		printf("%s %x %s\n", "Baudrate" , RxFrame.RxDataBuffer[4], " (57600bps)");
 8001210:	4b47      	ldr	r3, [pc, #284]	; (8001330 <func_get_app_config+0x350>)
 8001212:	7a5b      	ldrb	r3, [r3, #9]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	001a      	movs	r2, r3
 8001218:	4b68      	ldr	r3, [pc, #416]	; (80013bc <func_get_app_config+0x3dc>)
 800121a:	4964      	ldr	r1, [pc, #400]	; (80013ac <func_get_app_config+0x3cc>)
 800121c:	4864      	ldr	r0, [pc, #400]	; (80013b0 <func_get_app_config+0x3d0>)
 800121e:	f002 fc51 	bl	8003ac4 <iprintf>
	}
	if(RxFrame.RxDataBuffer[4] == 0x04)
 8001222:	4b43      	ldr	r3, [pc, #268]	; (8001330 <func_get_app_config+0x350>)
 8001224:	7a5b      	ldrb	r3, [r3, #9]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b04      	cmp	r3, #4
 800122a:	d108      	bne.n	800123e <func_get_app_config+0x25e>
	{
		printf("%s %x %s\n", "Baudrate" , RxFrame.RxDataBuffer[4], " (115200bps)");
 800122c:	4b40      	ldr	r3, [pc, #256]	; (8001330 <func_get_app_config+0x350>)
 800122e:	7a5b      	ldrb	r3, [r3, #9]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	001a      	movs	r2, r3
 8001234:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <func_get_app_config+0x3e0>)
 8001236:	495d      	ldr	r1, [pc, #372]	; (80013ac <func_get_app_config+0x3cc>)
 8001238:	485d      	ldr	r0, [pc, #372]	; (80013b0 <func_get_app_config+0x3d0>)
 800123a:	f002 fc43 	bl	8003ac4 <iprintf>
	}
	if(RxFrame.RxDataBuffer[5] == 0x42)
 800123e:	4b3c      	ldr	r3, [pc, #240]	; (8001330 <func_get_app_config+0x350>)
 8001240:	7a9b      	ldrb	r3, [r3, #10]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b42      	cmp	r3, #66	; 0x42
 8001246:	d108      	bne.n	800125a <func_get_app_config+0x27a>
	{
		printf("%s %x\n", "I2C Adress: ", RxFrame.RxDataBuffer[5]);
 8001248:	4b39      	ldr	r3, [pc, #228]	; (8001330 <func_get_app_config+0x350>)
 800124a:	7a9b      	ldrb	r3, [r3, #10]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	001a      	movs	r2, r3
 8001250:	495c      	ldr	r1, [pc, #368]	; (80013c4 <func_get_app_config+0x3e4>)
 8001252:	4b4a      	ldr	r3, [pc, #296]	; (800137c <func_get_app_config+0x39c>)
 8001254:	0018      	movs	r0, r3
 8001256:	f002 fc35 	bl	8003ac4 <iprintf>
	}
	if(RxFrame.RxDataBuffer[6] == 0x00)
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <func_get_app_config+0x350>)
 800125c:	7adb      	ldrb	r3, [r3, #11]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d108      	bne.n	8001276 <func_get_app_config+0x296>
	{
		printf("%s %x\n", "UserData1: ", RxFrame.RxDataBuffer[6]);
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <func_get_app_config+0x350>)
 8001266:	7adb      	ldrb	r3, [r3, #11]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	001a      	movs	r2, r3
 800126c:	4956      	ldr	r1, [pc, #344]	; (80013c8 <func_get_app_config+0x3e8>)
 800126e:	4b43      	ldr	r3, [pc, #268]	; (800137c <func_get_app_config+0x39c>)
 8001270:	0018      	movs	r0, r3
 8001272:	f002 fc27 	bl	8003ac4 <iprintf>
	}
	if(RxFrame.RxDataBuffer[7] == 0x00)
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <func_get_app_config+0x350>)
 8001278:	7b1b      	ldrb	r3, [r3, #12]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d108      	bne.n	8001292 <func_get_app_config+0x2b2>
    {
			printf("%s %x\n", "UserData2: ", RxFrame.RxDataBuffer[7]);
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <func_get_app_config+0x350>)
 8001282:	7b1b      	ldrb	r3, [r3, #12]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	001a      	movs	r2, r3
 8001288:	4950      	ldr	r1, [pc, #320]	; (80013cc <func_get_app_config+0x3ec>)
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <func_get_app_config+0x39c>)
 800128c:	0018      	movs	r0, r3
 800128e:	f002 fc19 	bl	8003ac4 <iprintf>
	}

	printf("%s\n", "ASCII Header(prefix) chars: ");
 8001292:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <func_get_app_config+0x3f0>)
 8001294:	0018      	movs	r0, r3
 8001296:	f002 fca1 	bl	8003bdc <puts>
	for(int i = 8 ; i < 11 ; i++)
 800129a:	2308      	movs	r3, #8
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	e00e      	b.n	80012be <func_get_app_config+0x2de>
	{
		printf("%x\n", RxFrame.RxDataBuffer[i]);
 80012a0:	4a23      	ldr	r2, [pc, #140]	; (8001330 <func_get_app_config+0x350>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	3305      	adds	r3, #5
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	001a      	movs	r2, r3
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <func_get_app_config+0x3f4>)
 80012b0:	0011      	movs	r1, r2
 80012b2:	0018      	movs	r0, r3
 80012b4:	f002 fc06 	bl	8003ac4 <iprintf>
	for(int i = 8 ; i < 11 ; i++)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b0a      	cmp	r3, #10
 80012c2:	dded      	ble.n	80012a0 <func_get_app_config+0x2c0>
	}
	printf("%s\n", "ASCII Footer(suffix) chars: ");
 80012c4:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <func_get_app_config+0x3f8>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f002 fc88 	bl	8003bdc <puts>
	for(int k = 11 ; k < 14 ; k++)
 80012cc:	230b      	movs	r3, #11
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	e00e      	b.n	80012f0 <func_get_app_config+0x310>
	{
	   printf("%x\n", RxFrame.RxDataBuffer[k]);
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <func_get_app_config+0x350>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	18d3      	adds	r3, r2, r3
 80012d8:	3305      	adds	r3, #5
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	001a      	movs	r2, r3
 80012e0:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <func_get_app_config+0x3f4>)
 80012e2:	0011      	movs	r1, r2
 80012e4:	0018      	movs	r0, r3
 80012e6:	f002 fbed 	bl	8003ac4 <iprintf>
	for(int k = 11 ; k < 14 ; k++)
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b0d      	cmp	r3, #13
 80012f4:	dded      	ble.n	80012d2 <func_get_app_config+0x2f2>
	}

	if(RxFrame.RxDataBuffer[14] & 1)
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <func_get_app_config+0x350>)
 80012f8:	7cdb      	ldrb	r3, [r3, #19]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	001a      	movs	r2, r3
 80012fe:	2301      	movs	r3, #1
 8001300:	4013      	ands	r3, r2
 8001302:	d004      	beq.n	800130e <func_get_app_config+0x32e>
	{
		printf("%s\n","Pinout Connection: TypeB");
 8001304:	4b35      	ldr	r3, [pc, #212]	; (80013dc <func_get_app_config+0x3fc>)
 8001306:	0018      	movs	r0, r3
 8001308:	f002 fc68 	bl	8003bdc <puts>
 800130c:	e003      	b.n	8001316 <func_get_app_config+0x336>
	}
	else
	{
		printf("%s\n","Pinout Connection: TypeA");
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <func_get_app_config+0x400>)
 8001310:	0018      	movs	r0, r3
 8001312:	f002 fc63 	bl	8003bdc <puts>
	}
	if(RxFrame.RxDataBuffer[14] & 2)
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <func_get_app_config+0x350>)
 8001318:	7cdb      	ldrb	r3, [r3, #19]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	001a      	movs	r2, r3
 800131e:	2302      	movs	r3, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d061      	beq.n	80013e8 <func_get_app_config+0x408>
	{
		printf("%s\n" , "Buzzer Type: PWM Buzzer");
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <func_get_app_config+0x404>)
 8001326:	0018      	movs	r0, r3
 8001328:	f002 fc58 	bl	8003bdc <puts>
 800132c:	e060      	b.n	80013f0 <func_get_app_config+0x410>
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	2000009c 	.word	0x2000009c
 8001334:	08004e38 	.word	0x08004e38
 8001338:	08004e40 	.word	0x08004e40
 800133c:	08004e54 	.word	0x08004e54
 8001340:	08004e68 	.word	0x08004e68
 8001344:	08004e8c 	.word	0x08004e8c
 8001348:	08004eb0 	.word	0x08004eb0
 800134c:	08004ecc 	.word	0x08004ecc
 8001350:	08004ee8 	.word	0x08004ee8
 8001354:	08004ef8 	.word	0x08004ef8
 8001358:	08004f08 	.word	0x08004f08
 800135c:	08004f20 	.word	0x08004f20
 8001360:	08004f3c 	.word	0x08004f3c
 8001364:	08004f4c 	.word	0x08004f4c
 8001368:	08004f5c 	.word	0x08004f5c
 800136c:	08004f74 	.word	0x08004f74
 8001370:	08004f90 	.word	0x08004f90
 8001374:	08004fb0 	.word	0x08004fb0
 8001378:	08004fd4 	.word	0x08004fd4
 800137c:	08004d9c 	.word	0x08004d9c
 8001380:	08004fec 	.word	0x08004fec
 8001384:	08005004 	.word	0x08005004
 8001388:	08005020 	.word	0x08005020
 800138c:	08005040 	.word	0x08005040
 8001390:	08005060 	.word	0x08005060
 8001394:	0800507c 	.word	0x0800507c
 8001398:	08005098 	.word	0x08005098
 800139c:	080050a8 	.word	0x080050a8
 80013a0:	080050b8 	.word	0x080050b8
 80013a4:	080050c8 	.word	0x080050c8
 80013a8:	080050d8 	.word	0x080050d8
 80013ac:	080050e4 	.word	0x080050e4
 80013b0:	080050f0 	.word	0x080050f0
 80013b4:	080050fc 	.word	0x080050fc
 80013b8:	08005108 	.word	0x08005108
 80013bc:	08005114 	.word	0x08005114
 80013c0:	08005120 	.word	0x08005120
 80013c4:	08005130 	.word	0x08005130
 80013c8:	08005140 	.word	0x08005140
 80013cc:	0800514c 	.word	0x0800514c
 80013d0:	08005158 	.word	0x08005158
 80013d4:	08004e24 	.word	0x08004e24
 80013d8:	08005178 	.word	0x08005178
 80013dc:	08005198 	.word	0x08005198
 80013e0:	080051b4 	.word	0x080051b4
 80013e4:	080051d0 	.word	0x080051d0
	}
	else
	{
		printf("%s\n" , "Buzzer Type: DC Buzzer");
 80013e8:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <func_get_app_config+0x4d4>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f002 fbf6 	bl	8003bdc <puts>
	}
	if((RxFrame.RxDataBuffer[14] & 0b00001100) == (0b00000000))
 80013f0:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <func_get_app_config+0x4d8>)
 80013f2:	7cdb      	ldrb	r3, [r3, #19]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	001a      	movs	r2, r3
 80013f8:	230c      	movs	r3, #12
 80013fa:	4013      	ands	r3, r2
 80013fc:	d103      	bne.n	8001406 <func_get_app_config+0x426>
	{
		printf("%s\n" , "Visual Effect: EFFECT_STD_AUTO_FLASHING");
 80013fe:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <func_get_app_config+0x4dc>)
 8001400:	0018      	movs	r0, r3
 8001402:	f002 fbeb 	bl	8003bdc <puts>
	}
	if((RxFrame.RxDataBuffer[14] & 0b00001100) == (0b00000100))
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <func_get_app_config+0x4d8>)
 8001408:	7cdb      	ldrb	r3, [r3, #19]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	001a      	movs	r2, r3
 800140e:	230c      	movs	r3, #12
 8001410:	4013      	ands	r3, r2
 8001412:	2b04      	cmp	r3, #4
 8001414:	d103      	bne.n	800141e <func_get_app_config+0x43e>
    {
		printf("%s\n" , "Visual Effect: SREAD No Flashing");
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <func_get_app_config+0x4e0>)
 8001418:	0018      	movs	r0, r3
 800141a:	f002 fbdf 	bl	8003bdc <puts>
	}
	if((RxFrame.RxDataBuffer[14] & 0b00001100) == (0b00001000))
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <func_get_app_config+0x4d8>)
 8001420:	7cdb      	ldrb	r3, [r3, #19]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	001a      	movs	r2, r3
 8001426:	230c      	movs	r3, #12
 8001428:	4013      	ands	r3, r2
 800142a:	2b08      	cmp	r3, #8
 800142c:	d103      	bne.n	8001436 <func_get_app_config+0x456>
	{
	    printf("%s\n" , "Visual Effect: TAGF Single Pulse/SREAD Flashing");
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <func_get_app_config+0x4e4>)
 8001430:	0018      	movs	r0, r3
 8001432:	f002 fbd3 	bl	8003bdc <puts>
	}
	if((RxFrame.RxDataBuffer[14] & 0b00001100) == (0b00001100))
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <func_get_app_config+0x4d8>)
 8001438:	7cdb      	ldrb	r3, [r3, #19]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	001a      	movs	r2, r3
 800143e:	230c      	movs	r3, #12
 8001440:	4013      	ands	r3, r2
 8001442:	2b0c      	cmp	r3, #12
 8001444:	d103      	bne.n	800144e <func_get_app_config+0x46e>
	{
		printf("%s\n" , "No Effect");
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <func_get_app_config+0x4e8>)
 8001448:	0018      	movs	r0, r3
 800144a:	f002 fbc7 	bl	8003bdc <puts>
	}
	if(RxFrame.RxDataBuffer[14] & 0b00010000)
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <func_get_app_config+0x4d8>)
 8001450:	7cdb      	ldrb	r3, [r3, #19]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	001a      	movs	r2, r3
 8001456:	2310      	movs	r3, #16
 8001458:	4013      	ands	r3, r2
 800145a:	d004      	beq.n	8001466 <func_get_app_config+0x486>
	{
		printf("%s\n" , "BeepOnActivateAll: True");
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <func_get_app_config+0x4ec>)
 800145e:	0018      	movs	r0, r3
 8001460:	f002 fbbc 	bl	8003bdc <puts>
 8001464:	e003      	b.n	800146e <func_get_app_config+0x48e>
	}
	else
	{
		printf("%s\n" , "BeepOnActivateAll: False");
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <func_get_app_config+0x4f0>)
 8001468:	0018      	movs	r0, r3
 800146a:	f002 fbb7 	bl	8003bdc <puts>
	}

	printf("%s\n", "Firmware Version: ");
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <func_get_app_config+0x4f4>)
 8001470:	0018      	movs	r0, r3
 8001472:	f002 fbb3 	bl	8003bdc <puts>
	for( int j = 15 ; j < RxFrame.DataLength ; j++)
 8001476:	230f      	movs	r3, #15
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	e00e      	b.n	800149a <func_get_app_config+0x4ba>
	{
		printf("%c\n" , RxFrame.RxDataBuffer[j]);
 800147c:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <func_get_app_config+0x4d8>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	18d3      	adds	r3, r2, r3
 8001482:	3305      	adds	r3, #5
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	001a      	movs	r2, r3
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <func_get_app_config+0x4f8>)
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f002 fb18 	bl	8003ac4 <iprintf>
	for( int j = 15 ; j < RxFrame.DataLength ; j++)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3301      	adds	r3, #1
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <func_get_app_config+0x4d8>)
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	001a      	movs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4293      	cmp	r3, r2
 80014a6:	dbe9      	blt.n	800147c <func_get_app_config+0x49c>
	}
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	080051e8 	.word	0x080051e8
 80014b8:	2000009c 	.word	0x2000009c
 80014bc:	08005200 	.word	0x08005200
 80014c0:	08005228 	.word	0x08005228
 80014c4:	0800524c 	.word	0x0800524c
 80014c8:	0800527c 	.word	0x0800527c
 80014cc:	08005288 	.word	0x08005288
 80014d0:	080052a0 	.word	0x080052a0
 80014d4:	080052bc 	.word	0x080052bc
 80014d8:	08004b84 	.word	0x08004b84

080014dc <spv1_uart_command_parser>:




 void spv1_uart_command_parser(uint8_t Command)
 {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	0002      	movs	r2, r0
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	701a      	strb	r2, [r3, #0]
	switch(Command)
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2bb0      	cmp	r3, #176	; 0xb0
 80014ee:	dc09      	bgt.n	8001504 <spv1_uart_command_parser+0x28>
 80014f0:	2b80      	cmp	r3, #128	; 0x80
 80014f2:	db22      	blt.n	800153a <spv1_uart_command_parser+0x5e>
 80014f4:	3b80      	subs	r3, #128	; 0x80
 80014f6:	2b30      	cmp	r3, #48	; 0x30
 80014f8:	d81f      	bhi.n	800153a <spv1_uart_command_parser+0x5e>
 80014fa:	009a      	lsls	r2, r3, #2
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <spv1_uart_command_parser+0x68>)
 80014fe:	18d3      	adds	r3, r2, r3
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	469f      	mov	pc, r3
 8001504:	2bd8      	cmp	r3, #216	; 0xd8
 8001506:	d015      	beq.n	8001534 <spv1_uart_command_parser+0x58>
	   break;

	   default :
	   {
		  //UnknownCommand();
		  break;
 8001508:	e017      	b.n	800153a <spv1_uart_command_parser+0x5e>
	   func_reset();
 800150a:	f7ff fc1d 	bl	8000d48 <func_reset>
	   break;
 800150e:	e015      	b.n	800153c <spv1_uart_command_parser+0x60>
	   func_get_firmware_version();
 8001510:	f7ff fc40 	bl	8000d94 <func_get_firmware_version>
	   break;
 8001514:	e012      	b.n	800153c <spv1_uart_command_parser+0x60>
	   func_antenna_power();
 8001516:	f7ff fc6d 	bl	8000df4 <func_antenna_power>
	   break;
 800151a:	e00f      	b.n	800153c <spv1_uart_command_parser+0x60>
	   func_read_input();
 800151c:	f7ff fc92 	bl	8000e44 <func_read_input>
	   break;
 8001520:	e00c      	b.n	800153c <spv1_uart_command_parser+0x60>
	   func_write_output();
 8001522:	f7ff fcbf 	bl	8000ea4 <func_write_output>
	   break;
 8001526:	e009      	b.n	800153c <spv1_uart_command_parser+0x60>
	   func_get_I2C_address();
 8001528:	f7ff fcec 	bl	8000f04 <func_get_I2C_address>
	   break;
 800152c:	e006      	b.n	800153c <spv1_uart_command_parser+0x60>
	   func_poll_buffer();
 800152e:	f7ff fcfd 	bl	8000f2c <func_poll_buffer>
	   break;
 8001532:	e003      	b.n	800153c <spv1_uart_command_parser+0x60>
	   func_get_app_config();
 8001534:	f7ff fd54 	bl	8000fe0 <func_get_app_config>
	   break;
 8001538:	e000      	b.n	800153c <spv1_uart_command_parser+0x60>
		  break;
 800153a:	46c0      	nop			; (mov r8, r8)
	   }
	 }
 }
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}
 8001544:	080053b0 	.word	0x080053b0

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_MspInit+0x24>)
 800154e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_MspInit+0x24>)
 8001552:	2101      	movs	r1, #1
 8001554:	430a      	orrs	r2, r1
 8001556:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_MspInit+0x24>)
 800155a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_MspInit+0x24>)
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	0549      	lsls	r1, r1, #21
 8001562:	430a      	orrs	r2, r1
 8001564:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b08b      	sub	sp, #44	; 0x2c
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	2414      	movs	r4, #20
 800157a:	193b      	adds	r3, r7, r4
 800157c:	0018      	movs	r0, r3
 800157e:	2314      	movs	r3, #20
 8001580:	001a      	movs	r2, r3
 8001582:	2100      	movs	r1, #0
 8001584:	f002 fa96 	bl	8003ab4 <memset>
  if(huart->Instance==USART1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a34      	ldr	r2, [pc, #208]	; (8001660 <HAL_UART_MspInit+0xf0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d133      	bne.n	80015fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	01c9      	lsls	r1, r1, #7
 800159c:	430a      	orrs	r2, r1
 800159e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_UART_MspInit+0xf4>)
 80015a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a4:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <HAL_UART_MspInit+0xf4>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_UART_MspInit+0xf4>)
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	2201      	movs	r2, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015b8:	193b      	adds	r3, r7, r4
 80015ba:	22c0      	movs	r2, #192	; 0xc0
 80015bc:	00d2      	lsls	r2, r2, #3
 80015be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	0021      	movs	r1, r4
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2202      	movs	r2, #2
 80015c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2203      	movs	r2, #3
 80015d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2204      	movs	r2, #4
 80015d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	187a      	adds	r2, r7, r1
 80015dc:	23a0      	movs	r3, #160	; 0xa0
 80015de:	05db      	lsls	r3, r3, #23
 80015e0:	0011      	movs	r1, r2
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 fc1c 	bl	8001e20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	201b      	movs	r0, #27
 80015ee:	f000 fbe5 	bl	8001dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f2:	201b      	movs	r0, #27
 80015f4:	f000 fbf7 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015f8:	e02e      	b.n	8001658 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <HAL_UART_MspInit+0xf8>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d129      	bne.n	8001658 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_UART_MspInit+0xf4>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0289      	lsls	r1, r1, #10
 800160e:	430a      	orrs	r2, r1
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001618:	2101      	movs	r1, #1
 800161a:	430a      	orrs	r2, r1
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_UART_MspInit+0xf4>)
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	2201      	movs	r2, #1
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800162a:	2114      	movs	r1, #20
 800162c:	187b      	adds	r3, r7, r1
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2202      	movs	r2, #2
 8001636:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	187b      	adds	r3, r7, r1
 8001640:	2203      	movs	r2, #3
 8001642:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001644:	187b      	adds	r3, r7, r1
 8001646:	2204      	movs	r2, #4
 8001648:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	187a      	adds	r2, r7, r1
 800164c:	23a0      	movs	r3, #160	; 0xa0
 800164e:	05db      	lsls	r3, r3, #23
 8001650:	0011      	movs	r1, r2
 8001652:	0018      	movs	r0, r3
 8001654:	f000 fbe4 	bl	8001e20 <HAL_GPIO_Init>
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b00b      	add	sp, #44	; 0x2c
 800165e:	bd90      	pop	{r4, r7, pc}
 8001660:	40013800 	.word	0x40013800
 8001664:	40021000 	.word	0x40021000
 8001668:	40004400 	.word	0x40004400

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <NMI_Handler+0x4>

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	uint32_t isrflags = USART1->ISR;
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <USART1_IRQHandler+0x3c>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	60fb      	str	r3, [r7, #12]
	uint32_t control_reg1 = USART1->CR1;
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <USART1_IRQHandler+0x3c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60bb      	str	r3, [r7, #8]
	uint8_t rx_data ;


	 /*  UART in mode Receiver*/
   if(((isrflags & USART_ISR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) != RESET))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2220      	movs	r2, #32
 80016a2:	4013      	ands	r3, r2
 80016a4:	d00c      	beq.n	80016c0 <USART1_IRQHandler+0x34>
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2220      	movs	r2, #32
 80016aa:	4013      	ands	r3, r2
 80016ac:	d008      	beq.n	80016c0 <USART1_IRQHandler+0x34>
   {
	   rx_data = (uint8_t)USART1->RDR;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <USART1_IRQHandler+0x3c>)
 80016b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b2:	1dfb      	adds	r3, r7, #7
 80016b4:	701a      	strb	r2, [r3, #0]
	   spv1_uart_rx_event(rx_data);
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff f85a 	bl	8000774 <spv1_uart_rx_event>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b004      	add	sp, #16
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	40013800 	.word	0x40013800

080016cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	e00a      	b.n	80016f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016de:	e000      	b.n	80016e2 <_read+0x16>
 80016e0:	bf00      	nop
 80016e2:	0001      	movs	r1, r0
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf0      	blt.n	80016de <_read+0x12>
	}

return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b006      	add	sp, #24
 8001704:	bd80      	pop	{r7, pc}

08001706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e009      	b.n	800172c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	0018      	movs	r0, r3
 8001722:	f000 f92d 	bl	8001980 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbf1      	blt.n	8001718 <_write+0x12>
	}
	return len;
 8001734:	687b      	ldr	r3, [r7, #4]
}
 8001736:	0018      	movs	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	b006      	add	sp, #24
 800173c:	bd80      	pop	{r7, pc}

0800173e <_close>:

int _close(int file)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
	return -1;
 8001746:	2301      	movs	r3, #1
 8001748:	425b      	negs	r3, r3
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b002      	add	sp, #8
 8001750:	bd80      	pop	{r7, pc}

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	0192      	lsls	r2, r2, #6
 8001762:	605a      	str	r2, [r3, #4]
	return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b002      	add	sp, #8
 800176c:	bd80      	pop	{r7, pc}

0800176e <_isatty>:

int _isatty(int file)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
	return 1;
 8001776:	2301      	movs	r3, #1
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}

08001780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b004      	add	sp, #16
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	18d3      	adds	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c8:	f002 f94a 	bl	8003a60 <__errno>
 80017cc:	0003      	movs	r3, r0
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	425b      	negs	r3, r3
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	18d2      	adds	r2, r2, r3
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <_sbrk+0x64>)
 80017e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b006      	add	sp, #24
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20002000 	.word	0x20002000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	200002b4 	.word	0x200002b4
 8001800:	200003d8 	.word	0x200003d8

08001804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800182a:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <SystemCoreClockUpdate+0x154>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	220c      	movs	r2, #12
 8001830:	4013      	ands	r3, r2
 8001832:	617b      	str	r3, [r7, #20]

  switch (tmp)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b08      	cmp	r3, #8
 8001838:	d024      	beq.n	8001884 <SystemCoreClockUpdate+0x74>
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b08      	cmp	r3, #8
 800183e:	d825      	bhi.n	800188c <SystemCoreClockUpdate+0x7c>
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <SystemCoreClockUpdate+0x3e>
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b04      	cmp	r3, #4
 800184a:	d00e      	beq.n	800186a <SystemCoreClockUpdate+0x5a>
 800184c:	e01e      	b.n	800188c <SystemCoreClockUpdate+0x7c>
  {
    case 0x00U:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
 800184e:	4b45      	ldr	r3, [pc, #276]	; (8001964 <SystemCoreClockUpdate+0x154>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0b5b      	lsrs	r3, r3, #13
 8001854:	2207      	movs	r2, #7
 8001856:	4013      	ands	r3, r2
 8001858:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3301      	adds	r3, #1
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	0212      	lsls	r2, r2, #8
 8001862:	409a      	lsls	r2, r3
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <SystemCoreClockUpdate+0x158>)
 8001866:	601a      	str	r2, [r3, #0]
      break;
 8001868:	e069      	b.n	800193e <SystemCoreClockUpdate+0x12e>
    case 0x04U:  /* HSI used as system clock */
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800186a:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <SystemCoreClockUpdate+0x154>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2210      	movs	r2, #16
 8001870:	4013      	ands	r3, r2
 8001872:	d003      	beq.n	800187c <SystemCoreClockUpdate+0x6c>
      {
        SystemCoreClock = HSI_VALUE / 4U;
 8001874:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <SystemCoreClockUpdate+0x158>)
 8001876:	4a3d      	ldr	r2, [pc, #244]	; (800196c <SystemCoreClockUpdate+0x15c>)
 8001878:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = HSI_VALUE;
      }
      break;
 800187a:	e060      	b.n	800193e <SystemCoreClockUpdate+0x12e>
        SystemCoreClock = HSI_VALUE;
 800187c:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <SystemCoreClockUpdate+0x158>)
 800187e:	4a3c      	ldr	r2, [pc, #240]	; (8001970 <SystemCoreClockUpdate+0x160>)
 8001880:	601a      	str	r2, [r3, #0]
      break;
 8001882:	e05c      	b.n	800193e <SystemCoreClockUpdate+0x12e>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001884:	4b38      	ldr	r3, [pc, #224]	; (8001968 <SystemCoreClockUpdate+0x158>)
 8001886:	4a3b      	ldr	r2, [pc, #236]	; (8001974 <SystemCoreClockUpdate+0x164>)
 8001888:	601a      	str	r2, [r3, #0]
      break;
 800188a:	e058      	b.n	800193e <SystemCoreClockUpdate+0x12e>
    default:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800188c:	4b35      	ldr	r3, [pc, #212]	; (8001964 <SystemCoreClockUpdate+0x154>)
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	23f0      	movs	r3, #240	; 0xf0
 8001892:	039b      	lsls	r3, r3, #14
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <SystemCoreClockUpdate+0x154>)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	23c0      	movs	r3, #192	; 0xc0
 800189e:	041b      	lsls	r3, r3, #16
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	0c9b      	lsrs	r3, r3, #18
 80018a8:	4a33      	ldr	r2, [pc, #204]	; (8001978 <SystemCoreClockUpdate+0x168>)
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	0d9b      	lsrs	r3, r3, #22
 80018b2:	3301      	adds	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]

      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <SystemCoreClockUpdate+0x154>)
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	4013      	ands	r3, r2
 80018c0:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00U)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d128      	bne.n	800191a <SystemCoreClockUpdate+0x10a>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <SystemCoreClockUpdate+0x154>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2210      	movs	r2, #16
 80018ce:	4013      	ands	r3, r2
 80018d0:	d011      	beq.n	80018f6 <SystemCoreClockUpdate+0xe6>
        {
          SystemCoreClock = (((HSI_VALUE / 4U) * pllmul) / plldiv);
 80018d2:	6939      	ldr	r1, [r7, #16]
 80018d4:	000a      	movs	r2, r1
 80018d6:	0152      	lsls	r2, r2, #5
 80018d8:	1a52      	subs	r2, r2, r1
 80018da:	0193      	lsls	r3, r2, #6
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	185b      	adds	r3, r3, r1
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7fe fc18 	bl	800011c <__udivsi3>
 80018ec:	0003      	movs	r3, r0
 80018ee:	001a      	movs	r2, r3
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <SystemCoreClockUpdate+0x158>)
 80018f2:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80018f4:	e022      	b.n	800193c <SystemCoreClockUpdate+0x12c>
          SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80018f6:	6939      	ldr	r1, [r7, #16]
 80018f8:	000a      	movs	r2, r1
 80018fa:	0152      	lsls	r2, r2, #5
 80018fc:	1a52      	subs	r2, r2, r1
 80018fe:	0193      	lsls	r3, r2, #6
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	185b      	adds	r3, r3, r1
 8001906:	029b      	lsls	r3, r3, #10
 8001908:	68f9      	ldr	r1, [r7, #12]
 800190a:	0018      	movs	r0, r3
 800190c:	f7fe fc06 	bl	800011c <__udivsi3>
 8001910:	0003      	movs	r3, r0
 8001912:	001a      	movs	r2, r3
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <SystemCoreClockUpdate+0x158>)
 8001916:	601a      	str	r2, [r3, #0]
      break;
 8001918:	e010      	b.n	800193c <SystemCoreClockUpdate+0x12c>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800191a:	6939      	ldr	r1, [r7, #16]
 800191c:	000a      	movs	r2, r1
 800191e:	0152      	lsls	r2, r2, #5
 8001920:	1a52      	subs	r2, r2, r1
 8001922:	0193      	lsls	r3, r2, #6
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	185b      	adds	r3, r3, r1
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	68f9      	ldr	r1, [r7, #12]
 800192e:	0018      	movs	r0, r3
 8001930:	f7fe fbf4 	bl	800011c <__udivsi3>
 8001934:	0003      	movs	r3, r0
 8001936:	001a      	movs	r2, r3
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <SystemCoreClockUpdate+0x158>)
 800193a:	601a      	str	r2, [r3, #0]
      break;
 800193c:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <SystemCoreClockUpdate+0x154>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	220f      	movs	r2, #15
 8001946:	4013      	ands	r3, r2
 8001948:	4a0c      	ldr	r2, [pc, #48]	; (800197c <SystemCoreClockUpdate+0x16c>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <SystemCoreClockUpdate+0x158>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	40da      	lsrs	r2, r3
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SystemCoreClockUpdate+0x158>)
 8001958:	601a      	str	r2, [r3, #0]
}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	b006      	add	sp, #24
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	40021000 	.word	0x40021000
 8001968:	20000004 	.word	0x20000004
 800196c:	003d0900 	.word	0x003d0900
 8001970:	00f42400 	.word	0x00f42400
 8001974:	007a1200 	.word	0x007a1200
 8001978:	0800548c 	.word	0x0800548c
 800197c:	08005474 	.word	0x08005474

08001980 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001988:	2301      	movs	r3, #1
 800198a:	425b      	negs	r3, r3
 800198c:	1d39      	adds	r1, r7, #4
 800198e:	4804      	ldr	r0, [pc, #16]	; (80019a0 <__io_putchar+0x20>)
 8001990:	2201      	movs	r2, #1
 8001992:	f001 fb79 	bl	8003088 <HAL_UART_Transmit>
  return ch;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b002      	add	sp, #8
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000033c 	.word	0x2000033c

080019a4 <UART_Init>:

void UART_Init()
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0


GPIO_InitTypeDef GPIO_InitStruct;

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <UART_Init+0x16c>)
 80019ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ae:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <UART_Init+0x16c>)
 80019b0:	2104      	movs	r1, #4
 80019b2:	430a      	orrs	r2, r1
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019b6:	4b56      	ldr	r3, [pc, #344]	; (8001b10 <UART_Init+0x16c>)
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	2204      	movs	r2, #4
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <UART_Init+0x16c>)
 80019c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c6:	4b52      	ldr	r3, [pc, #328]	; (8001b10 <UART_Init+0x16c>)
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	430a      	orrs	r2, r1
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ce:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <UART_Init+0x16c>)
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	4013      	ands	r3, r2
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <UART_Init+0x16c>)
 80019dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019de:	4b4c      	ldr	r3, [pc, #304]	; (8001b10 <UART_Init+0x16c>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e6:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <UART_Init+0x16c>)
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80019f2:	23a0      	movs	r3, #160	; 0xa0
 80019f4:	05db      	lsls	r3, r3, #23
 80019f6:	2200      	movs	r2, #0
 80019f8:	2120      	movs	r1, #32
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 fb86 	bl	800210c <HAL_GPIO_WritePin>

/*Configure GPIO pin : PC13 */
GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a00:	210c      	movs	r1, #12
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	0192      	lsls	r2, r2, #6
 8001a08:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2284      	movs	r2, #132	; 0x84
 8001a0e:	0392      	lsls	r2, r2, #14
 8001a10:	605a      	str	r2, [r3, #4]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	000c      	movs	r4, r1
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	4a3d      	ldr	r2, [pc, #244]	; (8001b14 <UART_Init+0x170>)
 8001a1e:	0019      	movs	r1, r3
 8001a20:	0010      	movs	r0, r2
 8001a22:	f000 f9fd 	bl	8001e20 <HAL_GPIO_Init>

/*Configure GPIO pin : PA5 */
GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a26:	0021      	movs	r1, r4
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2201      	movs	r2, #1
 8001a32:	605a      	str	r2, [r3, #4]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	187a      	adds	r2, r7, r1
 8001a42:	23a0      	movs	r3, #160	; 0xa0
 8001a44:	05db      	lsls	r3, r3, #23
 8001a46:	0011      	movs	r1, r2
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 f9e9 	bl	8001e20 <HAL_GPIO_Init>
      - Parity = None
      - BaudRate = 19200 baud
      - Hardware flow control disabled (RTS and CTS signals) */


huart1.Instance = USART1;
 8001a4e:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <UART_Init+0x174>)
 8001a50:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <UART_Init+0x178>)
 8001a52:	601a      	str	r2, [r3, #0]
huart1.Init.BaudRate = 19200;
 8001a54:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <UART_Init+0x174>)
 8001a56:	2296      	movs	r2, #150	; 0x96
 8001a58:	01d2      	lsls	r2, r2, #7
 8001a5a:	605a      	str	r2, [r3, #4]
huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <UART_Init+0x174>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
huart1.Init.StopBits = UART_STOPBITS_1;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <UART_Init+0x174>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
huart1.Init.Parity = UART_PARITY_NONE;
 8001a68:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <UART_Init+0x174>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
huart1.Init.Mode = UART_MODE_TX_RX;
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <UART_Init+0x174>)
 8001a70:	220c      	movs	r2, #12
 8001a72:	615a      	str	r2, [r3, #20]
huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a74:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <UART_Init+0x174>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <UART_Init+0x174>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	61da      	str	r2, [r3, #28]
huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <UART_Init+0x174>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <UART_Init+0x174>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24

if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <UART_Init+0x174>)
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f001 faa6 	bl	8002fe0 <HAL_UART_Init>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d001      	beq.n	8001a9c <UART_Init+0xf8>
{
  Error_Handler();
 8001a98:	f7fe fe4e 	bl	8000738 <Error_Handler>
}

/* 4- Enable UART Receive Data Register Not Empty */

SET_BIT(USART1->CR1 , USART_CR1_RXNEIE);
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <UART_Init+0x178>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <UART_Init+0x178>)
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

/* 5 - Enable UART Interrupt in NVIC */
HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	201b      	movs	r0, #27
 8001aae:	f000 f985 	bl	8001dbc <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ab2:	201b      	movs	r0, #27
 8001ab4:	f000 f997 	bl	8001de6 <HAL_NVIC_EnableIRQ>


huart2.Instance = USART2;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <UART_Init+0x17c>)
 8001aba:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <UART_Init+0x180>)
 8001abc:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 19200;
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <UART_Init+0x17c>)
 8001ac0:	2296      	movs	r2, #150	; 0x96
 8001ac2:	01d2      	lsls	r2, r2, #7
 8001ac4:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <UART_Init+0x17c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <UART_Init+0x17c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <UART_Init+0x17c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <UART_Init+0x17c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <UART_Init+0x17c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <UART_Init+0x17c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <UART_Init+0x17c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <UART_Init+0x17c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <UART_Init+0x17c>)
 8001af8:	0018      	movs	r0, r3
 8001afa:	f001 fa71 	bl	8002fe0 <HAL_UART_Init>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d001      	beq.n	8001b06 <UART_Init+0x162>
{
  Error_Handler();
 8001b02:	f7fe fe19 	bl	8000738 <Error_Handler>
}


}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b009      	add	sp, #36	; 0x24
 8001b0c:	bd90      	pop	{r4, r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	40021000 	.word	0x40021000
 8001b14:	50000800 	.word	0x50000800
 8001b18:	200002b8 	.word	0x200002b8
 8001b1c:	40013800 	.word	0x40013800
 8001b20:	2000033c 	.word	0x2000033c
 8001b24:	40004400 	.word	0x40004400

08001b28 <UART_driver_send_data>:
  }

}

void UART_driver_send_data (uint8_t* Buff , uint8_t Size)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	000a      	movs	r2, r1
 8001b32:	1cfb      	adds	r3, r7, #3
 8001b34:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, Buff, Size, 100);
 8001b36:	1cfb      	adds	r3, r7, #3
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4804      	ldr	r0, [pc, #16]	; (8001b50 <UART_driver_send_data+0x28>)
 8001b40:	2364      	movs	r3, #100	; 0x64
 8001b42:	f001 faa1 	bl	8003088 <HAL_UART_Transmit>
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b002      	add	sp, #8
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	200002b8 	.word	0x200002b8

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopForever+0xe>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopForever+0x16>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b7e:	f7ff fe41 	bl	8001804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f001 ff73 	bl	8003a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7fe fd2b 	bl	80005e0 <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
  ldr   r0, =_estack
 8001b8c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b98:	08005588 	.word	0x08005588
  ldr r2, =_sbss
 8001b9c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ba0:	200003d4 	.word	0x200003d4

08001ba4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_COMP_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_Init+0x3c>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Init+0x3c>)
 8001bba:	2140      	movs	r1, #64	; 0x40
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f000 f811 	bl	8001be8 <HAL_InitTick>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	e001      	b.n	8001bd6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bd2:	f7ff fcb9 	bl	8001548 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	40022000 	.word	0x40022000

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_InitTick+0x5c>)
 8001bf2:	681c      	ldr	r4, [r3, #0]
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_InitTick+0x60>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	23fa      	movs	r3, #250	; 0xfa
 8001bfc:	0098      	lsls	r0, r3, #2
 8001bfe:	f7fe fa8d 	bl	800011c <__udivsi3>
 8001c02:	0003      	movs	r3, r0
 8001c04:	0019      	movs	r1, r3
 8001c06:	0020      	movs	r0, r4
 8001c08:	f7fe fa88 	bl	800011c <__udivsi3>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f000 f8f9 	bl	8001e06 <HAL_SYSTICK_Config>
 8001c14:	1e03      	subs	r3, r0, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e00f      	b.n	8001c3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d80b      	bhi.n	8001c3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	2301      	movs	r3, #1
 8001c26:	425b      	negs	r3, r3
 8001c28:	2200      	movs	r2, #0
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f000 f8c6 	bl	8001dbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_InitTick+0x64>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b003      	add	sp, #12
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	20000004 	.word	0x20000004
 8001c48:	2000000c 	.word	0x2000000c
 8001c4c:	20000008 	.word	0x20000008

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b02      	ldr	r3, [pc, #8]	; (8001c60 <HAL_GetTick+0x10>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	200003c0 	.word	0x200003c0

08001c64 <__NVIC_EnableIRQ>:
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	1dfb      	adds	r3, r7, #7
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b7f      	cmp	r3, #127	; 0x7f
 8001c76:	d809      	bhi.n	8001c8c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c78:	1dfb      	adds	r3, r7, #7
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	231f      	movs	r3, #31
 8001c80:	401a      	ands	r2, r3
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_EnableIRQ+0x30>)
 8001c84:	2101      	movs	r1, #1
 8001c86:	4091      	lsls	r1, r2
 8001c88:	000a      	movs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
}
 8001c8c:	46c0      	nop			; (mov r8, r8)
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b002      	add	sp, #8
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b7f      	cmp	r3, #127	; 0x7f
 8001cac:	d828      	bhi.n	8001d00 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cae:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <__NVIC_SetPriority+0xd4>)
 8001cb0:	1dfb      	adds	r3, r7, #7
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	33c0      	adds	r3, #192	; 0xc0
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	589b      	ldr	r3, [r3, r2]
 8001cbe:	1dfa      	adds	r2, r7, #7
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	00d2      	lsls	r2, r2, #3
 8001cca:	21ff      	movs	r1, #255	; 0xff
 8001ccc:	4091      	lsls	r1, r2
 8001cce:	000a      	movs	r2, r1
 8001cd0:	43d2      	mvns	r2, r2
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	019b      	lsls	r3, r3, #6
 8001cda:	22ff      	movs	r2, #255	; 0xff
 8001cdc:	401a      	ands	r2, r3
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	4003      	ands	r3, r0
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cec:	481f      	ldr	r0, [pc, #124]	; (8001d6c <__NVIC_SetPriority+0xd4>)
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	33c0      	adds	r3, #192	; 0xc0
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	501a      	str	r2, [r3, r0]
}
 8001cfe:	e031      	b.n	8001d64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d00:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <__NVIC_SetPriority+0xd8>)
 8001d02:	1dfb      	adds	r3, r7, #7
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	0019      	movs	r1, r3
 8001d08:	230f      	movs	r3, #15
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	3b08      	subs	r3, #8
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3306      	adds	r3, #6
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	18d3      	adds	r3, r2, r3
 8001d16:	3304      	adds	r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	1dfa      	adds	r2, r7, #7
 8001d1c:	7812      	ldrb	r2, [r2, #0]
 8001d1e:	0011      	movs	r1, r2
 8001d20:	2203      	movs	r2, #3
 8001d22:	400a      	ands	r2, r1
 8001d24:	00d2      	lsls	r2, r2, #3
 8001d26:	21ff      	movs	r1, #255	; 0xff
 8001d28:	4091      	lsls	r1, r2
 8001d2a:	000a      	movs	r2, r1
 8001d2c:	43d2      	mvns	r2, r2
 8001d2e:	401a      	ands	r2, r3
 8001d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	019b      	lsls	r3, r3, #6
 8001d36:	22ff      	movs	r2, #255	; 0xff
 8001d38:	401a      	ands	r2, r3
 8001d3a:	1dfb      	adds	r3, r7, #7
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	2303      	movs	r3, #3
 8001d42:	4003      	ands	r3, r0
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d48:	4809      	ldr	r0, [pc, #36]	; (8001d70 <__NVIC_SetPriority+0xd8>)
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	001c      	movs	r4, r3
 8001d50:	230f      	movs	r3, #15
 8001d52:	4023      	ands	r3, r4
 8001d54:	3b08      	subs	r3, #8
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	3306      	adds	r3, #6
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	18c3      	adds	r3, r0, r3
 8001d60:	3304      	adds	r3, #4
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b003      	add	sp, #12
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <SysTick_Config>:
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	045b      	lsls	r3, r3, #17
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d301      	bcc.n	8001d8c <SysTick_Config+0x18>
    return (1UL);                                                   /* Reload value impossible */
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e010      	b.n	8001dae <SysTick_Config+0x3a>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <SysTick_Config+0x44>)
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	3a01      	subs	r2, #1
 8001d92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d94:	2301      	movs	r3, #1
 8001d96:	425b      	negs	r3, r3
 8001d98:	2103      	movs	r1, #3
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff ff7c 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <SysTick_Config+0x44>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <SysTick_Config+0x44>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b002      	add	sp, #8
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	1c02      	adds	r2, r0, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b25b      	sxtb	r3, r3
 8001dd6:	0011      	movs	r1, r2
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b004      	add	sp, #16
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	0002      	movs	r2, r0
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df2:	1dfb      	adds	r3, r7, #7
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff ff33 	bl	8001c64 <__NVIC_EnableIRQ>
}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b002      	add	sp, #8
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff ffaf 	bl	8001d74 <SysTick_Config>
 8001e16:	0003      	movs	r3, r0
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e36:	e14f      	b.n	80020d8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4091      	lsls	r1, r2
 8001e42:	000a      	movs	r2, r1
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d100      	bne.n	8001e50 <HAL_GPIO_Init+0x30>
 8001e4e:	e140      	b.n	80020d2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2203      	movs	r2, #3
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d005      	beq.n	8001e68 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2203      	movs	r2, #3
 8001e62:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d130      	bne.n	8001eca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	409a      	lsls	r2, r3
 8001e76:	0013      	movs	r3, r2
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	0013      	movs	r3, r2
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d017      	beq.n	8001f06 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	0013      	movs	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d123      	bne.n	8001f5a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	58d3      	ldr	r3, [r2, r3]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2207      	movs	r2, #7
 8001f24:	4013      	ands	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2107      	movs	r1, #7
 8001f3e:	400b      	ands	r3, r1
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	409a      	lsls	r2, r3
 8001f44:	0013      	movs	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	0092      	lsls	r2, r2, #2
 8001f56:	6939      	ldr	r1, [r7, #16]
 8001f58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	409a      	lsls	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2203      	movs	r2, #3
 8001f78:	401a      	ands	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	0013      	movs	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	23c0      	movs	r3, #192	; 0xc0
 8001f94:	029b      	lsls	r3, r3, #10
 8001f96:	4013      	ands	r3, r2
 8001f98:	d100      	bne.n	8001f9c <HAL_GPIO_Init+0x17c>
 8001f9a:	e09a      	b.n	80020d2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9c:	4b54      	ldr	r3, [pc, #336]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa0:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa8:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <HAL_GPIO_Init+0x2d4>)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	589b      	ldr	r3, [r3, r2]
 8001fb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	4013      	ands	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	0013      	movs	r3, r2
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	23a0      	movs	r3, #160	; 0xa0
 8001fd0:	05db      	lsls	r3, r3, #23
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d019      	beq.n	800200a <HAL_GPIO_Init+0x1ea>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a47      	ldr	r2, [pc, #284]	; (80020f8 <HAL_GPIO_Init+0x2d8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x1e6>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a46      	ldr	r2, [pc, #280]	; (80020fc <HAL_GPIO_Init+0x2dc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x1e2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a45      	ldr	r2, [pc, #276]	; (8002100 <HAL_GPIO_Init+0x2e0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x1de>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a44      	ldr	r2, [pc, #272]	; (8002104 <HAL_GPIO_Init+0x2e4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x1da>
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	e008      	b.n	800200c <HAL_GPIO_Init+0x1ec>
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x1ec>
 8001ffe:	2303      	movs	r3, #3
 8002000:	e004      	b.n	800200c <HAL_GPIO_Init+0x1ec>
 8002002:	2302      	movs	r3, #2
 8002004:	e002      	b.n	800200c <HAL_GPIO_Init+0x1ec>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_GPIO_Init+0x1ec>
 800200a:	2300      	movs	r3, #0
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	2103      	movs	r1, #3
 8002010:	400a      	ands	r2, r1
 8002012:	0092      	lsls	r2, r2, #2
 8002014:	4093      	lsls	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800201c:	4935      	ldr	r1, [pc, #212]	; (80020f4 <HAL_GPIO_Init+0x2d4>)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <HAL_GPIO_Init+0x2e8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43da      	mvns	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	025b      	lsls	r3, r3, #9
 8002042:	4013      	ands	r3, r2
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800204e:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <HAL_GPIO_Init+0x2e8>)
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002054:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <HAL_GPIO_Init+0x2e8>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43da      	mvns	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	029b      	lsls	r3, r3, #10
 800206c:	4013      	ands	r3, r2
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002078:	4b23      	ldr	r3, [pc, #140]	; (8002108 <HAL_GPIO_Init+0x2e8>)
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_GPIO_Init+0x2e8>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43da      	mvns	r2, r3
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	035b      	lsls	r3, r3, #13
 8002096:	4013      	ands	r3, r2
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_GPIO_Init+0x2e8>)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <HAL_GPIO_Init+0x2e8>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43da      	mvns	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	039b      	lsls	r3, r3, #14
 80020c0:	4013      	ands	r3, r2
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_GPIO_Init+0x2e8>)
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	40da      	lsrs	r2, r3
 80020e0:	1e13      	subs	r3, r2, #0
 80020e2:	d000      	beq.n	80020e6 <HAL_GPIO_Init+0x2c6>
 80020e4:	e6a8      	b.n	8001e38 <HAL_GPIO_Init+0x18>
  }
}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b006      	add	sp, #24
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010000 	.word	0x40010000
 80020f8:	50000400 	.word	0x50000400
 80020fc:	50000800 	.word	0x50000800
 8002100:	50000c00 	.word	0x50000c00
 8002104:	50001c00 	.word	0x50001c00
 8002108:	40010400 	.word	0x40010400

0800210c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	0008      	movs	r0, r1
 8002116:	0011      	movs	r1, r2
 8002118:	1cbb      	adds	r3, r7, #2
 800211a:	1c02      	adds	r2, r0, #0
 800211c:	801a      	strh	r2, [r3, #0]
 800211e:	1c7b      	adds	r3, r7, #1
 8002120:	1c0a      	adds	r2, r1, #0
 8002122:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002124:	1c7b      	adds	r3, r7, #1
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212c:	1cbb      	adds	r3, r7, #2
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002134:	e003      	b.n	800213e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002136:	1cbb      	adds	r3, r7, #2
 8002138:	881a      	ldrh	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b5b0      	push	{r4, r5, r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	f000 fbaf 	bl	80028ba <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215c:	4bcf      	ldr	r3, [pc, #828]	; (800249c <HAL_RCC_OscConfig+0x354>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	220c      	movs	r2, #12
 8002162:	4013      	ands	r3, r2
 8002164:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002166:	4bcd      	ldr	r3, [pc, #820]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	4013      	ands	r3, r2
 8002170:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	4013      	ands	r3, r2
 800217a:	d100      	bne.n	800217e <HAL_RCC_OscConfig+0x36>
 800217c:	e07e      	b.n	800227c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d007      	beq.n	8002194 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d112      	bne.n	80021b0 <HAL_RCC_OscConfig+0x68>
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	025b      	lsls	r3, r3, #9
 8002190:	429a      	cmp	r2, r3
 8002192:	d10d      	bne.n	80021b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4bc1      	ldr	r3, [pc, #772]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	029b      	lsls	r3, r3, #10
 800219c:	4013      	ands	r3, r2
 800219e:	d100      	bne.n	80021a2 <HAL_RCC_OscConfig+0x5a>
 80021a0:	e06b      	b.n	800227a <HAL_RCC_OscConfig+0x132>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d167      	bne.n	800227a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f000 fb85 	bl	80028ba <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x84>
 80021bc:	4bb7      	ldr	r3, [pc, #732]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4bb6      	ldr	r3, [pc, #728]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80021c2:	2180      	movs	r1, #128	; 0x80
 80021c4:	0249      	lsls	r1, r1, #9
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e027      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	23a0      	movs	r3, #160	; 0xa0
 80021d2:	02db      	lsls	r3, r3, #11
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d10e      	bne.n	80021f6 <HAL_RCC_OscConfig+0xae>
 80021d8:	4bb0      	ldr	r3, [pc, #704]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4baf      	ldr	r3, [pc, #700]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	02c9      	lsls	r1, r1, #11
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	4bad      	ldr	r3, [pc, #692]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4bac      	ldr	r3, [pc, #688]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	0249      	lsls	r1, r1, #9
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e012      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021f6:	4ba9      	ldr	r3, [pc, #676]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4ba8      	ldr	r3, [pc, #672]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80021fc:	49a8      	ldr	r1, [pc, #672]	; (80024a0 <HAL_RCC_OscConfig+0x358>)
 80021fe:	400a      	ands	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	4ba6      	ldr	r3, [pc, #664]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	025b      	lsls	r3, r3, #9
 800220a:	4013      	ands	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4ba2      	ldr	r3, [pc, #648]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4ba1      	ldr	r3, [pc, #644]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002216:	49a3      	ldr	r1, [pc, #652]	; (80024a4 <HAL_RCC_OscConfig+0x35c>)
 8002218:	400a      	ands	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d015      	beq.n	8002250 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff fd14 	bl	8001c50 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800222c:	e009      	b.n	8002242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222e:	f7ff fd0f 	bl	8001c50 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d902      	bls.n	8002242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	f000 fb3c 	bl	80028ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002242:	4b96      	ldr	r3, [pc, #600]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	029b      	lsls	r3, r3, #10
 800224a:	4013      	ands	r3, r2
 800224c:	d0ef      	beq.n	800222e <HAL_RCC_OscConfig+0xe6>
 800224e:	e015      	b.n	800227c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7ff fcfe 	bl	8001c50 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800225a:	f7ff fcf9 	bl	8001c50 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b64      	cmp	r3, #100	; 0x64
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e326      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800226c:	4b8b      	ldr	r3, [pc, #556]	; (800249c <HAL_RCC_OscConfig+0x354>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	4013      	ands	r3, r2
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x112>
 8002278:	e000      	b.n	800227c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d100      	bne.n	8002288 <HAL_RCC_OscConfig+0x140>
 8002286:	e08b      	b.n	80023a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d13e      	bne.n	8002318 <HAL_RCC_OscConfig+0x1d0>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d13b      	bne.n	8002318 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80022a0:	4b7e      	ldr	r3, [pc, #504]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2204      	movs	r2, #4
 80022a6:	4013      	ands	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_RCC_OscConfig+0x16c>
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e302      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b79      	ldr	r3, [pc, #484]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4a7b      	ldr	r2, [pc, #492]	; (80024a8 <HAL_RCC_OscConfig+0x360>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	0019      	movs	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	4b75      	ldr	r3, [pc, #468]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022ca:	4b74      	ldr	r3, [pc, #464]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2209      	movs	r2, #9
 80022d0:	4393      	bics	r3, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	4b71      	ldr	r3, [pc, #452]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022dc:	f000 fc40 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 80022e0:	0001      	movs	r1, r0
 80022e2:	4b6e      	ldr	r3, [pc, #440]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	220f      	movs	r2, #15
 80022ea:	4013      	ands	r3, r2
 80022ec:	4a6f      	ldr	r2, [pc, #444]	; (80024ac <HAL_RCC_OscConfig+0x364>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	000a      	movs	r2, r1
 80022f2:	40da      	lsrs	r2, r3
 80022f4:	4b6e      	ldr	r3, [pc, #440]	; (80024b0 <HAL_RCC_OscConfig+0x368>)
 80022f6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80022f8:	4b6e      	ldr	r3, [pc, #440]	; (80024b4 <HAL_RCC_OscConfig+0x36c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2513      	movs	r5, #19
 80022fe:	197c      	adds	r4, r7, r5
 8002300:	0018      	movs	r0, r3
 8002302:	f7ff fc71 	bl	8001be8 <HAL_InitTick>
 8002306:	0003      	movs	r3, r0
 8002308:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800230a:	197b      	adds	r3, r7, r5
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d046      	beq.n	80023a0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002312:	197b      	adds	r3, r7, r5
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	e2d0      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d027      	beq.n	800236e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800231e:	4b5f      	ldr	r3, [pc, #380]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2209      	movs	r2, #9
 8002324:	4393      	bics	r3, r2
 8002326:	0019      	movs	r1, r3
 8002328:	4b5c      	ldr	r3, [pc, #368]	; (800249c <HAL_RCC_OscConfig+0x354>)
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	430a      	orrs	r2, r1
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff fc8e 	bl	8001c50 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff fc89 	bl	8001c50 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e2b6      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_OscConfig+0x354>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2204      	movs	r2, #4
 8002352:	4013      	ands	r3, r2
 8002354:	d0f1      	beq.n	800233a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4b51      	ldr	r3, [pc, #324]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a53      	ldr	r2, [pc, #332]	; (80024a8 <HAL_RCC_OscConfig+0x360>)
 800235c:	4013      	ands	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	021a      	lsls	r2, r3, #8
 8002366:	4b4d      	ldr	r3, [pc, #308]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002368:	430a      	orrs	r2, r1
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	e018      	b.n	80023a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b4b      	ldr	r3, [pc, #300]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002374:	2101      	movs	r1, #1
 8002376:	438a      	bics	r2, r1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff fc69 	bl	8001c50 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002384:	f7ff fc64 	bl	8001c50 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e291      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2204      	movs	r2, #4
 800239c:	4013      	ands	r3, r2
 800239e:	d1f1      	bne.n	8002384 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2210      	movs	r2, #16
 80023a6:	4013      	ands	r3, r2
 80023a8:	d100      	bne.n	80023ac <HAL_RCC_OscConfig+0x264>
 80023aa:	e0a1      	b.n	80024f0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d140      	bne.n	8002434 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023b2:	4b3a      	ldr	r3, [pc, #232]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x282>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e277      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ca:	4b34      	ldr	r3, [pc, #208]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4a3a      	ldr	r2, [pc, #232]	; (80024b8 <HAL_RCC_OscConfig+0x370>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d8:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023de:	4b2f      	ldr	r3, [pc, #188]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	0a19      	lsrs	r1, r3, #8
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	061a      	lsls	r2, r3, #24
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCC_OscConfig+0x354>)
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	0b5b      	lsrs	r3, r3, #13
 80023f8:	3301      	adds	r3, #1
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	0212      	lsls	r2, r2, #8
 80023fe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002400:	4b26      	ldr	r3, [pc, #152]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	210f      	movs	r1, #15
 8002408:	400b      	ands	r3, r1
 800240a:	4928      	ldr	r1, [pc, #160]	; (80024ac <HAL_RCC_OscConfig+0x364>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_RCC_OscConfig+0x368>)
 8002412:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_RCC_OscConfig+0x36c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2513      	movs	r5, #19
 800241a:	197c      	adds	r4, r7, r5
 800241c:	0018      	movs	r0, r3
 800241e:	f7ff fbe3 	bl	8001be8 <HAL_InitTick>
 8002422:	0003      	movs	r3, r0
 8002424:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002426:	197b      	adds	r3, r7, r5
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d060      	beq.n	80024f0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800242e:	197b      	adds	r3, r7, r5
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	e242      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d03f      	beq.n	80024bc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_RCC_OscConfig+0x354>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002442:	2180      	movs	r1, #128	; 0x80
 8002444:	0049      	lsls	r1, r1, #1
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7ff fc01 	bl	8001c50 <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002454:	f7ff fbfc 	bl	8001c50 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e229      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <HAL_RCC_OscConfig+0x370>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	0a19      	lsrs	r1, r3, #8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	061a      	lsls	r2, r3, #24
 8002494:	4b01      	ldr	r3, [pc, #4]	; (800249c <HAL_RCC_OscConfig+0x354>)
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	e029      	b.n	80024f0 <HAL_RCC_OscConfig+0x3a8>
 800249c:	40021000 	.word	0x40021000
 80024a0:	fffeffff 	.word	0xfffeffff
 80024a4:	fffbffff 	.word	0xfffbffff
 80024a8:	ffffe0ff 	.word	0xffffe0ff
 80024ac:	08005474 	.word	0x08005474
 80024b0:	20000004 	.word	0x20000004
 80024b4:	20000008 	.word	0x20000008
 80024b8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024bc:	4bbd      	ldr	r3, [pc, #756]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4bbc      	ldr	r3, [pc, #752]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80024c2:	49bd      	ldr	r1, [pc, #756]	; (80027b8 <HAL_RCC_OscConfig+0x670>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff fbc2 	bl	8001c50 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024d2:	f7ff fbbd 	bl	8001c50 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1ea      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024e4:	4bb3      	ldr	r3, [pc, #716]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2208      	movs	r2, #8
 80024f6:	4013      	ands	r3, r2
 80024f8:	d036      	beq.n	8002568 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d019      	beq.n	8002536 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002502:	4bac      	ldr	r3, [pc, #688]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002506:	4bab      	ldr	r3, [pc, #684]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7ff fb9f 	bl	8001c50 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002518:	f7ff fb9a 	bl	8001c50 <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1c7      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800252a:	4ba2      	ldr	r3, [pc, #648]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 800252c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d0f1      	beq.n	8002518 <HAL_RCC_OscConfig+0x3d0>
 8002534:	e018      	b.n	8002568 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002536:	4b9f      	ldr	r3, [pc, #636]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800253a:	4b9e      	ldr	r3, [pc, #632]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 800253c:	2101      	movs	r1, #1
 800253e:	438a      	bics	r2, r1
 8002540:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002542:	f7ff fb85 	bl	8001c50 <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254c:	f7ff fb80 	bl	8001c50 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1ad      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800255e:	4b95      	ldr	r3, [pc, #596]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d1f1      	bne.n	800254c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2204      	movs	r2, #4
 800256e:	4013      	ands	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_RCC_OscConfig+0x42c>
 8002572:	e0ae      	b.n	80026d2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002574:	2027      	movs	r0, #39	; 0x27
 8002576:	183b      	adds	r3, r7, r0
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257c:	4b8d      	ldr	r3, [pc, #564]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 800257e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	055b      	lsls	r3, r3, #21
 8002584:	4013      	ands	r3, r2
 8002586:	d109      	bne.n	800259c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002588:	4b8a      	ldr	r3, [pc, #552]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 800258a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800258c:	4b89      	ldr	r3, [pc, #548]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	0549      	lsls	r1, r1, #21
 8002592:	430a      	orrs	r2, r1
 8002594:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002596:	183b      	adds	r3, r7, r0
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	4b87      	ldr	r3, [pc, #540]	; (80027bc <HAL_RCC_OscConfig+0x674>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	d11a      	bne.n	80025de <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a8:	4b84      	ldr	r3, [pc, #528]	; (80027bc <HAL_RCC_OscConfig+0x674>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b83      	ldr	r3, [pc, #524]	; (80027bc <HAL_RCC_OscConfig+0x674>)
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	0049      	lsls	r1, r1, #1
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b6:	f7ff fb4b 	bl	8001c50 <HAL_GetTick>
 80025ba:	0003      	movs	r3, r0
 80025bc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c0:	f7ff fb46 	bl	8001c50 <HAL_GetTick>
 80025c4:	0002      	movs	r2, r0
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e173      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	4b7a      	ldr	r3, [pc, #488]	; (80027bc <HAL_RCC_OscConfig+0x674>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4013      	ands	r3, r2
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_OscConfig+0x4b2>
 80025ea:	4b72      	ldr	r3, [pc, #456]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80025ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ee:	4b71      	ldr	r3, [pc, #452]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	0049      	lsls	r1, r1, #1
 80025f4:	430a      	orrs	r2, r1
 80025f6:	651a      	str	r2, [r3, #80]	; 0x50
 80025f8:	e031      	b.n	800265e <HAL_RCC_OscConfig+0x516>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x4d4>
 8002602:	4b6c      	ldr	r3, [pc, #432]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002606:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002608:	496b      	ldr	r1, [pc, #428]	; (80027b8 <HAL_RCC_OscConfig+0x670>)
 800260a:	400a      	ands	r2, r1
 800260c:	651a      	str	r2, [r3, #80]	; 0x50
 800260e:	4b69      	ldr	r3, [pc, #420]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002612:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002614:	496a      	ldr	r1, [pc, #424]	; (80027c0 <HAL_RCC_OscConfig+0x678>)
 8002616:	400a      	ands	r2, r1
 8002618:	651a      	str	r2, [r3, #80]	; 0x50
 800261a:	e020      	b.n	800265e <HAL_RCC_OscConfig+0x516>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	23a0      	movs	r3, #160	; 0xa0
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	429a      	cmp	r2, r3
 8002626:	d10e      	bne.n	8002646 <HAL_RCC_OscConfig+0x4fe>
 8002628:	4b62      	ldr	r3, [pc, #392]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 800262a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800262c:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	00c9      	lsls	r1, r1, #3
 8002632:	430a      	orrs	r2, r1
 8002634:	651a      	str	r2, [r3, #80]	; 0x50
 8002636:	4b5f      	ldr	r3, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800263a:	4b5e      	ldr	r3, [pc, #376]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	0049      	lsls	r1, r1, #1
 8002640:	430a      	orrs	r2, r1
 8002642:	651a      	str	r2, [r3, #80]	; 0x50
 8002644:	e00b      	b.n	800265e <HAL_RCC_OscConfig+0x516>
 8002646:	4b5b      	ldr	r3, [pc, #364]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 800264c:	495a      	ldr	r1, [pc, #360]	; (80027b8 <HAL_RCC_OscConfig+0x670>)
 800264e:	400a      	ands	r2, r1
 8002650:	651a      	str	r2, [r3, #80]	; 0x50
 8002652:	4b58      	ldr	r3, [pc, #352]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002656:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002658:	4959      	ldr	r1, [pc, #356]	; (80027c0 <HAL_RCC_OscConfig+0x678>)
 800265a:	400a      	ands	r2, r1
 800265c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d015      	beq.n	8002692 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7ff faf3 	bl	8001c50 <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800266e:	e009      	b.n	8002684 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7ff faee 	bl	8001c50 <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	4a52      	ldr	r2, [pc, #328]	; (80027c4 <HAL_RCC_OscConfig+0x67c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e11a      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4013      	ands	r3, r2
 800268e:	d0ef      	beq.n	8002670 <HAL_RCC_OscConfig+0x528>
 8002690:	e014      	b.n	80026bc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7ff fadd 	bl	8001c50 <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800269a:	e009      	b.n	80026b0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7ff fad8 	bl	8001c50 <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	4a47      	ldr	r2, [pc, #284]	; (80027c4 <HAL_RCC_OscConfig+0x67c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e104      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026b0:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80026b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	d1ef      	bne.n	800269c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026bc:	2327      	movs	r3, #39	; 0x27
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80026c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ca:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80026cc:	493e      	ldr	r1, [pc, #248]	; (80027c8 <HAL_RCC_OscConfig+0x680>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2220      	movs	r2, #32
 80026d8:	4013      	ands	r3, r2
 80026da:	d049      	beq.n	8002770 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d026      	beq.n	8002732 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80026e4:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80026ea:	2101      	movs	r1, #1
 80026ec:	430a      	orrs	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80026f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	430a      	orrs	r2, r1
 80026fa:	635a      	str	r2, [r3, #52]	; 0x34
 80026fc:	4b33      	ldr	r3, [pc, #204]	; (80027cc <HAL_RCC_OscConfig+0x684>)
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_RCC_OscConfig+0x684>)
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	0189      	lsls	r1, r1, #6
 8002706:	430a      	orrs	r2, r1
 8002708:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff faa1 	bl	8001c50 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002714:	f7ff fa9c 	bl	8001c50 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0c9      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002726:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	d0f1      	beq.n	8002714 <HAL_RCC_OscConfig+0x5cc>
 8002730:	e01e      	b.n	8002770 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002738:	2101      	movs	r1, #1
 800273a:	438a      	bics	r2, r1
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_RCC_OscConfig+0x684>)
 8002740:	6a1a      	ldr	r2, [r3, #32]
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_OscConfig+0x684>)
 8002744:	4922      	ldr	r1, [pc, #136]	; (80027d0 <HAL_RCC_OscConfig+0x688>)
 8002746:	400a      	ands	r2, r1
 8002748:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7ff fa81 	bl	8001c50 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002754:	f7ff fa7c 	bl	8001c50 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0a9      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2202      	movs	r2, #2
 800276c:	4013      	ands	r3, r2
 800276e:	d1f1      	bne.n	8002754 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d100      	bne.n	800277a <HAL_RCC_OscConfig+0x632>
 8002778:	e09e      	b.n	80028b8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d100      	bne.n	8002782 <HAL_RCC_OscConfig+0x63a>
 8002780:	e077      	b.n	8002872 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	2b02      	cmp	r3, #2
 8002788:	d158      	bne.n	800283c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_OscConfig+0x66c>)
 8002790:	4910      	ldr	r1, [pc, #64]	; (80027d4 <HAL_RCC_OscConfig+0x68c>)
 8002792:	400a      	ands	r2, r1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7ff fa5b 	bl	8001c50 <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800279e:	e01b      	b.n	80027d8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff fa56 	bl	8001c50 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d914      	bls.n	80027d8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e083      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	40021000 	.word	0x40021000
 80027b8:	fffffeff 	.word	0xfffffeff
 80027bc:	40007000 	.word	0x40007000
 80027c0:	fffffbff 	.word	0xfffffbff
 80027c4:	00001388 	.word	0x00001388
 80027c8:	efffffff 	.word	0xefffffff
 80027cc:	40010000 	.word	0x40010000
 80027d0:	ffffdfff 	.word	0xffffdfff
 80027d4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027d8:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <HAL_RCC_OscConfig+0x77c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	2380      	movs	r3, #128	; 0x80
 80027de:	049b      	lsls	r3, r3, #18
 80027e0:	4013      	ands	r3, r2
 80027e2:	d1dd      	bne.n	80027a0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e4:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_RCC_OscConfig+0x77c>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a37      	ldr	r2, [pc, #220]	; (80028c8 <HAL_RCC_OscConfig+0x780>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	431a      	orrs	r2, r3
 80027fe:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_RCC_OscConfig+0x77c>)
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002804:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <HAL_RCC_OscConfig+0x77c>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <HAL_RCC_OscConfig+0x77c>)
 800280a:	2180      	movs	r1, #128	; 0x80
 800280c:	0449      	lsls	r1, r1, #17
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7ff fa1d 	bl	8001c50 <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7ff fa18 	bl	8001c50 <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e045      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800282e:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_RCC_OscConfig+0x77c>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	049b      	lsls	r3, r3, #18
 8002836:	4013      	ands	r3, r2
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x6d4>
 800283a:	e03d      	b.n	80028b8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <HAL_RCC_OscConfig+0x77c>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_OscConfig+0x77c>)
 8002842:	4922      	ldr	r1, [pc, #136]	; (80028cc <HAL_RCC_OscConfig+0x784>)
 8002844:	400a      	ands	r2, r1
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff fa02 	bl	8001c50 <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7ff f9fd 	bl	8001c50 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e02a      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_RCC_OscConfig+0x77c>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	049b      	lsls	r3, r3, #18
 800286c:	4013      	ands	r3, r2
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x70a>
 8002870:	e022      	b.n	80028b8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e01d      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCC_OscConfig+0x77c>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	025b      	lsls	r3, r3, #9
 800288a:	401a      	ands	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	429a      	cmp	r2, r3
 8002892:	d10f      	bne.n	80028b4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	23f0      	movs	r3, #240	; 0xf0
 8002898:	039b      	lsls	r3, r3, #14
 800289a:	401a      	ands	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	23c0      	movs	r3, #192	; 0xc0
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	401a      	ands	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b00a      	add	sp, #40	; 0x28
 80028c0:	bdb0      	pop	{r4, r5, r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	40021000 	.word	0x40021000
 80028c8:	ff02ffff 	.word	0xff02ffff
 80028cc:	feffffff 	.word	0xfeffffff

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e128      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b96      	ldr	r3, [pc, #600]	; (8002b40 <HAL_RCC_ClockConfig+0x270>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2201      	movs	r2, #1
 80028ea:	4013      	ands	r3, r2
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d91e      	bls.n	8002930 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b93      	ldr	r3, [pc, #588]	; (8002b40 <HAL_RCC_ClockConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2201      	movs	r2, #1
 80028f8:	4393      	bics	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	4b90      	ldr	r3, [pc, #576]	; (8002b40 <HAL_RCC_ClockConfig+0x270>)
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002904:	f7ff f9a4 	bl	8001c50 <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290c:	e009      	b.n	8002922 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290e:	f7ff f99f 	bl	8001c50 <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	4a8a      	ldr	r2, [pc, #552]	; (8002b44 <HAL_RCC_ClockConfig+0x274>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e109      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b87      	ldr	r3, [pc, #540]	; (8002b40 <HAL_RCC_ClockConfig+0x270>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d1ee      	bne.n	800290e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2202      	movs	r2, #2
 8002936:	4013      	ands	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293a:	4b83      	ldr	r3, [pc, #524]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	22f0      	movs	r2, #240	; 0xf0
 8002940:	4393      	bics	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b7f      	ldr	r3, [pc, #508]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 800294a:	430a      	orrs	r2, r1
 800294c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2201      	movs	r2, #1
 8002954:	4013      	ands	r3, r2
 8002956:	d100      	bne.n	800295a <HAL_RCC_ClockConfig+0x8a>
 8002958:	e089      	b.n	8002a6e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002962:	4b79      	ldr	r3, [pc, #484]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	029b      	lsls	r3, r3, #10
 800296a:	4013      	ands	r3, r2
 800296c:	d120      	bne.n	80029b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0e1      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b03      	cmp	r3, #3
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800297a:	4b73      	ldr	r3, [pc, #460]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	049b      	lsls	r3, r3, #18
 8002982:	4013      	ands	r3, r2
 8002984:	d114      	bne.n	80029b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0d5      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d106      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002992:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2204      	movs	r2, #4
 8002998:	4013      	ands	r3, r2
 800299a:	d109      	bne.n	80029b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0ca      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029a0:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4013      	ands	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0c2      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b0:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2203      	movs	r2, #3
 80029b6:	4393      	bics	r3, r2
 80029b8:	0019      	movs	r1, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7ff f944 	bl	8001c50 <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d111      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d4:	e009      	b.n	80029ea <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d6:	f7ff f93b 	bl	8001c50 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_RCC_ClockConfig+0x274>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0a5      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029ea:	4b57      	ldr	r3, [pc, #348]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	220c      	movs	r2, #12
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d1ef      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x106>
 80029f6:	e03a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d111      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a00:	e009      	b.n	8002a16 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a02:	f7ff f925 	bl	8001c50 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	4a4d      	ldr	r2, [pc, #308]	; (8002b44 <HAL_RCC_ClockConfig+0x274>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e08f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a16:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d1ef      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x132>
 8002a22:	e024      	b.n	8002a6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d11b      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a2c:	e009      	b.n	8002a42 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2e:	f7ff f90f 	bl	8001c50 <HAL_GetTick>
 8002a32:	0002      	movs	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	4a42      	ldr	r2, [pc, #264]	; (8002b44 <HAL_RCC_ClockConfig+0x274>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e079      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	220c      	movs	r2, #12
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d1ef      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x15e>
 8002a4e:	e00e      	b.n	8002a6e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7ff f8fe 	bl	8001c50 <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <HAL_RCC_ClockConfig+0x274>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e068      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a64:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	220c      	movs	r2, #12
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6e:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_RCC_ClockConfig+0x270>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2201      	movs	r2, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d21e      	bcs.n	8002aba <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7c:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_RCC_ClockConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2201      	movs	r2, #1
 8002a82:	4393      	bics	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_RCC_ClockConfig+0x270>)
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a8e:	f7ff f8df 	bl	8001c50 <HAL_GetTick>
 8002a92:	0003      	movs	r3, r0
 8002a94:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	e009      	b.n	8002aac <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7ff f8da 	bl	8001c50 <HAL_GetTick>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <HAL_RCC_ClockConfig+0x274>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e044      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_ClockConfig+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d1ee      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a20      	ldr	r2, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x27c>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2208      	movs	r2, #8
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	4a1a      	ldr	r2, [pc, #104]	; (8002b50 <HAL_RCC_ClockConfig+0x280>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	00da      	lsls	r2, r3, #3
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af8:	f000 f832 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002afc:	0001      	movs	r1, r0
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCC_ClockConfig+0x278>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	220f      	movs	r2, #15
 8002b06:	4013      	ands	r3, r2
 8002b08:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_RCC_ClockConfig+0x284>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	000a      	movs	r2, r1
 8002b0e:	40da      	lsrs	r2, r3
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_RCC_ClockConfig+0x288>)
 8002b12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_RCC_ClockConfig+0x28c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	250b      	movs	r5, #11
 8002b1a:	197c      	adds	r4, r7, r5
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7ff f863 	bl	8001be8 <HAL_InitTick>
 8002b22:	0003      	movs	r3, r0
 8002b24:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b26:	197b      	adds	r3, r7, r5
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b2e:	197b      	adds	r3, r7, r5
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b004      	add	sp, #16
 8002b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	40022000 	.word	0x40022000
 8002b44:	00001388 	.word	0x00001388
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	fffff8ff 	.word	0xfffff8ff
 8002b50:	ffffc7ff 	.word	0xffffc7ff
 8002b54:	08005474 	.word	0x08005474
 8002b58:	20000004 	.word	0x20000004
 8002b5c:	20000008 	.word	0x20000008

08002b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b5b0      	push	{r4, r5, r7, lr}
 8002b62:	b08e      	sub	sp, #56	; 0x38
 8002b64:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b66:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b6e:	230c      	movs	r3, #12
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d014      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b76:	d900      	bls.n	8002b7a <HAL_RCC_GetSysClockFreq+0x1a>
 8002b78:	e07b      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x112>
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x24>
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d00b      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b82:	e076      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b84:	4b44      	ldr	r3, [pc, #272]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2210      	movs	r2, #16
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b8e:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b90:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002b92:	e07c      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002b94:	4b42      	ldr	r3, [pc, #264]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b98:	e079      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b9a:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002b9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b9e:	e076      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba2:	0c9a      	lsrs	r2, r3, #18
 8002ba4:	230f      	movs	r3, #15
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x148>)
 8002baa:	5c9b      	ldrb	r3, [r3, r2]
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	0d9a      	lsrs	r2, r3, #22
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	025b      	lsls	r3, r3, #9
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d01a      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	4a35      	ldr	r2, [pc, #212]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	69b8      	ldr	r0, [r7, #24]
 8002bd4:	69f9      	ldr	r1, [r7, #28]
 8002bd6:	f7fd fb4d 	bl	8000274 <__aeabi_lmul>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	000b      	movs	r3, r1
 8002bde:	0010      	movs	r0, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f7fd fb21 	bl	8000234 <__aeabi_uldivmod>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	000b      	movs	r3, r1
 8002bf6:	0013      	movs	r3, r2
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bfa:	e037      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bfc:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2210      	movs	r2, #16
 8002c02:	4013      	ands	r3, r2
 8002c04:	d01a      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c10:	2300      	movs	r3, #0
 8002c12:	68b8      	ldr	r0, [r7, #8]
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	f7fd fb2d 	bl	8000274 <__aeabi_lmul>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	000b      	movs	r3, r1
 8002c1e:	0010      	movs	r0, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f7fd fb01 	bl	8000234 <__aeabi_uldivmod>
 8002c32:	0002      	movs	r2, r0
 8002c34:	000b      	movs	r3, r1
 8002c36:	0013      	movs	r3, r2
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
 8002c3a:	e017      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	0018      	movs	r0, r3
 8002c40:	2300      	movs	r3, #0
 8002c42:	0019      	movs	r1, r3
 8002c44:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c46:	2300      	movs	r3, #0
 8002c48:	f7fd fb14 	bl	8000274 <__aeabi_lmul>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	000b      	movs	r3, r1
 8002c50:	0010      	movs	r0, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	001c      	movs	r4, r3
 8002c58:	2300      	movs	r3, #0
 8002c5a:	001d      	movs	r5, r3
 8002c5c:	0022      	movs	r2, r4
 8002c5e:	002b      	movs	r3, r5
 8002c60:	f7fd fae8 	bl	8000234 <__aeabi_uldivmod>
 8002c64:	0002      	movs	r2, r0
 8002c66:	000b      	movs	r3, r1
 8002c68:	0013      	movs	r3, r2
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c70:	e00d      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	0b5b      	lsrs	r3, r3, #13
 8002c78:	2207      	movs	r2, #7
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	3301      	adds	r3, #1
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	0212      	lsls	r2, r2, #8
 8002c86:	409a      	lsls	r2, r3
 8002c88:	0013      	movs	r3, r2
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c8c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b00e      	add	sp, #56	; 0x38
 8002c96:	bdb0      	pop	{r4, r5, r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	003d0900 	.word	0x003d0900
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	007a1200 	.word	0x007a1200
 8002ca8:	0800548c 	.word	0x0800548c

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff2 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cc8:	0001      	movs	r1, r0
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	40d9      	lsrs	r1, r3
 8002cda:	000b      	movs	r3, r1
}
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	08005484 	.word	0x08005484

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf0:	f7ff ffdc 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf4:	0001      	movs	r1, r0
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	4013      	ands	r3, r2
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	40d9      	lsrs	r1, r3
 8002d06:	000b      	movs	r3, r1
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08005484 	.word	0x08005484

08002d18 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002d20:	2317      	movs	r3, #23
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d106      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d100      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002d3e:	e0d9      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d40:	4b9c      	ldr	r3, [pc, #624]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	055b      	lsls	r3, r3, #21
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d10a      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4c:	4b99      	ldr	r3, [pc, #612]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d50:	4b98      	ldr	r3, [pc, #608]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002d52:	2180      	movs	r1, #128	; 0x80
 8002d54:	0549      	lsls	r1, r1, #21
 8002d56:	430a      	orrs	r2, r1
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d5a:	2317      	movs	r3, #23
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d62:	4b95      	ldr	r3, [pc, #596]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d11a      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6e:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b91      	ldr	r3, [pc, #580]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	0049      	lsls	r1, r1, #1
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7c:	f7fe ff68 	bl	8001c50 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	e008      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d86:	f7fe ff63 	bl	8001c50 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d901      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e108      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4b87      	ldr	r3, [pc, #540]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4013      	ands	r3, r2
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002da4:	4b83      	ldr	r3, [pc, #524]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	23c0      	movs	r3, #192	; 0xc0
 8002daa:	039b      	lsls	r3, r3, #14
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	23c0      	movs	r3, #192	; 0xc0
 8002db6:	039b      	lsls	r3, r3, #14
 8002db8:	4013      	ands	r3, r2
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	23c0      	movs	r3, #192	; 0xc0
 8002dc6:	039b      	lsls	r3, r3, #14
 8002dc8:	4013      	ands	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d013      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	23c0      	movs	r3, #192	; 0xc0
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	401a      	ands	r2, r3
 8002dda:	23c0      	movs	r3, #192	; 0xc0
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d10a      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002de2:	4b74      	ldr	r3, [pc, #464]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	029b      	lsls	r3, r3, #10
 8002dea:	401a      	ands	r2, r3
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d101      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0d8      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002df8:	4b6e      	ldr	r3, [pc, #440]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002dfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dfc:	23c0      	movs	r3, #192	; 0xc0
 8002dfe:	029b      	lsls	r3, r3, #10
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d049      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	23c0      	movs	r3, #192	; 0xc0
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	4013      	ands	r3, r2
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d004      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	4013      	ands	r3, r2
 8002e22:	d10d      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	23c0      	movs	r3, #192	; 0xc0
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d034      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d02e      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e40:	4b5c      	ldr	r3, [pc, #368]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e44:	4a5d      	ldr	r2, [pc, #372]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4a:	4b5a      	ldr	r3, [pc, #360]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e4e:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	0309      	lsls	r1, r1, #12
 8002e54:	430a      	orrs	r2, r1
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e58:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e5c:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e5e:	4958      	ldr	r1, [pc, #352]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d014      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fe feec 	bl	8001c50 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e7c:	e009      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe fee7 	bl	8001c50 <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	4a4e      	ldr	r2, [pc, #312]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e08b      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e92:	4b48      	ldr	r3, [pc, #288]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d0ef      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	23c0      	movs	r3, #192	; 0xc0
 8002ea4:	029b      	lsls	r3, r3, #10
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	23c0      	movs	r3, #192	; 0xc0
 8002eaa:	029b      	lsls	r3, r3, #10
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d10c      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a44      	ldr	r2, [pc, #272]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	23c0      	movs	r3, #192	; 0xc0
 8002ec0:	039b      	lsls	r3, r3, #14
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ecc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	23c0      	movs	r3, #192	; 0xc0
 8002ed4:	029b      	lsls	r3, r3, #10
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002eda:	430a      	orrs	r2, r1
 8002edc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ede:	2317      	movs	r3, #23
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee8:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002eee:	4937      	ldr	r1, [pc, #220]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	d009      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	2203      	movs	r2, #3
 8002f04:	4393      	bics	r3, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2202      	movs	r2, #2
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d009      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f20:	220c      	movs	r2, #12
 8002f22:	4393      	bics	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2204      	movs	r2, #4
 8002f36:	4013      	ands	r3, r2
 8002f38:	d009      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	0019      	movs	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2208      	movs	r2, #8
 8002f54:	4013      	ands	r3, r2
 8002f56:	d009      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f58:	4b16      	ldr	r3, [pc, #88]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2240      	movs	r2, #64	; 0x40
 8002f72:	4013      	ands	r3, r2
 8002f74:	d009      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1a      	ldr	r2, [r3, #32]
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f86:	430a      	orrs	r2, r1
 8002f88:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2280      	movs	r2, #128	; 0x80
 8002f90:	4013      	ands	r3, r2
 8002f92:	d009      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f94:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b006      	add	sp, #24
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	fffcffff 	.word	0xfffcffff
 8002fc0:	fff7ffff 	.word	0xfff7ffff
 8002fc4:	00001388 	.word	0x00001388
 8002fc8:	ffcfffff 	.word	0xffcfffff
 8002fcc:	efffffff 	.word	0xefffffff
 8002fd0:	fffff3ff 	.word	0xfffff3ff
 8002fd4:	ffffcfff 	.word	0xffffcfff
 8002fd8:	fbffffff 	.word	0xfbffffff
 8002fdc:	fff3ffff 	.word	0xfff3ffff

08002fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e044      	b.n	800307c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d107      	bne.n	800300a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2274      	movs	r2, #116	; 0x74
 8002ffe:	2100      	movs	r1, #0
 8003000:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f7fe fab3 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2224      	movs	r2, #36	; 0x24
 800300e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2101      	movs	r1, #1
 800301c:	438a      	bics	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f8d8 	bl	80031d8 <UART_SetConfig>
 8003028:	0003      	movs	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e024      	b.n	800307c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0018      	movs	r0, r3
 800303e:	f000 fb4f 	bl	80036e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	490d      	ldr	r1, [pc, #52]	; (8003084 <HAL_UART_Init+0xa4>)
 800304e:	400a      	ands	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	212a      	movs	r1, #42	; 0x2a
 800305e:	438a      	bics	r2, r1
 8003060:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2101      	movs	r1, #1
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fbe7 	bl	8003848 <UART_CheckIdleState>
 800307a:	0003      	movs	r3, r0
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}
 8003084:	ffffb7ff 	.word	0xffffb7ff

08003088 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	; 0x28
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	1dbb      	adds	r3, r7, #6
 8003096:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800309c:	2b20      	cmp	r3, #32
 800309e:	d000      	beq.n	80030a2 <HAL_UART_Transmit+0x1a>
 80030a0:	e095      	b.n	80031ce <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_UART_Transmit+0x28>
 80030a8:	1dbb      	adds	r3, r7, #6
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e08d      	b.n	80031d0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	015b      	lsls	r3, r3, #5
 80030bc:	429a      	cmp	r2, r3
 80030be:	d109      	bne.n	80030d4 <HAL_UART_Transmit+0x4c>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4013      	ands	r3, r2
 80030ce:	d001      	beq.n	80030d4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e07d      	b.n	80031d0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2274      	movs	r2, #116	; 0x74
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Transmit+0x5a>
 80030de:	2302      	movs	r3, #2
 80030e0:	e076      	b.n	80031d0 <HAL_UART_Transmit+0x148>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2274      	movs	r2, #116	; 0x74
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2280      	movs	r2, #128	; 0x80
 80030ee:	2100      	movs	r1, #0
 80030f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2221      	movs	r2, #33	; 0x21
 80030f6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030f8:	f7fe fdaa 	bl	8001c50 <HAL_GetTick>
 80030fc:	0003      	movs	r3, r0
 80030fe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1dba      	adds	r2, r7, #6
 8003104:	2150      	movs	r1, #80	; 0x50
 8003106:	8812      	ldrh	r2, [r2, #0]
 8003108:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1dba      	adds	r2, r7, #6
 800310e:	2152      	movs	r1, #82	; 0x52
 8003110:	8812      	ldrh	r2, [r2, #0]
 8003112:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	015b      	lsls	r3, r3, #5
 800311c:	429a      	cmp	r2, r3
 800311e:	d108      	bne.n	8003132 <HAL_UART_Transmit+0xaa>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	e003      	b.n	800313a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2274      	movs	r2, #116	; 0x74
 800313e:	2100      	movs	r1, #0
 8003140:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003142:	e02c      	b.n	800319e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	0013      	movs	r3, r2
 800314e:	2200      	movs	r2, #0
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	f000 fbc1 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 8003156:	1e03      	subs	r3, r0, #0
 8003158:	d001      	beq.n	800315e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e038      	b.n	80031d0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	001a      	movs	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	05d2      	lsls	r2, r2, #23
 8003170:	0dd2      	lsrs	r2, r2, #23
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	3302      	adds	r3, #2
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	e007      	b.n	800318c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	781a      	ldrb	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3301      	adds	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2252      	movs	r2, #82	; 0x52
 8003190:	5a9b      	ldrh	r3, [r3, r2]
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b299      	uxth	r1, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2252      	movs	r2, #82	; 0x52
 800319c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2252      	movs	r2, #82	; 0x52
 80031a2:	5a9b      	ldrh	r3, [r3, r2]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1cc      	bne.n	8003144 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	0013      	movs	r3, r2
 80031b4:	2200      	movs	r2, #0
 80031b6:	2140      	movs	r1, #64	; 0x40
 80031b8:	f000 fb8e 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 80031bc:	1e03      	subs	r3, r0, #0
 80031be:	d001      	beq.n	80031c4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e005      	b.n	80031d0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b008      	add	sp, #32
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b5b0      	push	{r4, r5, r7, lr}
 80031da:	b08e      	sub	sp, #56	; 0x38
 80031dc:	af00      	add	r7, sp, #0
 80031de:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031e0:	231a      	movs	r3, #26
 80031e2:	2218      	movs	r2, #24
 80031e4:	189b      	adds	r3, r3, r2
 80031e6:	19db      	adds	r3, r3, r7
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	4313      	orrs	r3, r2
 8003202:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4ac6      	ldr	r2, [pc, #792]	; (8003524 <UART_SetConfig+0x34c>)
 800320c:	4013      	ands	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4ac1      	ldr	r2, [pc, #772]	; (8003528 <UART_SetConfig+0x350>)
 8003222:	4013      	ands	r3, r2
 8003224:	0019      	movs	r1, r3
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4abb      	ldr	r2, [pc, #748]	; (800352c <UART_SetConfig+0x354>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003248:	4313      	orrs	r3, r2
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4ab7      	ldr	r2, [pc, #732]	; (8003530 <UART_SetConfig+0x358>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4ab3      	ldr	r2, [pc, #716]	; (8003534 <UART_SetConfig+0x35c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d131      	bne.n	80032d0 <UART_SetConfig+0xf8>
 800326c:	4bb2      	ldr	r3, [pc, #712]	; (8003538 <UART_SetConfig+0x360>)
 800326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003270:	2203      	movs	r2, #3
 8003272:	4013      	ands	r3, r2
 8003274:	2b03      	cmp	r3, #3
 8003276:	d01d      	beq.n	80032b4 <UART_SetConfig+0xdc>
 8003278:	d823      	bhi.n	80032c2 <UART_SetConfig+0xea>
 800327a:	2b02      	cmp	r3, #2
 800327c:	d00c      	beq.n	8003298 <UART_SetConfig+0xc0>
 800327e:	d820      	bhi.n	80032c2 <UART_SetConfig+0xea>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <UART_SetConfig+0xb2>
 8003284:	2b01      	cmp	r3, #1
 8003286:	d00e      	beq.n	80032a6 <UART_SetConfig+0xce>
 8003288:	e01b      	b.n	80032c2 <UART_SetConfig+0xea>
 800328a:	231b      	movs	r3, #27
 800328c:	2218      	movs	r2, #24
 800328e:	189b      	adds	r3, r3, r2
 8003290:	19db      	adds	r3, r3, r7
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e09c      	b.n	80033d2 <UART_SetConfig+0x1fa>
 8003298:	231b      	movs	r3, #27
 800329a:	2218      	movs	r2, #24
 800329c:	189b      	adds	r3, r3, r2
 800329e:	19db      	adds	r3, r3, r7
 80032a0:	2202      	movs	r2, #2
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e095      	b.n	80033d2 <UART_SetConfig+0x1fa>
 80032a6:	231b      	movs	r3, #27
 80032a8:	2218      	movs	r2, #24
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	19db      	adds	r3, r3, r7
 80032ae:	2204      	movs	r2, #4
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e08e      	b.n	80033d2 <UART_SetConfig+0x1fa>
 80032b4:	231b      	movs	r3, #27
 80032b6:	2218      	movs	r2, #24
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	19db      	adds	r3, r3, r7
 80032bc:	2208      	movs	r2, #8
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e087      	b.n	80033d2 <UART_SetConfig+0x1fa>
 80032c2:	231b      	movs	r3, #27
 80032c4:	2218      	movs	r2, #24
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	2210      	movs	r2, #16
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e080      	b.n	80033d2 <UART_SetConfig+0x1fa>
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a99      	ldr	r2, [pc, #612]	; (800353c <UART_SetConfig+0x364>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d131      	bne.n	800333e <UART_SetConfig+0x166>
 80032da:	4b97      	ldr	r3, [pc, #604]	; (8003538 <UART_SetConfig+0x360>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	220c      	movs	r2, #12
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d01d      	beq.n	8003322 <UART_SetConfig+0x14a>
 80032e6:	d823      	bhi.n	8003330 <UART_SetConfig+0x158>
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d00c      	beq.n	8003306 <UART_SetConfig+0x12e>
 80032ec:	d820      	bhi.n	8003330 <UART_SetConfig+0x158>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <UART_SetConfig+0x120>
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d00e      	beq.n	8003314 <UART_SetConfig+0x13c>
 80032f6:	e01b      	b.n	8003330 <UART_SetConfig+0x158>
 80032f8:	231b      	movs	r3, #27
 80032fa:	2218      	movs	r2, #24
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	19db      	adds	r3, r3, r7
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e065      	b.n	80033d2 <UART_SetConfig+0x1fa>
 8003306:	231b      	movs	r3, #27
 8003308:	2218      	movs	r2, #24
 800330a:	189b      	adds	r3, r3, r2
 800330c:	19db      	adds	r3, r3, r7
 800330e:	2202      	movs	r2, #2
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e05e      	b.n	80033d2 <UART_SetConfig+0x1fa>
 8003314:	231b      	movs	r3, #27
 8003316:	2218      	movs	r2, #24
 8003318:	189b      	adds	r3, r3, r2
 800331a:	19db      	adds	r3, r3, r7
 800331c:	2204      	movs	r2, #4
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e057      	b.n	80033d2 <UART_SetConfig+0x1fa>
 8003322:	231b      	movs	r3, #27
 8003324:	2218      	movs	r2, #24
 8003326:	189b      	adds	r3, r3, r2
 8003328:	19db      	adds	r3, r3, r7
 800332a:	2208      	movs	r2, #8
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e050      	b.n	80033d2 <UART_SetConfig+0x1fa>
 8003330:	231b      	movs	r3, #27
 8003332:	2218      	movs	r2, #24
 8003334:	189b      	adds	r3, r3, r2
 8003336:	19db      	adds	r3, r3, r7
 8003338:	2210      	movs	r2, #16
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e049      	b.n	80033d2 <UART_SetConfig+0x1fa>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7a      	ldr	r2, [pc, #488]	; (800352c <UART_SetConfig+0x354>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d13e      	bne.n	80033c6 <UART_SetConfig+0x1ee>
 8003348:	4b7b      	ldr	r3, [pc, #492]	; (8003538 <UART_SetConfig+0x360>)
 800334a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800334c:	23c0      	movs	r3, #192	; 0xc0
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	4013      	ands	r3, r2
 8003352:	22c0      	movs	r2, #192	; 0xc0
 8003354:	0112      	lsls	r2, r2, #4
 8003356:	4293      	cmp	r3, r2
 8003358:	d027      	beq.n	80033aa <UART_SetConfig+0x1d2>
 800335a:	22c0      	movs	r2, #192	; 0xc0
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	4293      	cmp	r3, r2
 8003360:	d82a      	bhi.n	80033b8 <UART_SetConfig+0x1e0>
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	4293      	cmp	r3, r2
 8003368:	d011      	beq.n	800338e <UART_SetConfig+0x1b6>
 800336a:	2280      	movs	r2, #128	; 0x80
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	4293      	cmp	r3, r2
 8003370:	d822      	bhi.n	80033b8 <UART_SetConfig+0x1e0>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <UART_SetConfig+0x1a8>
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	00d2      	lsls	r2, r2, #3
 800337a:	4293      	cmp	r3, r2
 800337c:	d00e      	beq.n	800339c <UART_SetConfig+0x1c4>
 800337e:	e01b      	b.n	80033b8 <UART_SetConfig+0x1e0>
 8003380:	231b      	movs	r3, #27
 8003382:	2218      	movs	r2, #24
 8003384:	189b      	adds	r3, r3, r2
 8003386:	19db      	adds	r3, r3, r7
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e021      	b.n	80033d2 <UART_SetConfig+0x1fa>
 800338e:	231b      	movs	r3, #27
 8003390:	2218      	movs	r2, #24
 8003392:	189b      	adds	r3, r3, r2
 8003394:	19db      	adds	r3, r3, r7
 8003396:	2202      	movs	r2, #2
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e01a      	b.n	80033d2 <UART_SetConfig+0x1fa>
 800339c:	231b      	movs	r3, #27
 800339e:	2218      	movs	r2, #24
 80033a0:	189b      	adds	r3, r3, r2
 80033a2:	19db      	adds	r3, r3, r7
 80033a4:	2204      	movs	r2, #4
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e013      	b.n	80033d2 <UART_SetConfig+0x1fa>
 80033aa:	231b      	movs	r3, #27
 80033ac:	2218      	movs	r2, #24
 80033ae:	189b      	adds	r3, r3, r2
 80033b0:	19db      	adds	r3, r3, r7
 80033b2:	2208      	movs	r2, #8
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e00c      	b.n	80033d2 <UART_SetConfig+0x1fa>
 80033b8:	231b      	movs	r3, #27
 80033ba:	2218      	movs	r2, #24
 80033bc:	189b      	adds	r3, r3, r2
 80033be:	19db      	adds	r3, r3, r7
 80033c0:	2210      	movs	r2, #16
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	e005      	b.n	80033d2 <UART_SetConfig+0x1fa>
 80033c6:	231b      	movs	r3, #27
 80033c8:	2218      	movs	r2, #24
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	19db      	adds	r3, r3, r7
 80033ce:	2210      	movs	r2, #16
 80033d0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a55      	ldr	r2, [pc, #340]	; (800352c <UART_SetConfig+0x354>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d000      	beq.n	80033de <UART_SetConfig+0x206>
 80033dc:	e084      	b.n	80034e8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033de:	231b      	movs	r3, #27
 80033e0:	2218      	movs	r2, #24
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	19db      	adds	r3, r3, r7
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d01d      	beq.n	8003428 <UART_SetConfig+0x250>
 80033ec:	dc20      	bgt.n	8003430 <UART_SetConfig+0x258>
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d015      	beq.n	800341e <UART_SetConfig+0x246>
 80033f2:	dc1d      	bgt.n	8003430 <UART_SetConfig+0x258>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <UART_SetConfig+0x226>
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d005      	beq.n	8003408 <UART_SetConfig+0x230>
 80033fc:	e018      	b.n	8003430 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033fe:	f7ff fc5f 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8003402:	0003      	movs	r3, r0
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003406:	e01c      	b.n	8003442 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003408:	4b4b      	ldr	r3, [pc, #300]	; (8003538 <UART_SetConfig+0x360>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2210      	movs	r2, #16
 800340e:	4013      	ands	r3, r2
 8003410:	d002      	beq.n	8003418 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003412:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <UART_SetConfig+0x368>)
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003416:	e014      	b.n	8003442 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003418:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <UART_SetConfig+0x36c>)
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800341c:	e011      	b.n	8003442 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341e:	f7ff fb9f 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8003422:	0003      	movs	r3, r0
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003426:	e00c      	b.n	8003442 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800342e:	e008      	b.n	8003442 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003434:	231a      	movs	r3, #26
 8003436:	2218      	movs	r2, #24
 8003438:	189b      	adds	r3, r3, r2
 800343a:	19db      	adds	r3, r3, r7
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
        break;
 8003440:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d100      	bne.n	800344a <UART_SetConfig+0x272>
 8003448:	e133      	b.n	80036b2 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	0013      	movs	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	189b      	adds	r3, r3, r2
 8003454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003456:	429a      	cmp	r2, r3
 8003458:	d305      	bcc.n	8003466 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003462:	429a      	cmp	r2, r3
 8003464:	d906      	bls.n	8003474 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003466:	231a      	movs	r3, #26
 8003468:	2218      	movs	r2, #24
 800346a:	189b      	adds	r3, r3, r2
 800346c:	19db      	adds	r3, r3, r7
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e11e      	b.n	80036b2 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	6939      	ldr	r1, [r7, #16]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	000b      	movs	r3, r1
 8003482:	0e1b      	lsrs	r3, r3, #24
 8003484:	0010      	movs	r0, r2
 8003486:	0205      	lsls	r5, r0, #8
 8003488:	431d      	orrs	r5, r3
 800348a:	000b      	movs	r3, r1
 800348c:	021c      	lsls	r4, r3, #8
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68b8      	ldr	r0, [r7, #8]
 800349c:	68f9      	ldr	r1, [r7, #12]
 800349e:	1900      	adds	r0, r0, r4
 80034a0:	4169      	adcs	r1, r5
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	2300      	movs	r3, #0
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f7fc fec0 	bl	8000234 <__aeabi_uldivmod>
 80034b4:	0002      	movs	r2, r0
 80034b6:	000b      	movs	r3, r1
 80034b8:	0013      	movs	r3, r2
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034be:	23c0      	movs	r3, #192	; 0xc0
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d309      	bcc.n	80034da <UART_SetConfig+0x302>
 80034c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	035b      	lsls	r3, r3, #13
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d204      	bcs.n	80034da <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d6:	60da      	str	r2, [r3, #12]
 80034d8:	e0eb      	b.n	80036b2 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 80034da:	231a      	movs	r3, #26
 80034dc:	2218      	movs	r2, #24
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	19db      	adds	r3, r3, r7
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e0e4      	b.n	80036b2 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d000      	beq.n	80034f6 <UART_SetConfig+0x31e>
 80034f4:	e086      	b.n	8003604 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 80034f6:	231b      	movs	r3, #27
 80034f8:	2218      	movs	r2, #24
 80034fa:	189b      	adds	r3, r3, r2
 80034fc:	19db      	adds	r3, r3, r7
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d837      	bhi.n	8003574 <UART_SetConfig+0x39c>
 8003504:	009a      	lsls	r2, r3, #2
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <UART_SetConfig+0x370>)
 8003508:	18d3      	adds	r3, r2, r3
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800350e:	f7ff fbd7 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8003512:	0003      	movs	r3, r0
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003516:	e036      	b.n	8003586 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003518:	f7ff fbe8 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 800351c:	0003      	movs	r3, r0
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003520:	e031      	b.n	8003586 <UART_SetConfig+0x3ae>
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	efff69f3 	.word	0xefff69f3
 8003528:	ffffcfff 	.word	0xffffcfff
 800352c:	40004800 	.word	0x40004800
 8003530:	fffff4ff 	.word	0xfffff4ff
 8003534:	40013800 	.word	0x40013800
 8003538:	40021000 	.word	0x40021000
 800353c:	40004400 	.word	0x40004400
 8003540:	003d0900 	.word	0x003d0900
 8003544:	00f42400 	.word	0x00f42400
 8003548:	08005498 	.word	0x08005498
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800354c:	4b60      	ldr	r3, [pc, #384]	; (80036d0 <UART_SetConfig+0x4f8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2210      	movs	r2, #16
 8003552:	4013      	ands	r3, r2
 8003554:	d002      	beq.n	800355c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003556:	4b5f      	ldr	r3, [pc, #380]	; (80036d4 <UART_SetConfig+0x4fc>)
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800355a:	e014      	b.n	8003586 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 800355c:	4b5e      	ldr	r3, [pc, #376]	; (80036d8 <UART_SetConfig+0x500>)
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003560:	e011      	b.n	8003586 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003562:	f7ff fafd 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8003566:	0003      	movs	r3, r0
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800356a:	e00c      	b.n	8003586 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003572:	e008      	b.n	8003586 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003578:	231a      	movs	r3, #26
 800357a:	2218      	movs	r2, #24
 800357c:	189b      	adds	r3, r3, r2
 800357e:	19db      	adds	r3, r3, r7
 8003580:	2201      	movs	r2, #1
 8003582:	701a      	strb	r2, [r3, #0]
        break;
 8003584:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d100      	bne.n	800358e <UART_SetConfig+0x3b6>
 800358c:	e091      	b.n	80036b2 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	005a      	lsls	r2, r3, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	18d2      	adds	r2, r2, r3
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0019      	movs	r1, r3
 80035a0:	0010      	movs	r0, r2
 80035a2:	f7fc fdbb 	bl	800011c <__udivsi3>
 80035a6:	0003      	movs	r3, r0
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	d921      	bls.n	80035f6 <UART_SetConfig+0x41e>
 80035b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	025b      	lsls	r3, r3, #9
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d21c      	bcs.n	80035f6 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	b29a      	uxth	r2, r3
 80035c0:	200e      	movs	r0, #14
 80035c2:	2418      	movs	r4, #24
 80035c4:	1903      	adds	r3, r0, r4
 80035c6:	19db      	adds	r3, r3, r7
 80035c8:	210f      	movs	r1, #15
 80035ca:	438a      	bics	r2, r1
 80035cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2207      	movs	r2, #7
 80035d6:	4013      	ands	r3, r2
 80035d8:	b299      	uxth	r1, r3
 80035da:	1903      	adds	r3, r0, r4
 80035dc:	19db      	adds	r3, r3, r7
 80035de:	1902      	adds	r2, r0, r4
 80035e0:	19d2      	adds	r2, r2, r7
 80035e2:	8812      	ldrh	r2, [r2, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	1902      	adds	r2, r0, r4
 80035ee:	19d2      	adds	r2, r2, r7
 80035f0:	8812      	ldrh	r2, [r2, #0]
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	e05d      	b.n	80036b2 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 80035f6:	231a      	movs	r3, #26
 80035f8:	2218      	movs	r2, #24
 80035fa:	189b      	adds	r3, r3, r2
 80035fc:	19db      	adds	r3, r3, r7
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	e056      	b.n	80036b2 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003604:	231b      	movs	r3, #27
 8003606:	2218      	movs	r2, #24
 8003608:	189b      	adds	r3, r3, r2
 800360a:	19db      	adds	r3, r3, r7
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b08      	cmp	r3, #8
 8003610:	d822      	bhi.n	8003658 <UART_SetConfig+0x480>
 8003612:	009a      	lsls	r2, r3, #2
 8003614:	4b31      	ldr	r3, [pc, #196]	; (80036dc <UART_SetConfig+0x504>)
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800361c:	f7ff fb50 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8003620:	0003      	movs	r3, r0
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003624:	e021      	b.n	800366a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003626:	f7ff fb61 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 800362a:	0003      	movs	r3, r0
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800362e:	e01c      	b.n	800366a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003630:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <UART_SetConfig+0x4f8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2210      	movs	r2, #16
 8003636:	4013      	ands	r3, r2
 8003638:	d002      	beq.n	8003640 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800363a:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <UART_SetConfig+0x4fc>)
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800363e:	e014      	b.n	800366a <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <UART_SetConfig+0x500>)
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003644:	e011      	b.n	800366a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003646:	f7ff fa8b 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 800364a:	0003      	movs	r3, r0
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800364e:	e00c      	b.n	800366a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003656:	e008      	b.n	800366a <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800365c:	231a      	movs	r3, #26
 800365e:	2218      	movs	r2, #24
 8003660:	189b      	adds	r3, r3, r2
 8003662:	19db      	adds	r3, r3, r7
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
        break;
 8003668:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	085a      	lsrs	r2, r3, #1
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	18d2      	adds	r2, r2, r3
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	0019      	movs	r1, r3
 8003680:	0010      	movs	r0, r2
 8003682:	f7fc fd4b 	bl	800011c <__udivsi3>
 8003686:	0003      	movs	r3, r0
 8003688:	b29b      	uxth	r3, r3
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	2b0f      	cmp	r3, #15
 8003690:	d909      	bls.n	80036a6 <UART_SetConfig+0x4ce>
 8003692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	025b      	lsls	r3, r3, #9
 8003698:	429a      	cmp	r2, r3
 800369a:	d204      	bcs.n	80036a6 <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a2:	60da      	str	r2, [r3, #12]
 80036a4:	e005      	b.n	80036b2 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 80036a6:	231a      	movs	r3, #26
 80036a8:	2218      	movs	r2, #24
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	19db      	adds	r3, r3, r7
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2200      	movs	r2, #0
 80036b6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2200      	movs	r2, #0
 80036bc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036be:	231a      	movs	r3, #26
 80036c0:	2218      	movs	r2, #24
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	19db      	adds	r3, r3, r7
 80036c6:	781b      	ldrb	r3, [r3, #0]
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b00e      	add	sp, #56	; 0x38
 80036ce:	bdb0      	pop	{r4, r5, r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	003d0900 	.word	0x003d0900
 80036d8:	00f42400 	.word	0x00f42400
 80036dc:	080054bc 	.word	0x080054bc

080036e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	2201      	movs	r2, #1
 80036ee:	4013      	ands	r3, r2
 80036f0:	d00b      	beq.n	800370a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a4a      	ldr	r2, [pc, #296]	; (8003824 <UART_AdvFeatureConfig+0x144>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	0019      	movs	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	2202      	movs	r2, #2
 8003710:	4013      	ands	r3, r2
 8003712:	d00b      	beq.n	800372c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4a43      	ldr	r2, [pc, #268]	; (8003828 <UART_AdvFeatureConfig+0x148>)
 800371c:	4013      	ands	r3, r2
 800371e:	0019      	movs	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	2204      	movs	r2, #4
 8003732:	4013      	ands	r3, r2
 8003734:	d00b      	beq.n	800374e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a3b      	ldr	r2, [pc, #236]	; (800382c <UART_AdvFeatureConfig+0x14c>)
 800373e:	4013      	ands	r3, r2
 8003740:	0019      	movs	r1, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	2208      	movs	r2, #8
 8003754:	4013      	ands	r3, r2
 8003756:	d00b      	beq.n	8003770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4a34      	ldr	r2, [pc, #208]	; (8003830 <UART_AdvFeatureConfig+0x150>)
 8003760:	4013      	ands	r3, r2
 8003762:	0019      	movs	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	2210      	movs	r2, #16
 8003776:	4013      	ands	r3, r2
 8003778:	d00b      	beq.n	8003792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a2c      	ldr	r2, [pc, #176]	; (8003834 <UART_AdvFeatureConfig+0x154>)
 8003782:	4013      	ands	r3, r2
 8003784:	0019      	movs	r1, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2220      	movs	r2, #32
 8003798:	4013      	ands	r3, r2
 800379a:	d00b      	beq.n	80037b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4a25      	ldr	r2, [pc, #148]	; (8003838 <UART_AdvFeatureConfig+0x158>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	0019      	movs	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2240      	movs	r2, #64	; 0x40
 80037ba:	4013      	ands	r3, r2
 80037bc:	d01d      	beq.n	80037fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <UART_AdvFeatureConfig+0x15c>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	035b      	lsls	r3, r3, #13
 80037de:	429a      	cmp	r2, r3
 80037e0:	d10b      	bne.n	80037fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a15      	ldr	r2, [pc, #84]	; (8003840 <UART_AdvFeatureConfig+0x160>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2280      	movs	r2, #128	; 0x80
 8003800:	4013      	ands	r3, r2
 8003802:	d00b      	beq.n	800381c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <UART_AdvFeatureConfig+0x164>)
 800380c:	4013      	ands	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  }
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}
 8003824:	fffdffff 	.word	0xfffdffff
 8003828:	fffeffff 	.word	0xfffeffff
 800382c:	fffbffff 	.word	0xfffbffff
 8003830:	ffff7fff 	.word	0xffff7fff
 8003834:	ffffefff 	.word	0xffffefff
 8003838:	ffffdfff 	.word	0xffffdfff
 800383c:	ffefffff 	.word	0xffefffff
 8003840:	ff9fffff 	.word	0xff9fffff
 8003844:	fff7ffff 	.word	0xfff7ffff

08003848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af02      	add	r7, sp, #8
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	2100      	movs	r1, #0
 8003856:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003858:	f7fe f9fa 	bl	8001c50 <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2208      	movs	r2, #8
 8003868:	4013      	ands	r3, r2
 800386a:	2b08      	cmp	r3, #8
 800386c:	d10c      	bne.n	8003888 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2280      	movs	r2, #128	; 0x80
 8003872:	0391      	lsls	r1, r2, #14
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <UART_CheckIdleState+0x8c>)
 8003878:	9200      	str	r2, [sp, #0]
 800387a:	2200      	movs	r2, #0
 800387c:	f000 f82c 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 8003880:	1e03      	subs	r3, r0, #0
 8003882:	d001      	beq.n	8003888 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e021      	b.n	80038cc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2204      	movs	r2, #4
 8003890:	4013      	ands	r3, r2
 8003892:	2b04      	cmp	r3, #4
 8003894:	d10c      	bne.n	80038b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2280      	movs	r2, #128	; 0x80
 800389a:	03d1      	lsls	r1, r2, #15
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <UART_CheckIdleState+0x8c>)
 80038a0:	9200      	str	r2, [sp, #0]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f000 f818 	bl	80038d8 <UART_WaitOnFlagUntilTimeout>
 80038a8:	1e03      	subs	r3, r0, #0
 80038aa:	d001      	beq.n	80038b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e00d      	b.n	80038cc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2274      	movs	r2, #116	; 0x74
 80038c6:	2100      	movs	r1, #0
 80038c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b004      	add	sp, #16
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	01ffffff 	.word	0x01ffffff

080038d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b094      	sub	sp, #80	; 0x50
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	1dfb      	adds	r3, r7, #7
 80038e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e8:	e0a3      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038ec:	3301      	adds	r3, #1
 80038ee:	d100      	bne.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80038f0:	e09f      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f2:	f7fe f9ad 	bl	8001c50 <HAL_GetTick>
 80038f6:	0002      	movs	r2, r0
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038fe:	429a      	cmp	r2, r3
 8003900:	d302      	bcc.n	8003908 <UART_WaitOnFlagUntilTimeout+0x30>
 8003902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003904:	2b00      	cmp	r3, #0
 8003906:	d13d      	bne.n	8003984 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003908:	f3ef 8310 	mrs	r3, PRIMASK
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003910:	647b      	str	r3, [r7, #68]	; 0x44
 8003912:	2301      	movs	r3, #1
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003918:	f383 8810 	msr	PRIMASK, r3
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	494c      	ldr	r1, [pc, #304]	; (8003a5c <UART_WaitOnFlagUntilTimeout+0x184>)
 800392a:	400a      	ands	r2, r1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	f383 8810 	msr	PRIMASK, r3
}
 8003938:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393a:	f3ef 8310 	mrs	r3, PRIMASK
 800393e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003942:	643b      	str	r3, [r7, #64]	; 0x40
 8003944:	2301      	movs	r3, #1
 8003946:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2101      	movs	r1, #1
 800395c:	438a      	bics	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2274      	movs	r2, #116	; 0x74
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e067      	b.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2204      	movs	r2, #4
 800398c:	4013      	ands	r3, r2
 800398e:	d050      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	401a      	ands	r2, r3
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d146      	bne.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2280      	movs	r2, #128	; 0x80
 80039aa:	0112      	lsls	r2, r2, #4
 80039ac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ae:	f3ef 8310 	mrs	r3, PRIMASK
 80039b2:	613b      	str	r3, [r7, #16]
  return(result);
 80039b4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b8:	2301      	movs	r3, #1
 80039ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f383 8810 	msr	PRIMASK, r3
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4923      	ldr	r1, [pc, #140]	; (8003a5c <UART_WaitOnFlagUntilTimeout+0x184>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	f383 8810 	msr	PRIMASK, r3
}
 80039de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e0:	f3ef 8310 	mrs	r3, PRIMASK
 80039e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80039e6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80039ea:	2301      	movs	r3, #1
 80039ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f383 8810 	msr	PRIMASK, r3
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2101      	movs	r1, #1
 8003a02:	438a      	bics	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	f383 8810 	msr	PRIMASK, r3
}
 8003a10:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2280      	movs	r2, #128	; 0x80
 8003a22:	2120      	movs	r1, #32
 8003a24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2274      	movs	r2, #116	; 0x74
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e010      	b.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	425a      	negs	r2, r3
 8003a42:	4153      	adcs	r3, r2
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	001a      	movs	r2, r3
 8003a48:	1dfb      	adds	r3, r7, #7
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d100      	bne.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003a50:	e74b      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b014      	add	sp, #80	; 0x50
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	fffffe5f 	.word	0xfffffe5f

08003a60 <__errno>:
 8003a60:	4b01      	ldr	r3, [pc, #4]	; (8003a68 <__errno+0x8>)
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	4770      	bx	lr
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	20000010 	.word	0x20000010

08003a6c <__libc_init_array>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	2600      	movs	r6, #0
 8003a70:	4d0c      	ldr	r5, [pc, #48]	; (8003aa4 <__libc_init_array+0x38>)
 8003a72:	4c0d      	ldr	r4, [pc, #52]	; (8003aa8 <__libc_init_array+0x3c>)
 8003a74:	1b64      	subs	r4, r4, r5
 8003a76:	10a4      	asrs	r4, r4, #2
 8003a78:	42a6      	cmp	r6, r4
 8003a7a:	d109      	bne.n	8003a90 <__libc_init_array+0x24>
 8003a7c:	2600      	movs	r6, #0
 8003a7e:	f001 f875 	bl	8004b6c <_init>
 8003a82:	4d0a      	ldr	r5, [pc, #40]	; (8003aac <__libc_init_array+0x40>)
 8003a84:	4c0a      	ldr	r4, [pc, #40]	; (8003ab0 <__libc_init_array+0x44>)
 8003a86:	1b64      	subs	r4, r4, r5
 8003a88:	10a4      	asrs	r4, r4, #2
 8003a8a:	42a6      	cmp	r6, r4
 8003a8c:	d105      	bne.n	8003a9a <__libc_init_array+0x2e>
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	00b3      	lsls	r3, r6, #2
 8003a92:	58eb      	ldr	r3, [r5, r3]
 8003a94:	4798      	blx	r3
 8003a96:	3601      	adds	r6, #1
 8003a98:	e7ee      	b.n	8003a78 <__libc_init_array+0xc>
 8003a9a:	00b3      	lsls	r3, r6, #2
 8003a9c:	58eb      	ldr	r3, [r5, r3]
 8003a9e:	4798      	blx	r3
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	e7f2      	b.n	8003a8a <__libc_init_array+0x1e>
 8003aa4:	08005580 	.word	0x08005580
 8003aa8:	08005580 	.word	0x08005580
 8003aac:	08005580 	.word	0x08005580
 8003ab0:	08005584 	.word	0x08005584

08003ab4 <memset>:
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	1882      	adds	r2, r0, r2
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d100      	bne.n	8003abe <memset+0xa>
 8003abc:	4770      	bx	lr
 8003abe:	7019      	strb	r1, [r3, #0]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	e7f9      	b.n	8003ab8 <memset+0x4>

08003ac4 <iprintf>:
 8003ac4:	b40f      	push	{r0, r1, r2, r3}
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <iprintf+0x30>)
 8003ac8:	b513      	push	{r0, r1, r4, lr}
 8003aca:	681c      	ldr	r4, [r3, #0]
 8003acc:	2c00      	cmp	r4, #0
 8003ace:	d005      	beq.n	8003adc <iprintf+0x18>
 8003ad0:	69a3      	ldr	r3, [r4, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <iprintf+0x18>
 8003ad6:	0020      	movs	r0, r4
 8003ad8:	f000 fa86 	bl	8003fe8 <__sinit>
 8003adc:	ab05      	add	r3, sp, #20
 8003ade:	0020      	movs	r0, r4
 8003ae0:	9a04      	ldr	r2, [sp, #16]
 8003ae2:	68a1      	ldr	r1, [r4, #8]
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	f000 fc99 	bl	800441c <_vfiprintf_r>
 8003aea:	bc16      	pop	{r1, r2, r4}
 8003aec:	bc08      	pop	{r3}
 8003aee:	b004      	add	sp, #16
 8003af0:	4718      	bx	r3
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	20000010 	.word	0x20000010

08003af8 <_puts_r>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	0005      	movs	r5, r0
 8003afc:	000e      	movs	r6, r1
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d004      	beq.n	8003b0c <_puts_r+0x14>
 8003b02:	6983      	ldr	r3, [r0, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <_puts_r+0x14>
 8003b08:	f000 fa6e 	bl	8003fe8 <__sinit>
 8003b0c:	69ab      	ldr	r3, [r5, #24]
 8003b0e:	68ac      	ldr	r4, [r5, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <_puts_r+0x22>
 8003b14:	0028      	movs	r0, r5
 8003b16:	f000 fa67 	bl	8003fe8 <__sinit>
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <_puts_r+0xd8>)
 8003b1c:	429c      	cmp	r4, r3
 8003b1e:	d122      	bne.n	8003b66 <_puts_r+0x6e>
 8003b20:	686c      	ldr	r4, [r5, #4]
 8003b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b24:	07db      	lsls	r3, r3, #31
 8003b26:	d405      	bmi.n	8003b34 <_puts_r+0x3c>
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	059b      	lsls	r3, r3, #22
 8003b2c:	d402      	bmi.n	8003b34 <_puts_r+0x3c>
 8003b2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b30:	f000 fafb 	bl	800412a <__retarget_lock_acquire_recursive>
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	071b      	lsls	r3, r3, #28
 8003b38:	d502      	bpl.n	8003b40 <_puts_r+0x48>
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d129      	bne.n	8003b94 <_puts_r+0x9c>
 8003b40:	0021      	movs	r1, r4
 8003b42:	0028      	movs	r0, r5
 8003b44:	f000 f8aa 	bl	8003c9c <__swsetup_r>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d023      	beq.n	8003b94 <_puts_r+0x9c>
 8003b4c:	2501      	movs	r5, #1
 8003b4e:	426d      	negs	r5, r5
 8003b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b52:	07db      	lsls	r3, r3, #31
 8003b54:	d405      	bmi.n	8003b62 <_puts_r+0x6a>
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	059b      	lsls	r3, r3, #22
 8003b5a:	d402      	bmi.n	8003b62 <_puts_r+0x6a>
 8003b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b5e:	f000 fae5 	bl	800412c <__retarget_lock_release_recursive>
 8003b62:	0028      	movs	r0, r5
 8003b64:	bd70      	pop	{r4, r5, r6, pc}
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <_puts_r+0xdc>)
 8003b68:	429c      	cmp	r4, r3
 8003b6a:	d101      	bne.n	8003b70 <_puts_r+0x78>
 8003b6c:	68ac      	ldr	r4, [r5, #8]
 8003b6e:	e7d8      	b.n	8003b22 <_puts_r+0x2a>
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <_puts_r+0xe0>)
 8003b72:	429c      	cmp	r4, r3
 8003b74:	d1d5      	bne.n	8003b22 <_puts_r+0x2a>
 8003b76:	68ec      	ldr	r4, [r5, #12]
 8003b78:	e7d3      	b.n	8003b22 <_puts_r+0x2a>
 8003b7a:	3601      	adds	r6, #1
 8003b7c:	60a3      	str	r3, [r4, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da04      	bge.n	8003b8c <_puts_r+0x94>
 8003b82:	69a2      	ldr	r2, [r4, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	dc16      	bgt.n	8003bb6 <_puts_r+0xbe>
 8003b88:	290a      	cmp	r1, #10
 8003b8a:	d014      	beq.n	8003bb6 <_puts_r+0xbe>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	6022      	str	r2, [r4, #0]
 8003b92:	7019      	strb	r1, [r3, #0]
 8003b94:	68a3      	ldr	r3, [r4, #8]
 8003b96:	7831      	ldrb	r1, [r6, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	2900      	cmp	r1, #0
 8003b9c:	d1ed      	bne.n	8003b7a <_puts_r+0x82>
 8003b9e:	60a3      	str	r3, [r4, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	da0f      	bge.n	8003bc4 <_puts_r+0xcc>
 8003ba4:	0028      	movs	r0, r5
 8003ba6:	0022      	movs	r2, r4
 8003ba8:	310a      	adds	r1, #10
 8003baa:	f000 f821 	bl	8003bf0 <__swbuf_r>
 8003bae:	250a      	movs	r5, #10
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d1cd      	bne.n	8003b50 <_puts_r+0x58>
 8003bb4:	e7ca      	b.n	8003b4c <_puts_r+0x54>
 8003bb6:	0022      	movs	r2, r4
 8003bb8:	0028      	movs	r0, r5
 8003bba:	f000 f819 	bl	8003bf0 <__swbuf_r>
 8003bbe:	1c43      	adds	r3, r0, #1
 8003bc0:	d1e8      	bne.n	8003b94 <_puts_r+0x9c>
 8003bc2:	e7c3      	b.n	8003b4c <_puts_r+0x54>
 8003bc4:	250a      	movs	r5, #10
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	6022      	str	r2, [r4, #0]
 8003bcc:	701d      	strb	r5, [r3, #0]
 8003bce:	e7bf      	b.n	8003b50 <_puts_r+0x58>
 8003bd0:	08005504 	.word	0x08005504
 8003bd4:	08005524 	.word	0x08005524
 8003bd8:	080054e4 	.word	0x080054e4

08003bdc <puts>:
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4b03      	ldr	r3, [pc, #12]	; (8003bec <puts+0x10>)
 8003be0:	0001      	movs	r1, r0
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	f7ff ff88 	bl	8003af8 <_puts_r>
 8003be8:	bd10      	pop	{r4, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	20000010 	.word	0x20000010

08003bf0 <__swbuf_r>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	0005      	movs	r5, r0
 8003bf4:	000e      	movs	r6, r1
 8003bf6:	0014      	movs	r4, r2
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d004      	beq.n	8003c06 <__swbuf_r+0x16>
 8003bfc:	6983      	ldr	r3, [r0, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <__swbuf_r+0x16>
 8003c02:	f000 f9f1 	bl	8003fe8 <__sinit>
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <__swbuf_r+0xa0>)
 8003c08:	429c      	cmp	r4, r3
 8003c0a:	d12e      	bne.n	8003c6a <__swbuf_r+0x7a>
 8003c0c:	686c      	ldr	r4, [r5, #4]
 8003c0e:	69a3      	ldr	r3, [r4, #24]
 8003c10:	60a3      	str	r3, [r4, #8]
 8003c12:	89a3      	ldrh	r3, [r4, #12]
 8003c14:	071b      	lsls	r3, r3, #28
 8003c16:	d532      	bpl.n	8003c7e <__swbuf_r+0x8e>
 8003c18:	6923      	ldr	r3, [r4, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d02f      	beq.n	8003c7e <__swbuf_r+0x8e>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	6922      	ldr	r2, [r4, #16]
 8003c22:	b2f7      	uxtb	r7, r6
 8003c24:	1a98      	subs	r0, r3, r2
 8003c26:	6963      	ldr	r3, [r4, #20]
 8003c28:	b2f6      	uxtb	r6, r6
 8003c2a:	4283      	cmp	r3, r0
 8003c2c:	dc05      	bgt.n	8003c3a <__swbuf_r+0x4a>
 8003c2e:	0021      	movs	r1, r4
 8003c30:	0028      	movs	r0, r5
 8003c32:	f000 f937 	bl	8003ea4 <_fflush_r>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d127      	bne.n	8003c8a <__swbuf_r+0x9a>
 8003c3a:	68a3      	ldr	r3, [r4, #8]
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	60a3      	str	r3, [r4, #8]
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	6022      	str	r2, [r4, #0]
 8003c48:	701f      	strb	r7, [r3, #0]
 8003c4a:	6963      	ldr	r3, [r4, #20]
 8003c4c:	4283      	cmp	r3, r0
 8003c4e:	d004      	beq.n	8003c5a <__swbuf_r+0x6a>
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	07db      	lsls	r3, r3, #31
 8003c54:	d507      	bpl.n	8003c66 <__swbuf_r+0x76>
 8003c56:	2e0a      	cmp	r6, #10
 8003c58:	d105      	bne.n	8003c66 <__swbuf_r+0x76>
 8003c5a:	0021      	movs	r1, r4
 8003c5c:	0028      	movs	r0, r5
 8003c5e:	f000 f921 	bl	8003ea4 <_fflush_r>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d111      	bne.n	8003c8a <__swbuf_r+0x9a>
 8003c66:	0030      	movs	r0, r6
 8003c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <__swbuf_r+0xa4>)
 8003c6c:	429c      	cmp	r4, r3
 8003c6e:	d101      	bne.n	8003c74 <__swbuf_r+0x84>
 8003c70:	68ac      	ldr	r4, [r5, #8]
 8003c72:	e7cc      	b.n	8003c0e <__swbuf_r+0x1e>
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <__swbuf_r+0xa8>)
 8003c76:	429c      	cmp	r4, r3
 8003c78:	d1c9      	bne.n	8003c0e <__swbuf_r+0x1e>
 8003c7a:	68ec      	ldr	r4, [r5, #12]
 8003c7c:	e7c7      	b.n	8003c0e <__swbuf_r+0x1e>
 8003c7e:	0021      	movs	r1, r4
 8003c80:	0028      	movs	r0, r5
 8003c82:	f000 f80b 	bl	8003c9c <__swsetup_r>
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d0c9      	beq.n	8003c1e <__swbuf_r+0x2e>
 8003c8a:	2601      	movs	r6, #1
 8003c8c:	4276      	negs	r6, r6
 8003c8e:	e7ea      	b.n	8003c66 <__swbuf_r+0x76>
 8003c90:	08005504 	.word	0x08005504
 8003c94:	08005524 	.word	0x08005524
 8003c98:	080054e4 	.word	0x080054e4

08003c9c <__swsetup_r>:
 8003c9c:	4b37      	ldr	r3, [pc, #220]	; (8003d7c <__swsetup_r+0xe0>)
 8003c9e:	b570      	push	{r4, r5, r6, lr}
 8003ca0:	681d      	ldr	r5, [r3, #0]
 8003ca2:	0006      	movs	r6, r0
 8003ca4:	000c      	movs	r4, r1
 8003ca6:	2d00      	cmp	r5, #0
 8003ca8:	d005      	beq.n	8003cb6 <__swsetup_r+0x1a>
 8003caa:	69ab      	ldr	r3, [r5, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <__swsetup_r+0x1a>
 8003cb0:	0028      	movs	r0, r5
 8003cb2:	f000 f999 	bl	8003fe8 <__sinit>
 8003cb6:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <__swsetup_r+0xe4>)
 8003cb8:	429c      	cmp	r4, r3
 8003cba:	d10f      	bne.n	8003cdc <__swsetup_r+0x40>
 8003cbc:	686c      	ldr	r4, [r5, #4]
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	5ee2      	ldrsh	r2, [r4, r3]
 8003cc2:	b293      	uxth	r3, r2
 8003cc4:	0711      	lsls	r1, r2, #28
 8003cc6:	d42d      	bmi.n	8003d24 <__swsetup_r+0x88>
 8003cc8:	06d9      	lsls	r1, r3, #27
 8003cca:	d411      	bmi.n	8003cf0 <__swsetup_r+0x54>
 8003ccc:	2309      	movs	r3, #9
 8003cce:	2001      	movs	r0, #1
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	3337      	adds	r3, #55	; 0x37
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	81a3      	strh	r3, [r4, #12]
 8003cd8:	4240      	negs	r0, r0
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <__swsetup_r+0xe8>)
 8003cde:	429c      	cmp	r4, r3
 8003ce0:	d101      	bne.n	8003ce6 <__swsetup_r+0x4a>
 8003ce2:	68ac      	ldr	r4, [r5, #8]
 8003ce4:	e7eb      	b.n	8003cbe <__swsetup_r+0x22>
 8003ce6:	4b28      	ldr	r3, [pc, #160]	; (8003d88 <__swsetup_r+0xec>)
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	d1e8      	bne.n	8003cbe <__swsetup_r+0x22>
 8003cec:	68ec      	ldr	r4, [r5, #12]
 8003cee:	e7e6      	b.n	8003cbe <__swsetup_r+0x22>
 8003cf0:	075b      	lsls	r3, r3, #29
 8003cf2:	d513      	bpl.n	8003d1c <__swsetup_r+0x80>
 8003cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cf6:	2900      	cmp	r1, #0
 8003cf8:	d008      	beq.n	8003d0c <__swsetup_r+0x70>
 8003cfa:	0023      	movs	r3, r4
 8003cfc:	3344      	adds	r3, #68	; 0x44
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	d002      	beq.n	8003d08 <__swsetup_r+0x6c>
 8003d02:	0030      	movs	r0, r6
 8003d04:	f000 fa80 	bl	8004208 <_free_r>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	6363      	str	r3, [r4, #52]	; 0x34
 8003d0c:	2224      	movs	r2, #36	; 0x24
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	4393      	bics	r3, r2
 8003d12:	81a3      	strh	r3, [r4, #12]
 8003d14:	2300      	movs	r3, #0
 8003d16:	6063      	str	r3, [r4, #4]
 8003d18:	6923      	ldr	r3, [r4, #16]
 8003d1a:	6023      	str	r3, [r4, #0]
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	89a2      	ldrh	r2, [r4, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	81a3      	strh	r3, [r4, #12]
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <__swsetup_r+0xa6>
 8003d2a:	21a0      	movs	r1, #160	; 0xa0
 8003d2c:	2280      	movs	r2, #128	; 0x80
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	0089      	lsls	r1, r1, #2
 8003d32:	0092      	lsls	r2, r2, #2
 8003d34:	400b      	ands	r3, r1
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <__swsetup_r+0xa6>
 8003d3a:	0021      	movs	r1, r4
 8003d3c:	0030      	movs	r0, r6
 8003d3e:	f000 fa1f 	bl	8004180 <__smakebuf_r>
 8003d42:	220c      	movs	r2, #12
 8003d44:	5ea3      	ldrsh	r3, [r4, r2]
 8003d46:	2001      	movs	r0, #1
 8003d48:	001a      	movs	r2, r3
 8003d4a:	b299      	uxth	r1, r3
 8003d4c:	4002      	ands	r2, r0
 8003d4e:	4203      	tst	r3, r0
 8003d50:	d00f      	beq.n	8003d72 <__swsetup_r+0xd6>
 8003d52:	2200      	movs	r2, #0
 8003d54:	60a2      	str	r2, [r4, #8]
 8003d56:	6962      	ldr	r2, [r4, #20]
 8003d58:	4252      	negs	r2, r2
 8003d5a:	61a2      	str	r2, [r4, #24]
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	6922      	ldr	r2, [r4, #16]
 8003d60:	4282      	cmp	r2, r0
 8003d62:	d1ba      	bne.n	8003cda <__swsetup_r+0x3e>
 8003d64:	060a      	lsls	r2, r1, #24
 8003d66:	d5b8      	bpl.n	8003cda <__swsetup_r+0x3e>
 8003d68:	2240      	movs	r2, #64	; 0x40
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	81a3      	strh	r3, [r4, #12]
 8003d6e:	3801      	subs	r0, #1
 8003d70:	e7b3      	b.n	8003cda <__swsetup_r+0x3e>
 8003d72:	0788      	lsls	r0, r1, #30
 8003d74:	d400      	bmi.n	8003d78 <__swsetup_r+0xdc>
 8003d76:	6962      	ldr	r2, [r4, #20]
 8003d78:	60a2      	str	r2, [r4, #8]
 8003d7a:	e7ef      	b.n	8003d5c <__swsetup_r+0xc0>
 8003d7c:	20000010 	.word	0x20000010
 8003d80:	08005504 	.word	0x08005504
 8003d84:	08005524 	.word	0x08005524
 8003d88:	080054e4 	.word	0x080054e4

08003d8c <__sflush_r>:
 8003d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d8e:	898b      	ldrh	r3, [r1, #12]
 8003d90:	0005      	movs	r5, r0
 8003d92:	000c      	movs	r4, r1
 8003d94:	071a      	lsls	r2, r3, #28
 8003d96:	d45f      	bmi.n	8003e58 <__sflush_r+0xcc>
 8003d98:	684a      	ldr	r2, [r1, #4]
 8003d9a:	2a00      	cmp	r2, #0
 8003d9c:	dc04      	bgt.n	8003da8 <__sflush_r+0x1c>
 8003d9e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003da0:	2a00      	cmp	r2, #0
 8003da2:	dc01      	bgt.n	8003da8 <__sflush_r+0x1c>
 8003da4:	2000      	movs	r0, #0
 8003da6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003da8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003daa:	2f00      	cmp	r7, #0
 8003dac:	d0fa      	beq.n	8003da4 <__sflush_r+0x18>
 8003dae:	2200      	movs	r2, #0
 8003db0:	2180      	movs	r1, #128	; 0x80
 8003db2:	682e      	ldr	r6, [r5, #0]
 8003db4:	602a      	str	r2, [r5, #0]
 8003db6:	001a      	movs	r2, r3
 8003db8:	0149      	lsls	r1, r1, #5
 8003dba:	400a      	ands	r2, r1
 8003dbc:	420b      	tst	r3, r1
 8003dbe:	d034      	beq.n	8003e2a <__sflush_r+0x9e>
 8003dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	075b      	lsls	r3, r3, #29
 8003dc6:	d506      	bpl.n	8003dd6 <__sflush_r+0x4a>
 8003dc8:	6863      	ldr	r3, [r4, #4]
 8003dca:	1ac0      	subs	r0, r0, r3
 8003dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <__sflush_r+0x4a>
 8003dd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dd4:	1ac0      	subs	r0, r0, r3
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	6a21      	ldr	r1, [r4, #32]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	0028      	movs	r0, r5
 8003dde:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003de0:	47b8      	blx	r7
 8003de2:	89a1      	ldrh	r1, [r4, #12]
 8003de4:	1c43      	adds	r3, r0, #1
 8003de6:	d106      	bne.n	8003df6 <__sflush_r+0x6a>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	2b1d      	cmp	r3, #29
 8003dec:	d831      	bhi.n	8003e52 <__sflush_r+0xc6>
 8003dee:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <__sflush_r+0x114>)
 8003df0:	40da      	lsrs	r2, r3
 8003df2:	07d3      	lsls	r3, r2, #31
 8003df4:	d52d      	bpl.n	8003e52 <__sflush_r+0xc6>
 8003df6:	2300      	movs	r3, #0
 8003df8:	6063      	str	r3, [r4, #4]
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	04cb      	lsls	r3, r1, #19
 8003e00:	d505      	bpl.n	8003e0e <__sflush_r+0x82>
 8003e02:	1c43      	adds	r3, r0, #1
 8003e04:	d102      	bne.n	8003e0c <__sflush_r+0x80>
 8003e06:	682b      	ldr	r3, [r5, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d100      	bne.n	8003e0e <__sflush_r+0x82>
 8003e0c:	6560      	str	r0, [r4, #84]	; 0x54
 8003e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e10:	602e      	str	r6, [r5, #0]
 8003e12:	2900      	cmp	r1, #0
 8003e14:	d0c6      	beq.n	8003da4 <__sflush_r+0x18>
 8003e16:	0023      	movs	r3, r4
 8003e18:	3344      	adds	r3, #68	; 0x44
 8003e1a:	4299      	cmp	r1, r3
 8003e1c:	d002      	beq.n	8003e24 <__sflush_r+0x98>
 8003e1e:	0028      	movs	r0, r5
 8003e20:	f000 f9f2 	bl	8004208 <_free_r>
 8003e24:	2000      	movs	r0, #0
 8003e26:	6360      	str	r0, [r4, #52]	; 0x34
 8003e28:	e7bd      	b.n	8003da6 <__sflush_r+0x1a>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	0028      	movs	r0, r5
 8003e2e:	6a21      	ldr	r1, [r4, #32]
 8003e30:	47b8      	blx	r7
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	d1c5      	bne.n	8003dc2 <__sflush_r+0x36>
 8003e36:	682b      	ldr	r3, [r5, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0c2      	beq.n	8003dc2 <__sflush_r+0x36>
 8003e3c:	2b1d      	cmp	r3, #29
 8003e3e:	d001      	beq.n	8003e44 <__sflush_r+0xb8>
 8003e40:	2b16      	cmp	r3, #22
 8003e42:	d101      	bne.n	8003e48 <__sflush_r+0xbc>
 8003e44:	602e      	str	r6, [r5, #0]
 8003e46:	e7ad      	b.n	8003da4 <__sflush_r+0x18>
 8003e48:	2340      	movs	r3, #64	; 0x40
 8003e4a:	89a2      	ldrh	r2, [r4, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	81a3      	strh	r3, [r4, #12]
 8003e50:	e7a9      	b.n	8003da6 <__sflush_r+0x1a>
 8003e52:	2340      	movs	r3, #64	; 0x40
 8003e54:	430b      	orrs	r3, r1
 8003e56:	e7fa      	b.n	8003e4e <__sflush_r+0xc2>
 8003e58:	690f      	ldr	r7, [r1, #16]
 8003e5a:	2f00      	cmp	r7, #0
 8003e5c:	d0a2      	beq.n	8003da4 <__sflush_r+0x18>
 8003e5e:	680a      	ldr	r2, [r1, #0]
 8003e60:	600f      	str	r7, [r1, #0]
 8003e62:	1bd2      	subs	r2, r2, r7
 8003e64:	9201      	str	r2, [sp, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	079b      	lsls	r3, r3, #30
 8003e6a:	d100      	bne.n	8003e6e <__sflush_r+0xe2>
 8003e6c:	694a      	ldr	r2, [r1, #20]
 8003e6e:	60a2      	str	r2, [r4, #8]
 8003e70:	9b01      	ldr	r3, [sp, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	dc00      	bgt.n	8003e78 <__sflush_r+0xec>
 8003e76:	e795      	b.n	8003da4 <__sflush_r+0x18>
 8003e78:	003a      	movs	r2, r7
 8003e7a:	0028      	movs	r0, r5
 8003e7c:	9b01      	ldr	r3, [sp, #4]
 8003e7e:	6a21      	ldr	r1, [r4, #32]
 8003e80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e82:	47b0      	blx	r6
 8003e84:	2800      	cmp	r0, #0
 8003e86:	dc06      	bgt.n	8003e96 <__sflush_r+0x10a>
 8003e88:	2340      	movs	r3, #64	; 0x40
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	89a2      	ldrh	r2, [r4, #12]
 8003e8e:	4240      	negs	r0, r0
 8003e90:	4313      	orrs	r3, r2
 8003e92:	81a3      	strh	r3, [r4, #12]
 8003e94:	e787      	b.n	8003da6 <__sflush_r+0x1a>
 8003e96:	9b01      	ldr	r3, [sp, #4]
 8003e98:	183f      	adds	r7, r7, r0
 8003e9a:	1a1b      	subs	r3, r3, r0
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	e7e7      	b.n	8003e70 <__sflush_r+0xe4>
 8003ea0:	20400001 	.word	0x20400001

08003ea4 <_fflush_r>:
 8003ea4:	690b      	ldr	r3, [r1, #16]
 8003ea6:	b570      	push	{r4, r5, r6, lr}
 8003ea8:	0005      	movs	r5, r0
 8003eaa:	000c      	movs	r4, r1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <_fflush_r+0x12>
 8003eb0:	2500      	movs	r5, #0
 8003eb2:	0028      	movs	r0, r5
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d004      	beq.n	8003ec4 <_fflush_r+0x20>
 8003eba:	6983      	ldr	r3, [r0, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <_fflush_r+0x20>
 8003ec0:	f000 f892 	bl	8003fe8 <__sinit>
 8003ec4:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <_fflush_r+0x74>)
 8003ec6:	429c      	cmp	r4, r3
 8003ec8:	d11b      	bne.n	8003f02 <_fflush_r+0x5e>
 8003eca:	686c      	ldr	r4, [r5, #4]
 8003ecc:	220c      	movs	r2, #12
 8003ece:	5ea3      	ldrsh	r3, [r4, r2]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ed      	beq.n	8003eb0 <_fflush_r+0xc>
 8003ed4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ed6:	07d2      	lsls	r2, r2, #31
 8003ed8:	d404      	bmi.n	8003ee4 <_fflush_r+0x40>
 8003eda:	059b      	lsls	r3, r3, #22
 8003edc:	d402      	bmi.n	8003ee4 <_fflush_r+0x40>
 8003ede:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ee0:	f000 f923 	bl	800412a <__retarget_lock_acquire_recursive>
 8003ee4:	0028      	movs	r0, r5
 8003ee6:	0021      	movs	r1, r4
 8003ee8:	f7ff ff50 	bl	8003d8c <__sflush_r>
 8003eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eee:	0005      	movs	r5, r0
 8003ef0:	07db      	lsls	r3, r3, #31
 8003ef2:	d4de      	bmi.n	8003eb2 <_fflush_r+0xe>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	059b      	lsls	r3, r3, #22
 8003ef8:	d4db      	bmi.n	8003eb2 <_fflush_r+0xe>
 8003efa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003efc:	f000 f916 	bl	800412c <__retarget_lock_release_recursive>
 8003f00:	e7d7      	b.n	8003eb2 <_fflush_r+0xe>
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <_fflush_r+0x78>)
 8003f04:	429c      	cmp	r4, r3
 8003f06:	d101      	bne.n	8003f0c <_fflush_r+0x68>
 8003f08:	68ac      	ldr	r4, [r5, #8]
 8003f0a:	e7df      	b.n	8003ecc <_fflush_r+0x28>
 8003f0c:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <_fflush_r+0x7c>)
 8003f0e:	429c      	cmp	r4, r3
 8003f10:	d1dc      	bne.n	8003ecc <_fflush_r+0x28>
 8003f12:	68ec      	ldr	r4, [r5, #12]
 8003f14:	e7da      	b.n	8003ecc <_fflush_r+0x28>
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	08005504 	.word	0x08005504
 8003f1c:	08005524 	.word	0x08005524
 8003f20:	080054e4 	.word	0x080054e4

08003f24 <std>:
 8003f24:	2300      	movs	r3, #0
 8003f26:	b510      	push	{r4, lr}
 8003f28:	0004      	movs	r4, r0
 8003f2a:	6003      	str	r3, [r0, #0]
 8003f2c:	6043      	str	r3, [r0, #4]
 8003f2e:	6083      	str	r3, [r0, #8]
 8003f30:	8181      	strh	r1, [r0, #12]
 8003f32:	6643      	str	r3, [r0, #100]	; 0x64
 8003f34:	0019      	movs	r1, r3
 8003f36:	81c2      	strh	r2, [r0, #14]
 8003f38:	6103      	str	r3, [r0, #16]
 8003f3a:	6143      	str	r3, [r0, #20]
 8003f3c:	6183      	str	r3, [r0, #24]
 8003f3e:	2208      	movs	r2, #8
 8003f40:	305c      	adds	r0, #92	; 0x5c
 8003f42:	f7ff fdb7 	bl	8003ab4 <memset>
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <std+0x38>)
 8003f48:	6224      	str	r4, [r4, #32]
 8003f4a:	6263      	str	r3, [r4, #36]	; 0x24
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <std+0x3c>)
 8003f4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <std+0x40>)
 8003f52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <std+0x44>)
 8003f56:	6323      	str	r3, [r4, #48]	; 0x30
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	080049b9 	.word	0x080049b9
 8003f60:	080049e1 	.word	0x080049e1
 8003f64:	08004a19 	.word	0x08004a19
 8003f68:	08004a45 	.word	0x08004a45

08003f6c <_cleanup_r>:
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	4902      	ldr	r1, [pc, #8]	; (8003f78 <_cleanup_r+0xc>)
 8003f70:	f000 f8ba 	bl	80040e8 <_fwalk_reent>
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	08003ea5 	.word	0x08003ea5

08003f7c <__sfmoreglue>:
 8003f7c:	b570      	push	{r4, r5, r6, lr}
 8003f7e:	2568      	movs	r5, #104	; 0x68
 8003f80:	1e4a      	subs	r2, r1, #1
 8003f82:	4355      	muls	r5, r2
 8003f84:	000e      	movs	r6, r1
 8003f86:	0029      	movs	r1, r5
 8003f88:	3174      	adds	r1, #116	; 0x74
 8003f8a:	f000 f9a9 	bl	80042e0 <_malloc_r>
 8003f8e:	1e04      	subs	r4, r0, #0
 8003f90:	d008      	beq.n	8003fa4 <__sfmoreglue+0x28>
 8003f92:	2100      	movs	r1, #0
 8003f94:	002a      	movs	r2, r5
 8003f96:	6001      	str	r1, [r0, #0]
 8003f98:	6046      	str	r6, [r0, #4]
 8003f9a:	300c      	adds	r0, #12
 8003f9c:	60a0      	str	r0, [r4, #8]
 8003f9e:	3268      	adds	r2, #104	; 0x68
 8003fa0:	f7ff fd88 	bl	8003ab4 <memset>
 8003fa4:	0020      	movs	r0, r4
 8003fa6:	bd70      	pop	{r4, r5, r6, pc}

08003fa8 <__sfp_lock_acquire>:
 8003fa8:	b510      	push	{r4, lr}
 8003faa:	4802      	ldr	r0, [pc, #8]	; (8003fb4 <__sfp_lock_acquire+0xc>)
 8003fac:	f000 f8bd 	bl	800412a <__retarget_lock_acquire_recursive>
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	200003c5 	.word	0x200003c5

08003fb8 <__sfp_lock_release>:
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <__sfp_lock_release+0xc>)
 8003fbc:	f000 f8b6 	bl	800412c <__retarget_lock_release_recursive>
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	200003c5 	.word	0x200003c5

08003fc8 <__sinit_lock_acquire>:
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	4802      	ldr	r0, [pc, #8]	; (8003fd4 <__sinit_lock_acquire+0xc>)
 8003fcc:	f000 f8ad 	bl	800412a <__retarget_lock_acquire_recursive>
 8003fd0:	bd10      	pop	{r4, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	200003c6 	.word	0x200003c6

08003fd8 <__sinit_lock_release>:
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	4802      	ldr	r0, [pc, #8]	; (8003fe4 <__sinit_lock_release+0xc>)
 8003fdc:	f000 f8a6 	bl	800412c <__retarget_lock_release_recursive>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	200003c6 	.word	0x200003c6

08003fe8 <__sinit>:
 8003fe8:	b513      	push	{r0, r1, r4, lr}
 8003fea:	0004      	movs	r4, r0
 8003fec:	f7ff ffec 	bl	8003fc8 <__sinit_lock_acquire>
 8003ff0:	69a3      	ldr	r3, [r4, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <__sinit+0x14>
 8003ff6:	f7ff ffef 	bl	8003fd8 <__sinit_lock_release>
 8003ffa:	bd13      	pop	{r0, r1, r4, pc}
 8003ffc:	64a3      	str	r3, [r4, #72]	; 0x48
 8003ffe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004000:	6523      	str	r3, [r4, #80]	; 0x50
 8004002:	4b13      	ldr	r3, [pc, #76]	; (8004050 <__sinit+0x68>)
 8004004:	4a13      	ldr	r2, [pc, #76]	; (8004054 <__sinit+0x6c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	62a2      	str	r2, [r4, #40]	; 0x28
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	42a3      	cmp	r3, r4
 800400e:	d101      	bne.n	8004014 <__sinit+0x2c>
 8004010:	2301      	movs	r3, #1
 8004012:	61a3      	str	r3, [r4, #24]
 8004014:	0020      	movs	r0, r4
 8004016:	f000 f81f 	bl	8004058 <__sfp>
 800401a:	6060      	str	r0, [r4, #4]
 800401c:	0020      	movs	r0, r4
 800401e:	f000 f81b 	bl	8004058 <__sfp>
 8004022:	60a0      	str	r0, [r4, #8]
 8004024:	0020      	movs	r0, r4
 8004026:	f000 f817 	bl	8004058 <__sfp>
 800402a:	2200      	movs	r2, #0
 800402c:	2104      	movs	r1, #4
 800402e:	60e0      	str	r0, [r4, #12]
 8004030:	6860      	ldr	r0, [r4, #4]
 8004032:	f7ff ff77 	bl	8003f24 <std>
 8004036:	2201      	movs	r2, #1
 8004038:	2109      	movs	r1, #9
 800403a:	68a0      	ldr	r0, [r4, #8]
 800403c:	f7ff ff72 	bl	8003f24 <std>
 8004040:	2202      	movs	r2, #2
 8004042:	2112      	movs	r1, #18
 8004044:	68e0      	ldr	r0, [r4, #12]
 8004046:	f7ff ff6d 	bl	8003f24 <std>
 800404a:	2301      	movs	r3, #1
 800404c:	61a3      	str	r3, [r4, #24]
 800404e:	e7d2      	b.n	8003ff6 <__sinit+0xe>
 8004050:	080054e0 	.word	0x080054e0
 8004054:	08003f6d 	.word	0x08003f6d

08004058 <__sfp>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	0007      	movs	r7, r0
 800405c:	f7ff ffa4 	bl	8003fa8 <__sfp_lock_acquire>
 8004060:	4b1f      	ldr	r3, [pc, #124]	; (80040e0 <__sfp+0x88>)
 8004062:	681e      	ldr	r6, [r3, #0]
 8004064:	69b3      	ldr	r3, [r6, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <__sfp+0x18>
 800406a:	0030      	movs	r0, r6
 800406c:	f7ff ffbc 	bl	8003fe8 <__sinit>
 8004070:	3648      	adds	r6, #72	; 0x48
 8004072:	68b4      	ldr	r4, [r6, #8]
 8004074:	6873      	ldr	r3, [r6, #4]
 8004076:	3b01      	subs	r3, #1
 8004078:	d504      	bpl.n	8004084 <__sfp+0x2c>
 800407a:	6833      	ldr	r3, [r6, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d022      	beq.n	80040c6 <__sfp+0x6e>
 8004080:	6836      	ldr	r6, [r6, #0]
 8004082:	e7f6      	b.n	8004072 <__sfp+0x1a>
 8004084:	220c      	movs	r2, #12
 8004086:	5ea5      	ldrsh	r5, [r4, r2]
 8004088:	2d00      	cmp	r5, #0
 800408a:	d11a      	bne.n	80040c2 <__sfp+0x6a>
 800408c:	0020      	movs	r0, r4
 800408e:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <__sfp+0x8c>)
 8004090:	3058      	adds	r0, #88	; 0x58
 8004092:	60e3      	str	r3, [r4, #12]
 8004094:	6665      	str	r5, [r4, #100]	; 0x64
 8004096:	f000 f847 	bl	8004128 <__retarget_lock_init_recursive>
 800409a:	f7ff ff8d 	bl	8003fb8 <__sfp_lock_release>
 800409e:	0020      	movs	r0, r4
 80040a0:	2208      	movs	r2, #8
 80040a2:	0029      	movs	r1, r5
 80040a4:	6025      	str	r5, [r4, #0]
 80040a6:	60a5      	str	r5, [r4, #8]
 80040a8:	6065      	str	r5, [r4, #4]
 80040aa:	6125      	str	r5, [r4, #16]
 80040ac:	6165      	str	r5, [r4, #20]
 80040ae:	61a5      	str	r5, [r4, #24]
 80040b0:	305c      	adds	r0, #92	; 0x5c
 80040b2:	f7ff fcff 	bl	8003ab4 <memset>
 80040b6:	6365      	str	r5, [r4, #52]	; 0x34
 80040b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80040ba:	64a5      	str	r5, [r4, #72]	; 0x48
 80040bc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80040be:	0020      	movs	r0, r4
 80040c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040c2:	3468      	adds	r4, #104	; 0x68
 80040c4:	e7d7      	b.n	8004076 <__sfp+0x1e>
 80040c6:	2104      	movs	r1, #4
 80040c8:	0038      	movs	r0, r7
 80040ca:	f7ff ff57 	bl	8003f7c <__sfmoreglue>
 80040ce:	1e04      	subs	r4, r0, #0
 80040d0:	6030      	str	r0, [r6, #0]
 80040d2:	d1d5      	bne.n	8004080 <__sfp+0x28>
 80040d4:	f7ff ff70 	bl	8003fb8 <__sfp_lock_release>
 80040d8:	230c      	movs	r3, #12
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	e7ef      	b.n	80040be <__sfp+0x66>
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	080054e0 	.word	0x080054e0
 80040e4:	ffff0001 	.word	0xffff0001

080040e8 <_fwalk_reent>:
 80040e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ea:	0004      	movs	r4, r0
 80040ec:	0006      	movs	r6, r0
 80040ee:	2700      	movs	r7, #0
 80040f0:	9101      	str	r1, [sp, #4]
 80040f2:	3448      	adds	r4, #72	; 0x48
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	68a5      	ldr	r5, [r4, #8]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	9b00      	ldr	r3, [sp, #0]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	d504      	bpl.n	800410c <_fwalk_reent+0x24>
 8004102:	6824      	ldr	r4, [r4, #0]
 8004104:	2c00      	cmp	r4, #0
 8004106:	d1f5      	bne.n	80040f4 <_fwalk_reent+0xc>
 8004108:	0038      	movs	r0, r7
 800410a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800410c:	89ab      	ldrh	r3, [r5, #12]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d908      	bls.n	8004124 <_fwalk_reent+0x3c>
 8004112:	220e      	movs	r2, #14
 8004114:	5eab      	ldrsh	r3, [r5, r2]
 8004116:	3301      	adds	r3, #1
 8004118:	d004      	beq.n	8004124 <_fwalk_reent+0x3c>
 800411a:	0029      	movs	r1, r5
 800411c:	0030      	movs	r0, r6
 800411e:	9b01      	ldr	r3, [sp, #4]
 8004120:	4798      	blx	r3
 8004122:	4307      	orrs	r7, r0
 8004124:	3568      	adds	r5, #104	; 0x68
 8004126:	e7e8      	b.n	80040fa <_fwalk_reent+0x12>

08004128 <__retarget_lock_init_recursive>:
 8004128:	4770      	bx	lr

0800412a <__retarget_lock_acquire_recursive>:
 800412a:	4770      	bx	lr

0800412c <__retarget_lock_release_recursive>:
 800412c:	4770      	bx	lr
	...

08004130 <__swhatbuf_r>:
 8004130:	b570      	push	{r4, r5, r6, lr}
 8004132:	000e      	movs	r6, r1
 8004134:	001d      	movs	r5, r3
 8004136:	230e      	movs	r3, #14
 8004138:	5ec9      	ldrsh	r1, [r1, r3]
 800413a:	0014      	movs	r4, r2
 800413c:	b096      	sub	sp, #88	; 0x58
 800413e:	2900      	cmp	r1, #0
 8004140:	da08      	bge.n	8004154 <__swhatbuf_r+0x24>
 8004142:	220c      	movs	r2, #12
 8004144:	5eb3      	ldrsh	r3, [r6, r2]
 8004146:	2200      	movs	r2, #0
 8004148:	602a      	str	r2, [r5, #0]
 800414a:	061b      	lsls	r3, r3, #24
 800414c:	d411      	bmi.n	8004172 <__swhatbuf_r+0x42>
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	e00f      	b.n	8004174 <__swhatbuf_r+0x44>
 8004154:	466a      	mov	r2, sp
 8004156:	f000 fca1 	bl	8004a9c <_fstat_r>
 800415a:	2800      	cmp	r0, #0
 800415c:	dbf1      	blt.n	8004142 <__swhatbuf_r+0x12>
 800415e:	23f0      	movs	r3, #240	; 0xf0
 8004160:	9901      	ldr	r1, [sp, #4]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	4019      	ands	r1, r3
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <__swhatbuf_r+0x4c>)
 8004168:	18c9      	adds	r1, r1, r3
 800416a:	424b      	negs	r3, r1
 800416c:	4159      	adcs	r1, r3
 800416e:	6029      	str	r1, [r5, #0]
 8004170:	e7ed      	b.n	800414e <__swhatbuf_r+0x1e>
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	2000      	movs	r0, #0
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	b016      	add	sp, #88	; 0x58
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	ffffe000 	.word	0xffffe000

08004180 <__smakebuf_r>:
 8004180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004182:	2602      	movs	r6, #2
 8004184:	898b      	ldrh	r3, [r1, #12]
 8004186:	0005      	movs	r5, r0
 8004188:	000c      	movs	r4, r1
 800418a:	4233      	tst	r3, r6
 800418c:	d006      	beq.n	800419c <__smakebuf_r+0x1c>
 800418e:	0023      	movs	r3, r4
 8004190:	3347      	adds	r3, #71	; 0x47
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	6123      	str	r3, [r4, #16]
 8004196:	2301      	movs	r3, #1
 8004198:	6163      	str	r3, [r4, #20]
 800419a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800419c:	466a      	mov	r2, sp
 800419e:	ab01      	add	r3, sp, #4
 80041a0:	f7ff ffc6 	bl	8004130 <__swhatbuf_r>
 80041a4:	9900      	ldr	r1, [sp, #0]
 80041a6:	0007      	movs	r7, r0
 80041a8:	0028      	movs	r0, r5
 80041aa:	f000 f899 	bl	80042e0 <_malloc_r>
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d108      	bne.n	80041c4 <__smakebuf_r+0x44>
 80041b2:	220c      	movs	r2, #12
 80041b4:	5ea3      	ldrsh	r3, [r4, r2]
 80041b6:	059a      	lsls	r2, r3, #22
 80041b8:	d4ef      	bmi.n	800419a <__smakebuf_r+0x1a>
 80041ba:	2203      	movs	r2, #3
 80041bc:	4393      	bics	r3, r2
 80041be:	431e      	orrs	r6, r3
 80041c0:	81a6      	strh	r6, [r4, #12]
 80041c2:	e7e4      	b.n	800418e <__smakebuf_r+0xe>
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <__smakebuf_r+0x84>)
 80041c6:	62ab      	str	r3, [r5, #40]	; 0x28
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	89a2      	ldrh	r2, [r4, #12]
 80041cc:	6020      	str	r0, [r4, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	9b00      	ldr	r3, [sp, #0]
 80041d4:	6120      	str	r0, [r4, #16]
 80041d6:	6163      	str	r3, [r4, #20]
 80041d8:	9b01      	ldr	r3, [sp, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00d      	beq.n	80041fa <__smakebuf_r+0x7a>
 80041de:	0028      	movs	r0, r5
 80041e0:	230e      	movs	r3, #14
 80041e2:	5ee1      	ldrsh	r1, [r4, r3]
 80041e4:	f000 fc6c 	bl	8004ac0 <_isatty_r>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d006      	beq.n	80041fa <__smakebuf_r+0x7a>
 80041ec:	2203      	movs	r2, #3
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	4393      	bics	r3, r2
 80041f2:	001a      	movs	r2, r3
 80041f4:	2301      	movs	r3, #1
 80041f6:	4313      	orrs	r3, r2
 80041f8:	81a3      	strh	r3, [r4, #12]
 80041fa:	89a0      	ldrh	r0, [r4, #12]
 80041fc:	4307      	orrs	r7, r0
 80041fe:	81a7      	strh	r7, [r4, #12]
 8004200:	e7cb      	b.n	800419a <__smakebuf_r+0x1a>
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	08003f6d 	.word	0x08003f6d

08004208 <_free_r>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	0005      	movs	r5, r0
 800420c:	2900      	cmp	r1, #0
 800420e:	d010      	beq.n	8004232 <_free_r+0x2a>
 8004210:	1f0c      	subs	r4, r1, #4
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	da00      	bge.n	800421a <_free_r+0x12>
 8004218:	18e4      	adds	r4, r4, r3
 800421a:	0028      	movs	r0, r5
 800421c:	f000 fc82 	bl	8004b24 <__malloc_lock>
 8004220:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <_free_r+0x90>)
 8004222:	6813      	ldr	r3, [r2, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <_free_r+0x2c>
 8004228:	6063      	str	r3, [r4, #4]
 800422a:	6014      	str	r4, [r2, #0]
 800422c:	0028      	movs	r0, r5
 800422e:	f000 fc81 	bl	8004b34 <__malloc_unlock>
 8004232:	bd70      	pop	{r4, r5, r6, pc}
 8004234:	42a3      	cmp	r3, r4
 8004236:	d908      	bls.n	800424a <_free_r+0x42>
 8004238:	6821      	ldr	r1, [r4, #0]
 800423a:	1860      	adds	r0, r4, r1
 800423c:	4283      	cmp	r3, r0
 800423e:	d1f3      	bne.n	8004228 <_free_r+0x20>
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	1841      	adds	r1, r0, r1
 8004246:	6021      	str	r1, [r4, #0]
 8004248:	e7ee      	b.n	8004228 <_free_r+0x20>
 800424a:	001a      	movs	r2, r3
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <_free_r+0x4e>
 8004252:	42a3      	cmp	r3, r4
 8004254:	d9f9      	bls.n	800424a <_free_r+0x42>
 8004256:	6811      	ldr	r1, [r2, #0]
 8004258:	1850      	adds	r0, r2, r1
 800425a:	42a0      	cmp	r0, r4
 800425c:	d10b      	bne.n	8004276 <_free_r+0x6e>
 800425e:	6820      	ldr	r0, [r4, #0]
 8004260:	1809      	adds	r1, r1, r0
 8004262:	1850      	adds	r0, r2, r1
 8004264:	6011      	str	r1, [r2, #0]
 8004266:	4283      	cmp	r3, r0
 8004268:	d1e0      	bne.n	800422c <_free_r+0x24>
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	1841      	adds	r1, r0, r1
 8004270:	6011      	str	r1, [r2, #0]
 8004272:	6053      	str	r3, [r2, #4]
 8004274:	e7da      	b.n	800422c <_free_r+0x24>
 8004276:	42a0      	cmp	r0, r4
 8004278:	d902      	bls.n	8004280 <_free_r+0x78>
 800427a:	230c      	movs	r3, #12
 800427c:	602b      	str	r3, [r5, #0]
 800427e:	e7d5      	b.n	800422c <_free_r+0x24>
 8004280:	6821      	ldr	r1, [r4, #0]
 8004282:	1860      	adds	r0, r4, r1
 8004284:	4283      	cmp	r3, r0
 8004286:	d103      	bne.n	8004290 <_free_r+0x88>
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	1841      	adds	r1, r0, r1
 800428e:	6021      	str	r1, [r4, #0]
 8004290:	6063      	str	r3, [r4, #4]
 8004292:	6054      	str	r4, [r2, #4]
 8004294:	e7ca      	b.n	800422c <_free_r+0x24>
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	200003c8 	.word	0x200003c8

0800429c <sbrk_aligned>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	4e0f      	ldr	r6, [pc, #60]	; (80042dc <sbrk_aligned+0x40>)
 80042a0:	000d      	movs	r5, r1
 80042a2:	6831      	ldr	r1, [r6, #0]
 80042a4:	0004      	movs	r4, r0
 80042a6:	2900      	cmp	r1, #0
 80042a8:	d102      	bne.n	80042b0 <sbrk_aligned+0x14>
 80042aa:	f000 fb73 	bl	8004994 <_sbrk_r>
 80042ae:	6030      	str	r0, [r6, #0]
 80042b0:	0029      	movs	r1, r5
 80042b2:	0020      	movs	r0, r4
 80042b4:	f000 fb6e 	bl	8004994 <_sbrk_r>
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d00a      	beq.n	80042d2 <sbrk_aligned+0x36>
 80042bc:	2303      	movs	r3, #3
 80042be:	1cc5      	adds	r5, r0, #3
 80042c0:	439d      	bics	r5, r3
 80042c2:	42a8      	cmp	r0, r5
 80042c4:	d007      	beq.n	80042d6 <sbrk_aligned+0x3a>
 80042c6:	1a29      	subs	r1, r5, r0
 80042c8:	0020      	movs	r0, r4
 80042ca:	f000 fb63 	bl	8004994 <_sbrk_r>
 80042ce:	1c43      	adds	r3, r0, #1
 80042d0:	d101      	bne.n	80042d6 <sbrk_aligned+0x3a>
 80042d2:	2501      	movs	r5, #1
 80042d4:	426d      	negs	r5, r5
 80042d6:	0028      	movs	r0, r5
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	200003cc 	.word	0x200003cc

080042e0 <_malloc_r>:
 80042e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042e2:	2203      	movs	r2, #3
 80042e4:	1ccb      	adds	r3, r1, #3
 80042e6:	4393      	bics	r3, r2
 80042e8:	3308      	adds	r3, #8
 80042ea:	0006      	movs	r6, r0
 80042ec:	001f      	movs	r7, r3
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d232      	bcs.n	8004358 <_malloc_r+0x78>
 80042f2:	270c      	movs	r7, #12
 80042f4:	42b9      	cmp	r1, r7
 80042f6:	d831      	bhi.n	800435c <_malloc_r+0x7c>
 80042f8:	0030      	movs	r0, r6
 80042fa:	f000 fc13 	bl	8004b24 <__malloc_lock>
 80042fe:	4d32      	ldr	r5, [pc, #200]	; (80043c8 <_malloc_r+0xe8>)
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	001c      	movs	r4, r3
 8004304:	2c00      	cmp	r4, #0
 8004306:	d12e      	bne.n	8004366 <_malloc_r+0x86>
 8004308:	0039      	movs	r1, r7
 800430a:	0030      	movs	r0, r6
 800430c:	f7ff ffc6 	bl	800429c <sbrk_aligned>
 8004310:	0004      	movs	r4, r0
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	d11e      	bne.n	8004354 <_malloc_r+0x74>
 8004316:	682c      	ldr	r4, [r5, #0]
 8004318:	0025      	movs	r5, r4
 800431a:	2d00      	cmp	r5, #0
 800431c:	d14a      	bne.n	80043b4 <_malloc_r+0xd4>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	0029      	movs	r1, r5
 8004322:	18e3      	adds	r3, r4, r3
 8004324:	0030      	movs	r0, r6
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	f000 fb34 	bl	8004994 <_sbrk_r>
 800432c:	9b01      	ldr	r3, [sp, #4]
 800432e:	4283      	cmp	r3, r0
 8004330:	d143      	bne.n	80043ba <_malloc_r+0xda>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	3703      	adds	r7, #3
 8004336:	1aff      	subs	r7, r7, r3
 8004338:	2303      	movs	r3, #3
 800433a:	439f      	bics	r7, r3
 800433c:	3708      	adds	r7, #8
 800433e:	2f0c      	cmp	r7, #12
 8004340:	d200      	bcs.n	8004344 <_malloc_r+0x64>
 8004342:	270c      	movs	r7, #12
 8004344:	0039      	movs	r1, r7
 8004346:	0030      	movs	r0, r6
 8004348:	f7ff ffa8 	bl	800429c <sbrk_aligned>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d034      	beq.n	80043ba <_malloc_r+0xda>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	19df      	adds	r7, r3, r7
 8004354:	6027      	str	r7, [r4, #0]
 8004356:	e013      	b.n	8004380 <_malloc_r+0xa0>
 8004358:	2b00      	cmp	r3, #0
 800435a:	dacb      	bge.n	80042f4 <_malloc_r+0x14>
 800435c:	230c      	movs	r3, #12
 800435e:	2500      	movs	r5, #0
 8004360:	6033      	str	r3, [r6, #0]
 8004362:	0028      	movs	r0, r5
 8004364:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	1bd1      	subs	r1, r2, r7
 800436a:	d420      	bmi.n	80043ae <_malloc_r+0xce>
 800436c:	290b      	cmp	r1, #11
 800436e:	d917      	bls.n	80043a0 <_malloc_r+0xc0>
 8004370:	19e2      	adds	r2, r4, r7
 8004372:	6027      	str	r7, [r4, #0]
 8004374:	42a3      	cmp	r3, r4
 8004376:	d111      	bne.n	800439c <_malloc_r+0xbc>
 8004378:	602a      	str	r2, [r5, #0]
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	6011      	str	r1, [r2, #0]
 800437e:	6053      	str	r3, [r2, #4]
 8004380:	0030      	movs	r0, r6
 8004382:	0025      	movs	r5, r4
 8004384:	f000 fbd6 	bl	8004b34 <__malloc_unlock>
 8004388:	2207      	movs	r2, #7
 800438a:	350b      	adds	r5, #11
 800438c:	1d23      	adds	r3, r4, #4
 800438e:	4395      	bics	r5, r2
 8004390:	1aea      	subs	r2, r5, r3
 8004392:	429d      	cmp	r5, r3
 8004394:	d0e5      	beq.n	8004362 <_malloc_r+0x82>
 8004396:	1b5b      	subs	r3, r3, r5
 8004398:	50a3      	str	r3, [r4, r2]
 800439a:	e7e2      	b.n	8004362 <_malloc_r+0x82>
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	e7ec      	b.n	800437a <_malloc_r+0x9a>
 80043a0:	6862      	ldr	r2, [r4, #4]
 80043a2:	42a3      	cmp	r3, r4
 80043a4:	d101      	bne.n	80043aa <_malloc_r+0xca>
 80043a6:	602a      	str	r2, [r5, #0]
 80043a8:	e7ea      	b.n	8004380 <_malloc_r+0xa0>
 80043aa:	605a      	str	r2, [r3, #4]
 80043ac:	e7e8      	b.n	8004380 <_malloc_r+0xa0>
 80043ae:	0023      	movs	r3, r4
 80043b0:	6864      	ldr	r4, [r4, #4]
 80043b2:	e7a7      	b.n	8004304 <_malloc_r+0x24>
 80043b4:	002c      	movs	r4, r5
 80043b6:	686d      	ldr	r5, [r5, #4]
 80043b8:	e7af      	b.n	800431a <_malloc_r+0x3a>
 80043ba:	230c      	movs	r3, #12
 80043bc:	0030      	movs	r0, r6
 80043be:	6033      	str	r3, [r6, #0]
 80043c0:	f000 fbb8 	bl	8004b34 <__malloc_unlock>
 80043c4:	e7cd      	b.n	8004362 <_malloc_r+0x82>
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	200003c8 	.word	0x200003c8

080043cc <__sfputc_r>:
 80043cc:	6893      	ldr	r3, [r2, #8]
 80043ce:	b510      	push	{r4, lr}
 80043d0:	3b01      	subs	r3, #1
 80043d2:	6093      	str	r3, [r2, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da04      	bge.n	80043e2 <__sfputc_r+0x16>
 80043d8:	6994      	ldr	r4, [r2, #24]
 80043da:	42a3      	cmp	r3, r4
 80043dc:	db07      	blt.n	80043ee <__sfputc_r+0x22>
 80043de:	290a      	cmp	r1, #10
 80043e0:	d005      	beq.n	80043ee <__sfputc_r+0x22>
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	1c58      	adds	r0, r3, #1
 80043e6:	6010      	str	r0, [r2, #0]
 80043e8:	7019      	strb	r1, [r3, #0]
 80043ea:	0008      	movs	r0, r1
 80043ec:	bd10      	pop	{r4, pc}
 80043ee:	f7ff fbff 	bl	8003bf0 <__swbuf_r>
 80043f2:	0001      	movs	r1, r0
 80043f4:	e7f9      	b.n	80043ea <__sfputc_r+0x1e>

080043f6 <__sfputs_r>:
 80043f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f8:	0006      	movs	r6, r0
 80043fa:	000f      	movs	r7, r1
 80043fc:	0014      	movs	r4, r2
 80043fe:	18d5      	adds	r5, r2, r3
 8004400:	42ac      	cmp	r4, r5
 8004402:	d101      	bne.n	8004408 <__sfputs_r+0x12>
 8004404:	2000      	movs	r0, #0
 8004406:	e007      	b.n	8004418 <__sfputs_r+0x22>
 8004408:	7821      	ldrb	r1, [r4, #0]
 800440a:	003a      	movs	r2, r7
 800440c:	0030      	movs	r0, r6
 800440e:	f7ff ffdd 	bl	80043cc <__sfputc_r>
 8004412:	3401      	adds	r4, #1
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	d1f3      	bne.n	8004400 <__sfputs_r+0xa>
 8004418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800441c <_vfiprintf_r>:
 800441c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441e:	b0a1      	sub	sp, #132	; 0x84
 8004420:	0006      	movs	r6, r0
 8004422:	000c      	movs	r4, r1
 8004424:	001f      	movs	r7, r3
 8004426:	9203      	str	r2, [sp, #12]
 8004428:	2800      	cmp	r0, #0
 800442a:	d004      	beq.n	8004436 <_vfiprintf_r+0x1a>
 800442c:	6983      	ldr	r3, [r0, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <_vfiprintf_r+0x1a>
 8004432:	f7ff fdd9 	bl	8003fe8 <__sinit>
 8004436:	4b8e      	ldr	r3, [pc, #568]	; (8004670 <_vfiprintf_r+0x254>)
 8004438:	429c      	cmp	r4, r3
 800443a:	d11c      	bne.n	8004476 <_vfiprintf_r+0x5a>
 800443c:	6874      	ldr	r4, [r6, #4]
 800443e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004440:	07db      	lsls	r3, r3, #31
 8004442:	d405      	bmi.n	8004450 <_vfiprintf_r+0x34>
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	059b      	lsls	r3, r3, #22
 8004448:	d402      	bmi.n	8004450 <_vfiprintf_r+0x34>
 800444a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800444c:	f7ff fe6d 	bl	800412a <__retarget_lock_acquire_recursive>
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	071b      	lsls	r3, r3, #28
 8004454:	d502      	bpl.n	800445c <_vfiprintf_r+0x40>
 8004456:	6923      	ldr	r3, [r4, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d11d      	bne.n	8004498 <_vfiprintf_r+0x7c>
 800445c:	0021      	movs	r1, r4
 800445e:	0030      	movs	r0, r6
 8004460:	f7ff fc1c 	bl	8003c9c <__swsetup_r>
 8004464:	2800      	cmp	r0, #0
 8004466:	d017      	beq.n	8004498 <_vfiprintf_r+0x7c>
 8004468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800446a:	07db      	lsls	r3, r3, #31
 800446c:	d50d      	bpl.n	800448a <_vfiprintf_r+0x6e>
 800446e:	2001      	movs	r0, #1
 8004470:	4240      	negs	r0, r0
 8004472:	b021      	add	sp, #132	; 0x84
 8004474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004476:	4b7f      	ldr	r3, [pc, #508]	; (8004674 <_vfiprintf_r+0x258>)
 8004478:	429c      	cmp	r4, r3
 800447a:	d101      	bne.n	8004480 <_vfiprintf_r+0x64>
 800447c:	68b4      	ldr	r4, [r6, #8]
 800447e:	e7de      	b.n	800443e <_vfiprintf_r+0x22>
 8004480:	4b7d      	ldr	r3, [pc, #500]	; (8004678 <_vfiprintf_r+0x25c>)
 8004482:	429c      	cmp	r4, r3
 8004484:	d1db      	bne.n	800443e <_vfiprintf_r+0x22>
 8004486:	68f4      	ldr	r4, [r6, #12]
 8004488:	e7d9      	b.n	800443e <_vfiprintf_r+0x22>
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	059b      	lsls	r3, r3, #22
 800448e:	d4ee      	bmi.n	800446e <_vfiprintf_r+0x52>
 8004490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004492:	f7ff fe4b 	bl	800412c <__retarget_lock_release_recursive>
 8004496:	e7ea      	b.n	800446e <_vfiprintf_r+0x52>
 8004498:	2300      	movs	r3, #0
 800449a:	ad08      	add	r5, sp, #32
 800449c:	616b      	str	r3, [r5, #20]
 800449e:	3320      	adds	r3, #32
 80044a0:	766b      	strb	r3, [r5, #25]
 80044a2:	3310      	adds	r3, #16
 80044a4:	76ab      	strb	r3, [r5, #26]
 80044a6:	9707      	str	r7, [sp, #28]
 80044a8:	9f03      	ldr	r7, [sp, #12]
 80044aa:	783b      	ldrb	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <_vfiprintf_r+0x98>
 80044b0:	2b25      	cmp	r3, #37	; 0x25
 80044b2:	d14e      	bne.n	8004552 <_vfiprintf_r+0x136>
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	1afb      	subs	r3, r7, r3
 80044b8:	9305      	str	r3, [sp, #20]
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	429f      	cmp	r7, r3
 80044be:	d00d      	beq.n	80044dc <_vfiprintf_r+0xc0>
 80044c0:	9b05      	ldr	r3, [sp, #20]
 80044c2:	0021      	movs	r1, r4
 80044c4:	0030      	movs	r0, r6
 80044c6:	9a03      	ldr	r2, [sp, #12]
 80044c8:	f7ff ff95 	bl	80043f6 <__sfputs_r>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d100      	bne.n	80044d2 <_vfiprintf_r+0xb6>
 80044d0:	e0b5      	b.n	800463e <_vfiprintf_r+0x222>
 80044d2:	696a      	ldr	r2, [r5, #20]
 80044d4:	9b05      	ldr	r3, [sp, #20]
 80044d6:	4694      	mov	ip, r2
 80044d8:	4463      	add	r3, ip
 80044da:	616b      	str	r3, [r5, #20]
 80044dc:	783b      	ldrb	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d100      	bne.n	80044e4 <_vfiprintf_r+0xc8>
 80044e2:	e0ac      	b.n	800463e <_vfiprintf_r+0x222>
 80044e4:	2201      	movs	r2, #1
 80044e6:	1c7b      	adds	r3, r7, #1
 80044e8:	9303      	str	r3, [sp, #12]
 80044ea:	2300      	movs	r3, #0
 80044ec:	4252      	negs	r2, r2
 80044ee:	606a      	str	r2, [r5, #4]
 80044f0:	a904      	add	r1, sp, #16
 80044f2:	3254      	adds	r2, #84	; 0x54
 80044f4:	1852      	adds	r2, r2, r1
 80044f6:	602b      	str	r3, [r5, #0]
 80044f8:	60eb      	str	r3, [r5, #12]
 80044fa:	60ab      	str	r3, [r5, #8]
 80044fc:	7013      	strb	r3, [r2, #0]
 80044fe:	65ab      	str	r3, [r5, #88]	; 0x58
 8004500:	9b03      	ldr	r3, [sp, #12]
 8004502:	2205      	movs	r2, #5
 8004504:	7819      	ldrb	r1, [r3, #0]
 8004506:	485d      	ldr	r0, [pc, #372]	; (800467c <_vfiprintf_r+0x260>)
 8004508:	f000 fb00 	bl	8004b0c <memchr>
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	1c5f      	adds	r7, r3, #1
 8004510:	2800      	cmp	r0, #0
 8004512:	d120      	bne.n	8004556 <_vfiprintf_r+0x13a>
 8004514:	682a      	ldr	r2, [r5, #0]
 8004516:	06d3      	lsls	r3, r2, #27
 8004518:	d504      	bpl.n	8004524 <_vfiprintf_r+0x108>
 800451a:	2353      	movs	r3, #83	; 0x53
 800451c:	a904      	add	r1, sp, #16
 800451e:	185b      	adds	r3, r3, r1
 8004520:	2120      	movs	r1, #32
 8004522:	7019      	strb	r1, [r3, #0]
 8004524:	0713      	lsls	r3, r2, #28
 8004526:	d504      	bpl.n	8004532 <_vfiprintf_r+0x116>
 8004528:	2353      	movs	r3, #83	; 0x53
 800452a:	a904      	add	r1, sp, #16
 800452c:	185b      	adds	r3, r3, r1
 800452e:	212b      	movs	r1, #43	; 0x2b
 8004530:	7019      	strb	r1, [r3, #0]
 8004532:	9b03      	ldr	r3, [sp, #12]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b2a      	cmp	r3, #42	; 0x2a
 8004538:	d016      	beq.n	8004568 <_vfiprintf_r+0x14c>
 800453a:	2100      	movs	r1, #0
 800453c:	68eb      	ldr	r3, [r5, #12]
 800453e:	9f03      	ldr	r7, [sp, #12]
 8004540:	783a      	ldrb	r2, [r7, #0]
 8004542:	1c78      	adds	r0, r7, #1
 8004544:	3a30      	subs	r2, #48	; 0x30
 8004546:	4684      	mov	ip, r0
 8004548:	2a09      	cmp	r2, #9
 800454a:	d94f      	bls.n	80045ec <_vfiprintf_r+0x1d0>
 800454c:	2900      	cmp	r1, #0
 800454e:	d111      	bne.n	8004574 <_vfiprintf_r+0x158>
 8004550:	e017      	b.n	8004582 <_vfiprintf_r+0x166>
 8004552:	3701      	adds	r7, #1
 8004554:	e7a9      	b.n	80044aa <_vfiprintf_r+0x8e>
 8004556:	4b49      	ldr	r3, [pc, #292]	; (800467c <_vfiprintf_r+0x260>)
 8004558:	682a      	ldr	r2, [r5, #0]
 800455a:	1ac0      	subs	r0, r0, r3
 800455c:	2301      	movs	r3, #1
 800455e:	4083      	lsls	r3, r0
 8004560:	4313      	orrs	r3, r2
 8004562:	602b      	str	r3, [r5, #0]
 8004564:	9703      	str	r7, [sp, #12]
 8004566:	e7cb      	b.n	8004500 <_vfiprintf_r+0xe4>
 8004568:	9b07      	ldr	r3, [sp, #28]
 800456a:	1d19      	adds	r1, r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	9107      	str	r1, [sp, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	db01      	blt.n	8004578 <_vfiprintf_r+0x15c>
 8004574:	930b      	str	r3, [sp, #44]	; 0x2c
 8004576:	e004      	b.n	8004582 <_vfiprintf_r+0x166>
 8004578:	425b      	negs	r3, r3
 800457a:	60eb      	str	r3, [r5, #12]
 800457c:	2302      	movs	r3, #2
 800457e:	4313      	orrs	r3, r2
 8004580:	602b      	str	r3, [r5, #0]
 8004582:	783b      	ldrb	r3, [r7, #0]
 8004584:	2b2e      	cmp	r3, #46	; 0x2e
 8004586:	d10a      	bne.n	800459e <_vfiprintf_r+0x182>
 8004588:	787b      	ldrb	r3, [r7, #1]
 800458a:	2b2a      	cmp	r3, #42	; 0x2a
 800458c:	d137      	bne.n	80045fe <_vfiprintf_r+0x1e2>
 800458e:	9b07      	ldr	r3, [sp, #28]
 8004590:	3702      	adds	r7, #2
 8004592:	1d1a      	adds	r2, r3, #4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	9207      	str	r2, [sp, #28]
 8004598:	2b00      	cmp	r3, #0
 800459a:	db2d      	blt.n	80045f8 <_vfiprintf_r+0x1dc>
 800459c:	9309      	str	r3, [sp, #36]	; 0x24
 800459e:	2203      	movs	r2, #3
 80045a0:	7839      	ldrb	r1, [r7, #0]
 80045a2:	4837      	ldr	r0, [pc, #220]	; (8004680 <_vfiprintf_r+0x264>)
 80045a4:	f000 fab2 	bl	8004b0c <memchr>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d007      	beq.n	80045bc <_vfiprintf_r+0x1a0>
 80045ac:	4b34      	ldr	r3, [pc, #208]	; (8004680 <_vfiprintf_r+0x264>)
 80045ae:	682a      	ldr	r2, [r5, #0]
 80045b0:	1ac0      	subs	r0, r0, r3
 80045b2:	2340      	movs	r3, #64	; 0x40
 80045b4:	4083      	lsls	r3, r0
 80045b6:	4313      	orrs	r3, r2
 80045b8:	3701      	adds	r7, #1
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	7839      	ldrb	r1, [r7, #0]
 80045be:	1c7b      	adds	r3, r7, #1
 80045c0:	2206      	movs	r2, #6
 80045c2:	4830      	ldr	r0, [pc, #192]	; (8004684 <_vfiprintf_r+0x268>)
 80045c4:	9303      	str	r3, [sp, #12]
 80045c6:	7629      	strb	r1, [r5, #24]
 80045c8:	f000 faa0 	bl	8004b0c <memchr>
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d045      	beq.n	800465c <_vfiprintf_r+0x240>
 80045d0:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <_vfiprintf_r+0x26c>)
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d127      	bne.n	8004626 <_vfiprintf_r+0x20a>
 80045d6:	2207      	movs	r2, #7
 80045d8:	9b07      	ldr	r3, [sp, #28]
 80045da:	3307      	adds	r3, #7
 80045dc:	4393      	bics	r3, r2
 80045de:	3308      	adds	r3, #8
 80045e0:	9307      	str	r3, [sp, #28]
 80045e2:	696b      	ldr	r3, [r5, #20]
 80045e4:	9a04      	ldr	r2, [sp, #16]
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	616b      	str	r3, [r5, #20]
 80045ea:	e75d      	b.n	80044a8 <_vfiprintf_r+0x8c>
 80045ec:	210a      	movs	r1, #10
 80045ee:	434b      	muls	r3, r1
 80045f0:	4667      	mov	r7, ip
 80045f2:	189b      	adds	r3, r3, r2
 80045f4:	3909      	subs	r1, #9
 80045f6:	e7a3      	b.n	8004540 <_vfiprintf_r+0x124>
 80045f8:	2301      	movs	r3, #1
 80045fa:	425b      	negs	r3, r3
 80045fc:	e7ce      	b.n	800459c <_vfiprintf_r+0x180>
 80045fe:	2300      	movs	r3, #0
 8004600:	001a      	movs	r2, r3
 8004602:	3701      	adds	r7, #1
 8004604:	606b      	str	r3, [r5, #4]
 8004606:	7839      	ldrb	r1, [r7, #0]
 8004608:	1c78      	adds	r0, r7, #1
 800460a:	3930      	subs	r1, #48	; 0x30
 800460c:	4684      	mov	ip, r0
 800460e:	2909      	cmp	r1, #9
 8004610:	d903      	bls.n	800461a <_vfiprintf_r+0x1fe>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0c3      	beq.n	800459e <_vfiprintf_r+0x182>
 8004616:	9209      	str	r2, [sp, #36]	; 0x24
 8004618:	e7c1      	b.n	800459e <_vfiprintf_r+0x182>
 800461a:	230a      	movs	r3, #10
 800461c:	435a      	muls	r2, r3
 800461e:	4667      	mov	r7, ip
 8004620:	1852      	adds	r2, r2, r1
 8004622:	3b09      	subs	r3, #9
 8004624:	e7ef      	b.n	8004606 <_vfiprintf_r+0x1ea>
 8004626:	ab07      	add	r3, sp, #28
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	0022      	movs	r2, r4
 800462c:	0029      	movs	r1, r5
 800462e:	0030      	movs	r0, r6
 8004630:	4b16      	ldr	r3, [pc, #88]	; (800468c <_vfiprintf_r+0x270>)
 8004632:	e000      	b.n	8004636 <_vfiprintf_r+0x21a>
 8004634:	bf00      	nop
 8004636:	9004      	str	r0, [sp, #16]
 8004638:	9b04      	ldr	r3, [sp, #16]
 800463a:	3301      	adds	r3, #1
 800463c:	d1d1      	bne.n	80045e2 <_vfiprintf_r+0x1c6>
 800463e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004640:	07db      	lsls	r3, r3, #31
 8004642:	d405      	bmi.n	8004650 <_vfiprintf_r+0x234>
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	059b      	lsls	r3, r3, #22
 8004648:	d402      	bmi.n	8004650 <_vfiprintf_r+0x234>
 800464a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800464c:	f7ff fd6e 	bl	800412c <__retarget_lock_release_recursive>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	065b      	lsls	r3, r3, #25
 8004654:	d500      	bpl.n	8004658 <_vfiprintf_r+0x23c>
 8004656:	e70a      	b.n	800446e <_vfiprintf_r+0x52>
 8004658:	980d      	ldr	r0, [sp, #52]	; 0x34
 800465a:	e70a      	b.n	8004472 <_vfiprintf_r+0x56>
 800465c:	ab07      	add	r3, sp, #28
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	0022      	movs	r2, r4
 8004662:	0029      	movs	r1, r5
 8004664:	0030      	movs	r0, r6
 8004666:	4b09      	ldr	r3, [pc, #36]	; (800468c <_vfiprintf_r+0x270>)
 8004668:	f000 f882 	bl	8004770 <_printf_i>
 800466c:	e7e3      	b.n	8004636 <_vfiprintf_r+0x21a>
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	08005504 	.word	0x08005504
 8004674:	08005524 	.word	0x08005524
 8004678:	080054e4 	.word	0x080054e4
 800467c:	08005544 	.word	0x08005544
 8004680:	0800554a 	.word	0x0800554a
 8004684:	0800554e 	.word	0x0800554e
 8004688:	00000000 	.word	0x00000000
 800468c:	080043f7 	.word	0x080043f7

08004690 <_printf_common>:
 8004690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004692:	0015      	movs	r5, r2
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	688a      	ldr	r2, [r1, #8]
 8004698:	690b      	ldr	r3, [r1, #16]
 800469a:	000c      	movs	r4, r1
 800469c:	9000      	str	r0, [sp, #0]
 800469e:	4293      	cmp	r3, r2
 80046a0:	da00      	bge.n	80046a4 <_printf_common+0x14>
 80046a2:	0013      	movs	r3, r2
 80046a4:	0022      	movs	r2, r4
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	3243      	adds	r2, #67	; 0x43
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	2a00      	cmp	r2, #0
 80046ae:	d001      	beq.n	80046b4 <_printf_common+0x24>
 80046b0:	3301      	adds	r3, #1
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	069b      	lsls	r3, r3, #26
 80046b8:	d502      	bpl.n	80046c0 <_printf_common+0x30>
 80046ba:	682b      	ldr	r3, [r5, #0]
 80046bc:	3302      	adds	r3, #2
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	6822      	ldr	r2, [r4, #0]
 80046c2:	2306      	movs	r3, #6
 80046c4:	0017      	movs	r7, r2
 80046c6:	401f      	ands	r7, r3
 80046c8:	421a      	tst	r2, r3
 80046ca:	d027      	beq.n	800471c <_printf_common+0x8c>
 80046cc:	0023      	movs	r3, r4
 80046ce:	3343      	adds	r3, #67	; 0x43
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	1e5a      	subs	r2, r3, #1
 80046d4:	4193      	sbcs	r3, r2
 80046d6:	6822      	ldr	r2, [r4, #0]
 80046d8:	0692      	lsls	r2, r2, #26
 80046da:	d430      	bmi.n	800473e <_printf_common+0xae>
 80046dc:	0022      	movs	r2, r4
 80046de:	9901      	ldr	r1, [sp, #4]
 80046e0:	9800      	ldr	r0, [sp, #0]
 80046e2:	9e08      	ldr	r6, [sp, #32]
 80046e4:	3243      	adds	r2, #67	; 0x43
 80046e6:	47b0      	blx	r6
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d025      	beq.n	8004738 <_printf_common+0xa8>
 80046ec:	2306      	movs	r3, #6
 80046ee:	6820      	ldr	r0, [r4, #0]
 80046f0:	682a      	ldr	r2, [r5, #0]
 80046f2:	68e1      	ldr	r1, [r4, #12]
 80046f4:	2500      	movs	r5, #0
 80046f6:	4003      	ands	r3, r0
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d103      	bne.n	8004704 <_printf_common+0x74>
 80046fc:	1a8d      	subs	r5, r1, r2
 80046fe:	43eb      	mvns	r3, r5
 8004700:	17db      	asrs	r3, r3, #31
 8004702:	401d      	ands	r5, r3
 8004704:	68a3      	ldr	r3, [r4, #8]
 8004706:	6922      	ldr	r2, [r4, #16]
 8004708:	4293      	cmp	r3, r2
 800470a:	dd01      	ble.n	8004710 <_printf_common+0x80>
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	18ed      	adds	r5, r5, r3
 8004710:	2700      	movs	r7, #0
 8004712:	42bd      	cmp	r5, r7
 8004714:	d120      	bne.n	8004758 <_printf_common+0xc8>
 8004716:	2000      	movs	r0, #0
 8004718:	e010      	b.n	800473c <_printf_common+0xac>
 800471a:	3701      	adds	r7, #1
 800471c:	68e3      	ldr	r3, [r4, #12]
 800471e:	682a      	ldr	r2, [r5, #0]
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	42bb      	cmp	r3, r7
 8004724:	ddd2      	ble.n	80046cc <_printf_common+0x3c>
 8004726:	0022      	movs	r2, r4
 8004728:	2301      	movs	r3, #1
 800472a:	9901      	ldr	r1, [sp, #4]
 800472c:	9800      	ldr	r0, [sp, #0]
 800472e:	9e08      	ldr	r6, [sp, #32]
 8004730:	3219      	adds	r2, #25
 8004732:	47b0      	blx	r6
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d1f0      	bne.n	800471a <_printf_common+0x8a>
 8004738:	2001      	movs	r0, #1
 800473a:	4240      	negs	r0, r0
 800473c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800473e:	2030      	movs	r0, #48	; 0x30
 8004740:	18e1      	adds	r1, r4, r3
 8004742:	3143      	adds	r1, #67	; 0x43
 8004744:	7008      	strb	r0, [r1, #0]
 8004746:	0021      	movs	r1, r4
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	3145      	adds	r1, #69	; 0x45
 800474c:	7809      	ldrb	r1, [r1, #0]
 800474e:	18a2      	adds	r2, r4, r2
 8004750:	3243      	adds	r2, #67	; 0x43
 8004752:	3302      	adds	r3, #2
 8004754:	7011      	strb	r1, [r2, #0]
 8004756:	e7c1      	b.n	80046dc <_printf_common+0x4c>
 8004758:	0022      	movs	r2, r4
 800475a:	2301      	movs	r3, #1
 800475c:	9901      	ldr	r1, [sp, #4]
 800475e:	9800      	ldr	r0, [sp, #0]
 8004760:	9e08      	ldr	r6, [sp, #32]
 8004762:	321a      	adds	r2, #26
 8004764:	47b0      	blx	r6
 8004766:	1c43      	adds	r3, r0, #1
 8004768:	d0e6      	beq.n	8004738 <_printf_common+0xa8>
 800476a:	3701      	adds	r7, #1
 800476c:	e7d1      	b.n	8004712 <_printf_common+0x82>
	...

08004770 <_printf_i>:
 8004770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004772:	b08b      	sub	sp, #44	; 0x2c
 8004774:	9206      	str	r2, [sp, #24]
 8004776:	000a      	movs	r2, r1
 8004778:	3243      	adds	r2, #67	; 0x43
 800477a:	9307      	str	r3, [sp, #28]
 800477c:	9005      	str	r0, [sp, #20]
 800477e:	9204      	str	r2, [sp, #16]
 8004780:	7e0a      	ldrb	r2, [r1, #24]
 8004782:	000c      	movs	r4, r1
 8004784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004786:	2a78      	cmp	r2, #120	; 0x78
 8004788:	d807      	bhi.n	800479a <_printf_i+0x2a>
 800478a:	2a62      	cmp	r2, #98	; 0x62
 800478c:	d809      	bhi.n	80047a2 <_printf_i+0x32>
 800478e:	2a00      	cmp	r2, #0
 8004790:	d100      	bne.n	8004794 <_printf_i+0x24>
 8004792:	e0c1      	b.n	8004918 <_printf_i+0x1a8>
 8004794:	2a58      	cmp	r2, #88	; 0x58
 8004796:	d100      	bne.n	800479a <_printf_i+0x2a>
 8004798:	e08c      	b.n	80048b4 <_printf_i+0x144>
 800479a:	0026      	movs	r6, r4
 800479c:	3642      	adds	r6, #66	; 0x42
 800479e:	7032      	strb	r2, [r6, #0]
 80047a0:	e022      	b.n	80047e8 <_printf_i+0x78>
 80047a2:	0010      	movs	r0, r2
 80047a4:	3863      	subs	r0, #99	; 0x63
 80047a6:	2815      	cmp	r0, #21
 80047a8:	d8f7      	bhi.n	800479a <_printf_i+0x2a>
 80047aa:	f7fb fcad 	bl	8000108 <__gnu_thumb1_case_shi>
 80047ae:	0016      	.short	0x0016
 80047b0:	fff6001f 	.word	0xfff6001f
 80047b4:	fff6fff6 	.word	0xfff6fff6
 80047b8:	001ffff6 	.word	0x001ffff6
 80047bc:	fff6fff6 	.word	0xfff6fff6
 80047c0:	fff6fff6 	.word	0xfff6fff6
 80047c4:	003600a8 	.word	0x003600a8
 80047c8:	fff6009a 	.word	0xfff6009a
 80047cc:	00b9fff6 	.word	0x00b9fff6
 80047d0:	0036fff6 	.word	0x0036fff6
 80047d4:	fff6fff6 	.word	0xfff6fff6
 80047d8:	009e      	.short	0x009e
 80047da:	0026      	movs	r6, r4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	3642      	adds	r6, #66	; 0x42
 80047e0:	1d11      	adds	r1, r2, #4
 80047e2:	6019      	str	r1, [r3, #0]
 80047e4:	6813      	ldr	r3, [r2, #0]
 80047e6:	7033      	strb	r3, [r6, #0]
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0a7      	b.n	800493c <_printf_i+0x1cc>
 80047ec:	6808      	ldr	r0, [r1, #0]
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	1d0a      	adds	r2, r1, #4
 80047f2:	0605      	lsls	r5, r0, #24
 80047f4:	d50b      	bpl.n	800480e <_printf_i+0x9e>
 80047f6:	680d      	ldr	r5, [r1, #0]
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	2d00      	cmp	r5, #0
 80047fc:	da03      	bge.n	8004806 <_printf_i+0x96>
 80047fe:	232d      	movs	r3, #45	; 0x2d
 8004800:	9a04      	ldr	r2, [sp, #16]
 8004802:	426d      	negs	r5, r5
 8004804:	7013      	strb	r3, [r2, #0]
 8004806:	4b61      	ldr	r3, [pc, #388]	; (800498c <_printf_i+0x21c>)
 8004808:	270a      	movs	r7, #10
 800480a:	9303      	str	r3, [sp, #12]
 800480c:	e01b      	b.n	8004846 <_printf_i+0xd6>
 800480e:	680d      	ldr	r5, [r1, #0]
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	0641      	lsls	r1, r0, #25
 8004814:	d5f1      	bpl.n	80047fa <_printf_i+0x8a>
 8004816:	b22d      	sxth	r5, r5
 8004818:	e7ef      	b.n	80047fa <_printf_i+0x8a>
 800481a:	680d      	ldr	r5, [r1, #0]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	1d08      	adds	r0, r1, #4
 8004820:	6018      	str	r0, [r3, #0]
 8004822:	062e      	lsls	r6, r5, #24
 8004824:	d501      	bpl.n	800482a <_printf_i+0xba>
 8004826:	680d      	ldr	r5, [r1, #0]
 8004828:	e003      	b.n	8004832 <_printf_i+0xc2>
 800482a:	066d      	lsls	r5, r5, #25
 800482c:	d5fb      	bpl.n	8004826 <_printf_i+0xb6>
 800482e:	680d      	ldr	r5, [r1, #0]
 8004830:	b2ad      	uxth	r5, r5
 8004832:	4b56      	ldr	r3, [pc, #344]	; (800498c <_printf_i+0x21c>)
 8004834:	2708      	movs	r7, #8
 8004836:	9303      	str	r3, [sp, #12]
 8004838:	2a6f      	cmp	r2, #111	; 0x6f
 800483a:	d000      	beq.n	800483e <_printf_i+0xce>
 800483c:	3702      	adds	r7, #2
 800483e:	0023      	movs	r3, r4
 8004840:	2200      	movs	r2, #0
 8004842:	3343      	adds	r3, #67	; 0x43
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	6863      	ldr	r3, [r4, #4]
 8004848:	60a3      	str	r3, [r4, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	db03      	blt.n	8004856 <_printf_i+0xe6>
 800484e:	2204      	movs	r2, #4
 8004850:	6821      	ldr	r1, [r4, #0]
 8004852:	4391      	bics	r1, r2
 8004854:	6021      	str	r1, [r4, #0]
 8004856:	2d00      	cmp	r5, #0
 8004858:	d102      	bne.n	8004860 <_printf_i+0xf0>
 800485a:	9e04      	ldr	r6, [sp, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00c      	beq.n	800487a <_printf_i+0x10a>
 8004860:	9e04      	ldr	r6, [sp, #16]
 8004862:	0028      	movs	r0, r5
 8004864:	0039      	movs	r1, r7
 8004866:	f7fb fcdf 	bl	8000228 <__aeabi_uidivmod>
 800486a:	9b03      	ldr	r3, [sp, #12]
 800486c:	3e01      	subs	r6, #1
 800486e:	5c5b      	ldrb	r3, [r3, r1]
 8004870:	7033      	strb	r3, [r6, #0]
 8004872:	002b      	movs	r3, r5
 8004874:	0005      	movs	r5, r0
 8004876:	429f      	cmp	r7, r3
 8004878:	d9f3      	bls.n	8004862 <_printf_i+0xf2>
 800487a:	2f08      	cmp	r7, #8
 800487c:	d109      	bne.n	8004892 <_printf_i+0x122>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	07db      	lsls	r3, r3, #31
 8004882:	d506      	bpl.n	8004892 <_printf_i+0x122>
 8004884:	6863      	ldr	r3, [r4, #4]
 8004886:	6922      	ldr	r2, [r4, #16]
 8004888:	4293      	cmp	r3, r2
 800488a:	dc02      	bgt.n	8004892 <_printf_i+0x122>
 800488c:	2330      	movs	r3, #48	; 0x30
 800488e:	3e01      	subs	r6, #1
 8004890:	7033      	strb	r3, [r6, #0]
 8004892:	9b04      	ldr	r3, [sp, #16]
 8004894:	1b9b      	subs	r3, r3, r6
 8004896:	6123      	str	r3, [r4, #16]
 8004898:	9b07      	ldr	r3, [sp, #28]
 800489a:	0021      	movs	r1, r4
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	9805      	ldr	r0, [sp, #20]
 80048a0:	9b06      	ldr	r3, [sp, #24]
 80048a2:	aa09      	add	r2, sp, #36	; 0x24
 80048a4:	f7ff fef4 	bl	8004690 <_printf_common>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d14c      	bne.n	8004946 <_printf_i+0x1d6>
 80048ac:	2001      	movs	r0, #1
 80048ae:	4240      	negs	r0, r0
 80048b0:	b00b      	add	sp, #44	; 0x2c
 80048b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b4:	3145      	adds	r1, #69	; 0x45
 80048b6:	700a      	strb	r2, [r1, #0]
 80048b8:	4a34      	ldr	r2, [pc, #208]	; (800498c <_printf_i+0x21c>)
 80048ba:	9203      	str	r2, [sp, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	6821      	ldr	r1, [r4, #0]
 80048c0:	ca20      	ldmia	r2!, {r5}
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	0608      	lsls	r0, r1, #24
 80048c6:	d516      	bpl.n	80048f6 <_printf_i+0x186>
 80048c8:	07cb      	lsls	r3, r1, #31
 80048ca:	d502      	bpl.n	80048d2 <_printf_i+0x162>
 80048cc:	2320      	movs	r3, #32
 80048ce:	4319      	orrs	r1, r3
 80048d0:	6021      	str	r1, [r4, #0]
 80048d2:	2710      	movs	r7, #16
 80048d4:	2d00      	cmp	r5, #0
 80048d6:	d1b2      	bne.n	800483e <_printf_i+0xce>
 80048d8:	2320      	movs	r3, #32
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	439a      	bics	r2, r3
 80048de:	6022      	str	r2, [r4, #0]
 80048e0:	e7ad      	b.n	800483e <_printf_i+0xce>
 80048e2:	2220      	movs	r2, #32
 80048e4:	6809      	ldr	r1, [r1, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	6022      	str	r2, [r4, #0]
 80048ea:	0022      	movs	r2, r4
 80048ec:	2178      	movs	r1, #120	; 0x78
 80048ee:	3245      	adds	r2, #69	; 0x45
 80048f0:	7011      	strb	r1, [r2, #0]
 80048f2:	4a27      	ldr	r2, [pc, #156]	; (8004990 <_printf_i+0x220>)
 80048f4:	e7e1      	b.n	80048ba <_printf_i+0x14a>
 80048f6:	0648      	lsls	r0, r1, #25
 80048f8:	d5e6      	bpl.n	80048c8 <_printf_i+0x158>
 80048fa:	b2ad      	uxth	r5, r5
 80048fc:	e7e4      	b.n	80048c8 <_printf_i+0x158>
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	680d      	ldr	r5, [r1, #0]
 8004902:	1d10      	adds	r0, r2, #4
 8004904:	6949      	ldr	r1, [r1, #20]
 8004906:	6018      	str	r0, [r3, #0]
 8004908:	6813      	ldr	r3, [r2, #0]
 800490a:	062e      	lsls	r6, r5, #24
 800490c:	d501      	bpl.n	8004912 <_printf_i+0x1a2>
 800490e:	6019      	str	r1, [r3, #0]
 8004910:	e002      	b.n	8004918 <_printf_i+0x1a8>
 8004912:	066d      	lsls	r5, r5, #25
 8004914:	d5fb      	bpl.n	800490e <_printf_i+0x19e>
 8004916:	8019      	strh	r1, [r3, #0]
 8004918:	2300      	movs	r3, #0
 800491a:	9e04      	ldr	r6, [sp, #16]
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	e7bb      	b.n	8004898 <_printf_i+0x128>
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	1d11      	adds	r1, r2, #4
 8004924:	6019      	str	r1, [r3, #0]
 8004926:	6816      	ldr	r6, [r2, #0]
 8004928:	2100      	movs	r1, #0
 800492a:	0030      	movs	r0, r6
 800492c:	6862      	ldr	r2, [r4, #4]
 800492e:	f000 f8ed 	bl	8004b0c <memchr>
 8004932:	2800      	cmp	r0, #0
 8004934:	d001      	beq.n	800493a <_printf_i+0x1ca>
 8004936:	1b80      	subs	r0, r0, r6
 8004938:	6060      	str	r0, [r4, #4]
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	2300      	movs	r3, #0
 8004940:	9a04      	ldr	r2, [sp, #16]
 8004942:	7013      	strb	r3, [r2, #0]
 8004944:	e7a8      	b.n	8004898 <_printf_i+0x128>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	0032      	movs	r2, r6
 800494a:	9906      	ldr	r1, [sp, #24]
 800494c:	9805      	ldr	r0, [sp, #20]
 800494e:	9d07      	ldr	r5, [sp, #28]
 8004950:	47a8      	blx	r5
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	d0aa      	beq.n	80048ac <_printf_i+0x13c>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	079b      	lsls	r3, r3, #30
 800495a:	d415      	bmi.n	8004988 <_printf_i+0x218>
 800495c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800495e:	68e0      	ldr	r0, [r4, #12]
 8004960:	4298      	cmp	r0, r3
 8004962:	daa5      	bge.n	80048b0 <_printf_i+0x140>
 8004964:	0018      	movs	r0, r3
 8004966:	e7a3      	b.n	80048b0 <_printf_i+0x140>
 8004968:	0022      	movs	r2, r4
 800496a:	2301      	movs	r3, #1
 800496c:	9906      	ldr	r1, [sp, #24]
 800496e:	9805      	ldr	r0, [sp, #20]
 8004970:	9e07      	ldr	r6, [sp, #28]
 8004972:	3219      	adds	r2, #25
 8004974:	47b0      	blx	r6
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	d098      	beq.n	80048ac <_printf_i+0x13c>
 800497a:	3501      	adds	r5, #1
 800497c:	68e3      	ldr	r3, [r4, #12]
 800497e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	42ab      	cmp	r3, r5
 8004984:	dcf0      	bgt.n	8004968 <_printf_i+0x1f8>
 8004986:	e7e9      	b.n	800495c <_printf_i+0x1ec>
 8004988:	2500      	movs	r5, #0
 800498a:	e7f7      	b.n	800497c <_printf_i+0x20c>
 800498c:	08005555 	.word	0x08005555
 8004990:	08005566 	.word	0x08005566

08004994 <_sbrk_r>:
 8004994:	2300      	movs	r3, #0
 8004996:	b570      	push	{r4, r5, r6, lr}
 8004998:	4d06      	ldr	r5, [pc, #24]	; (80049b4 <_sbrk_r+0x20>)
 800499a:	0004      	movs	r4, r0
 800499c:	0008      	movs	r0, r1
 800499e:	602b      	str	r3, [r5, #0]
 80049a0:	f7fc fefa 	bl	8001798 <_sbrk>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d103      	bne.n	80049b0 <_sbrk_r+0x1c>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d000      	beq.n	80049b0 <_sbrk_r+0x1c>
 80049ae:	6023      	str	r3, [r4, #0]
 80049b0:	bd70      	pop	{r4, r5, r6, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	200003d0 	.word	0x200003d0

080049b8 <__sread>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	000c      	movs	r4, r1
 80049bc:	250e      	movs	r5, #14
 80049be:	5f49      	ldrsh	r1, [r1, r5]
 80049c0:	f000 f8c0 	bl	8004b44 <_read_r>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	db03      	blt.n	80049d0 <__sread+0x18>
 80049c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80049ca:	181b      	adds	r3, r3, r0
 80049cc:	6563      	str	r3, [r4, #84]	; 0x54
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	4a02      	ldr	r2, [pc, #8]	; (80049dc <__sread+0x24>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	e7f9      	b.n	80049ce <__sread+0x16>
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	ffffefff 	.word	0xffffefff

080049e0 <__swrite>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	001f      	movs	r7, r3
 80049e4:	898b      	ldrh	r3, [r1, #12]
 80049e6:	0005      	movs	r5, r0
 80049e8:	000c      	movs	r4, r1
 80049ea:	0016      	movs	r6, r2
 80049ec:	05db      	lsls	r3, r3, #23
 80049ee:	d505      	bpl.n	80049fc <__swrite+0x1c>
 80049f0:	230e      	movs	r3, #14
 80049f2:	5ec9      	ldrsh	r1, [r1, r3]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2302      	movs	r3, #2
 80049f8:	f000 f874 	bl	8004ae4 <_lseek_r>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <__swrite+0x34>)
 8004a00:	0028      	movs	r0, r5
 8004a02:	4013      	ands	r3, r2
 8004a04:	81a3      	strh	r3, [r4, #12]
 8004a06:	0032      	movs	r2, r6
 8004a08:	230e      	movs	r3, #14
 8004a0a:	5ee1      	ldrsh	r1, [r4, r3]
 8004a0c:	003b      	movs	r3, r7
 8004a0e:	f000 f81f 	bl	8004a50 <_write_r>
 8004a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a14:	ffffefff 	.word	0xffffefff

08004a18 <__sseek>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	000c      	movs	r4, r1
 8004a1c:	250e      	movs	r5, #14
 8004a1e:	5f49      	ldrsh	r1, [r1, r5]
 8004a20:	f000 f860 	bl	8004ae4 <_lseek_r>
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	1c42      	adds	r2, r0, #1
 8004a28:	d103      	bne.n	8004a32 <__sseek+0x1a>
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <__sseek+0x28>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	81a3      	strh	r3, [r4, #12]
 8004a30:	bd70      	pop	{r4, r5, r6, pc}
 8004a32:	2280      	movs	r2, #128	; 0x80
 8004a34:	0152      	lsls	r2, r2, #5
 8004a36:	4313      	orrs	r3, r2
 8004a38:	81a3      	strh	r3, [r4, #12]
 8004a3a:	6560      	str	r0, [r4, #84]	; 0x54
 8004a3c:	e7f8      	b.n	8004a30 <__sseek+0x18>
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	ffffefff 	.word	0xffffefff

08004a44 <__sclose>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	230e      	movs	r3, #14
 8004a48:	5ec9      	ldrsh	r1, [r1, r3]
 8004a4a:	f000 f815 	bl	8004a78 <_close_r>
 8004a4e:	bd10      	pop	{r4, pc}

08004a50 <_write_r>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	0004      	movs	r4, r0
 8004a54:	0008      	movs	r0, r1
 8004a56:	0011      	movs	r1, r2
 8004a58:	001a      	movs	r2, r3
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4d05      	ldr	r5, [pc, #20]	; (8004a74 <_write_r+0x24>)
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	f7fc fe51 	bl	8001706 <_write>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d103      	bne.n	8004a70 <_write_r+0x20>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d000      	beq.n	8004a70 <_write_r+0x20>
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	bd70      	pop	{r4, r5, r6, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	200003d0 	.word	0x200003d0

08004a78 <_close_r>:
 8004a78:	2300      	movs	r3, #0
 8004a7a:	b570      	push	{r4, r5, r6, lr}
 8004a7c:	4d06      	ldr	r5, [pc, #24]	; (8004a98 <_close_r+0x20>)
 8004a7e:	0004      	movs	r4, r0
 8004a80:	0008      	movs	r0, r1
 8004a82:	602b      	str	r3, [r5, #0]
 8004a84:	f7fc fe5b 	bl	800173e <_close>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d103      	bne.n	8004a94 <_close_r+0x1c>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d000      	beq.n	8004a94 <_close_r+0x1c>
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	bd70      	pop	{r4, r5, r6, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	200003d0 	.word	0x200003d0

08004a9c <_fstat_r>:
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	b570      	push	{r4, r5, r6, lr}
 8004aa0:	4d06      	ldr	r5, [pc, #24]	; (8004abc <_fstat_r+0x20>)
 8004aa2:	0004      	movs	r4, r0
 8004aa4:	0008      	movs	r0, r1
 8004aa6:	0011      	movs	r1, r2
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	f7fc fe52 	bl	8001752 <_fstat>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	d103      	bne.n	8004aba <_fstat_r+0x1e>
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d000      	beq.n	8004aba <_fstat_r+0x1e>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	200003d0 	.word	0x200003d0

08004ac0 <_isatty_r>:
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	b570      	push	{r4, r5, r6, lr}
 8004ac4:	4d06      	ldr	r5, [pc, #24]	; (8004ae0 <_isatty_r+0x20>)
 8004ac6:	0004      	movs	r4, r0
 8004ac8:	0008      	movs	r0, r1
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	f7fc fe4f 	bl	800176e <_isatty>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d103      	bne.n	8004adc <_isatty_r+0x1c>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d000      	beq.n	8004adc <_isatty_r+0x1c>
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	bd70      	pop	{r4, r5, r6, pc}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	200003d0 	.word	0x200003d0

08004ae4 <_lseek_r>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	0004      	movs	r4, r0
 8004ae8:	0008      	movs	r0, r1
 8004aea:	0011      	movs	r1, r2
 8004aec:	001a      	movs	r2, r3
 8004aee:	2300      	movs	r3, #0
 8004af0:	4d05      	ldr	r5, [pc, #20]	; (8004b08 <_lseek_r+0x24>)
 8004af2:	602b      	str	r3, [r5, #0]
 8004af4:	f7fc fe44 	bl	8001780 <_lseek>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d103      	bne.n	8004b04 <_lseek_r+0x20>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d000      	beq.n	8004b04 <_lseek_r+0x20>
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	200003d0 	.word	0x200003d0

08004b0c <memchr>:
 8004b0c:	b2c9      	uxtb	r1, r1
 8004b0e:	1882      	adds	r2, r0, r2
 8004b10:	4290      	cmp	r0, r2
 8004b12:	d101      	bne.n	8004b18 <memchr+0xc>
 8004b14:	2000      	movs	r0, #0
 8004b16:	4770      	bx	lr
 8004b18:	7803      	ldrb	r3, [r0, #0]
 8004b1a:	428b      	cmp	r3, r1
 8004b1c:	d0fb      	beq.n	8004b16 <memchr+0xa>
 8004b1e:	3001      	adds	r0, #1
 8004b20:	e7f6      	b.n	8004b10 <memchr+0x4>
	...

08004b24 <__malloc_lock>:
 8004b24:	b510      	push	{r4, lr}
 8004b26:	4802      	ldr	r0, [pc, #8]	; (8004b30 <__malloc_lock+0xc>)
 8004b28:	f7ff faff 	bl	800412a <__retarget_lock_acquire_recursive>
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	200003c4 	.word	0x200003c4

08004b34 <__malloc_unlock>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	4802      	ldr	r0, [pc, #8]	; (8004b40 <__malloc_unlock+0xc>)
 8004b38:	f7ff faf8 	bl	800412c <__retarget_lock_release_recursive>
 8004b3c:	bd10      	pop	{r4, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	200003c4 	.word	0x200003c4

08004b44 <_read_r>:
 8004b44:	b570      	push	{r4, r5, r6, lr}
 8004b46:	0004      	movs	r4, r0
 8004b48:	0008      	movs	r0, r1
 8004b4a:	0011      	movs	r1, r2
 8004b4c:	001a      	movs	r2, r3
 8004b4e:	2300      	movs	r3, #0
 8004b50:	4d05      	ldr	r5, [pc, #20]	; (8004b68 <_read_r+0x24>)
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	f7fc fdba 	bl	80016cc <_read>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d103      	bne.n	8004b64 <_read_r+0x20>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d000      	beq.n	8004b64 <_read_r+0x20>
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	bd70      	pop	{r4, r5, r6, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	200003d0 	.word	0x200003d0

08004b6c <_init>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr

08004b78 <_fini>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr
